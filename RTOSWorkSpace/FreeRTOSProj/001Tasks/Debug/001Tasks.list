
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ff0  08005ff0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ff8  08005ff8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ff8  08005ff8  00015ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001342c  20000078  08006078  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200134a4  08006078  000234a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ea9  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029b4  00000000  00000000  00034f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  00037908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f90  00000000  00000000  000389f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002338c  00000000  00000000  00039980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000de2f  00000000  00000000  0005cd0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d51c2  00000000  00000000  0006ab3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013fcfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004988  00000000  00000000  0013fd78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e7c 	.word	0x08005e7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005e7c 	.word	0x08005e7c

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200133f8 	.word	0x200133f8
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fc55 	bl	8000ec4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f8f3 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f95b 	bl	80008d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000622:	4b42      	ldr	r3, [pc, #264]	; (800072c <main+0x11c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a41      	ldr	r2, [pc, #260]	; (800072c <main+0x11c>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]

  //SEGGER_SYSVIEW_Conf();

 // SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800062e:	4b40      	ldr	r3, [pc, #256]	; (8000730 <main+0x120>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2302      	movs	r3, #2
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	4b3f      	ldr	r3, [pc, #252]	; (8000734 <main+0x124>)
 8000638:	22c8      	movs	r2, #200	; 0xc8
 800063a:	493f      	ldr	r1, [pc, #252]	; (8000738 <main+0x128>)
 800063c:	483f      	ldr	r0, [pc, #252]	; (800073c <main+0x12c>)
 800063e:	f001 febd 	bl	80023bc <xTaskCreate>
 8000642:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d009      	beq.n	800065e <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	613b      	str	r3, [r7, #16]
 800065c:	e7fe      	b.n	800065c <main+0x4c>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800065e:	4b38      	ldr	r3, [pc, #224]	; (8000740 <main+0x130>)
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2302      	movs	r3, #2
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	4b37      	ldr	r3, [pc, #220]	; (8000744 <main+0x134>)
 8000668:	22c8      	movs	r2, #200	; 0xc8
 800066a:	4937      	ldr	r1, [pc, #220]	; (8000748 <main+0x138>)
 800066c:	4837      	ldr	r0, [pc, #220]	; (800074c <main+0x13c>)
 800066e:	f001 fea5 	bl	80023bc <xTaskCreate>
 8000672:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d009      	beq.n	800068e <main+0x7e>
 800067a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800067e:	f383 8811 	msr	BASEPRI, r3
 8000682:	f3bf 8f6f 	isb	sy
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	e7fe      	b.n	800068c <main+0x7c>

  status = xTaskCreate(task3_handler, "Task-3", 500, "Hello world from Task-3", 3, &task3_handle);
 800068e:	4b30      	ldr	r3, [pc, #192]	; (8000750 <main+0x140>)
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2303      	movs	r3, #3
 8000694:	9300      	str	r3, [sp, #0]
 8000696:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <main+0x144>)
 8000698:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800069c:	492e      	ldr	r1, [pc, #184]	; (8000758 <main+0x148>)
 800069e:	482f      	ldr	r0, [pc, #188]	; (800075c <main+0x14c>)
 80006a0:	f001 fe8c 	bl	80023bc <xTaskCreate>
 80006a4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d009      	beq.n	80006c0 <main+0xb0>
 80006ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006b0:	f383 8811 	msr	BASEPRI, r3
 80006b4:	f3bf 8f6f 	isb	sy
 80006b8:	f3bf 8f4f 	dsb	sy
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	e7fe      	b.n	80006be <main+0xae>


  status = xTaskCreate(button_handler, "Task-4", 500, "button task", 3, &button_task_handle);
 80006c0:	4b27      	ldr	r3, [pc, #156]	; (8000760 <main+0x150>)
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	2303      	movs	r3, #3
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <main+0x154>)
 80006ca:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006ce:	4926      	ldr	r1, [pc, #152]	; (8000768 <main+0x158>)
 80006d0:	4826      	ldr	r0, [pc, #152]	; (800076c <main+0x15c>)
 80006d2:	f001 fe73 	bl	80023bc <xTaskCreate>
 80006d6:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d009      	beq.n	80006f2 <main+0xe2>
 80006de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006e2:	f383 8811 	msr	BASEPRI, r3
 80006e6:	f3bf 8f6f 	isb	sy
 80006ea:	f3bf 8f4f 	dsb	sy
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	e7fe      	b.n	80006f0 <main+0xe0>

  status = xTaskCreate(led_task, "Task-5", 500, "led task", 3, &led_task_handle);
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <main+0x160>)
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2303      	movs	r3, #3
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <main+0x164>)
 80006fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000700:	491d      	ldr	r1, [pc, #116]	; (8000778 <main+0x168>)
 8000702:	481e      	ldr	r0, [pc, #120]	; (800077c <main+0x16c>)
 8000704:	f001 fe5a 	bl	80023bc <xTaskCreate>
 8000708:	6178      	str	r0, [r7, #20]

   configASSERT(status == pdPASS);
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d009      	beq.n	8000724 <main+0x114>
 8000710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000714:	f383 8811 	msr	BASEPRI, r3
 8000718:	f3bf 8f6f 	isb	sy
 800071c:	f3bf 8f4f 	dsb	sy
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	e7fe      	b.n	8000722 <main+0x112>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000724:	f002 f9e4 	bl	8002af0 <vTaskStartScheduler>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000728:	e7fe      	b.n	8000728 <main+0x118>
 800072a:	bf00      	nop
 800072c:	e0001000 	.word	0xe0001000
 8000730:	200133a0 	.word	0x200133a0
 8000734:	08005e94 	.word	0x08005e94
 8000738:	08005eac 	.word	0x08005eac
 800073c:	08000b99 	.word	0x08000b99
 8000740:	200133a4 	.word	0x200133a4
 8000744:	08005eb4 	.word	0x08005eb4
 8000748:	08005ecc 	.word	0x08005ecc
 800074c:	08000bd5 	.word	0x08000bd5
 8000750:	200133b0 	.word	0x200133b0
 8000754:	08005ed4 	.word	0x08005ed4
 8000758:	08005eec 	.word	0x08005eec
 800075c:	08000c1d 	.word	0x08000c1d
 8000760:	200133ac 	.word	0x200133ac
 8000764:	08005ef4 	.word	0x08005ef4
 8000768:	08005f00 	.word	0x08005f00
 800076c:	08000781 	.word	0x08000781
 8000770:	200133a8 	.word	0x200133a8
 8000774:	08005f08 	.word	0x08005f08
 8000778:	08005f14 	.word	0x08005f14
 800077c:	080007d1 	.word	0x080007d1

08000780 <button_handler>:
  * @retval None
  */


static void button_handler(void* parameters)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af02      	add	r7, sp, #8
 8000786:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]

	while(1){

		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000790:	2101      	movs	r1, #1
 8000792:	480d      	ldr	r0, [pc, #52]	; (80007c8 <button_handler+0x48>)
 8000794:	f000 fe54 	bl	8001440 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 800079c:	7bbb      	ldrb	r3, [r7, #14]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d00b      	beq.n	80007ba <button_handler+0x3a>
		{
			if(! prev_read)
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d108      	bne.n	80007ba <button_handler+0x3a>
				xTaskNotify(led_task_handle,0,eNoAction);
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <button_handler+0x4c>)
 80007aa:	6818      	ldr	r0, [r3, #0]
 80007ac:	2300      	movs	r3, #0
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2300      	movs	r3, #0
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	f002 fd1f 	bl	80031f8 <xTaskGenericNotify>
		}
		prev_read = btn_read;
 80007ba:	7bbb      	ldrb	r3, [r7, #14]
 80007bc:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 80007be:	200a      	movs	r0, #10
 80007c0:	f002 f884 	bl	80028cc <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80007c4:	e7e4      	b.n	8000790 <button_handler+0x10>
 80007c6:	bf00      	nop
 80007c8:	40020000 	.word	0x40020000
 80007cc:	200133a8 	.word	0x200133a8

080007d0 <led_task>:

}


static void led_task(void* parameters)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af02      	add	r7, sp, #8
 80007d6:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
		while(1)
		{
			status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80007d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2300      	movs	r3, #0
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	2000      	movs	r0, #0
 80007e6:	f002 fc7f 	bl	80030e8 <xTaskGenericNotifyWait>
 80007ea:	60f8      	str	r0, [r7, #12]
			if(status == pdTRUE){
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d1f2      	bne.n	80007d8 <led_task+0x8>
				vTaskSuspendAll();
 80007f2:	f002 f9d7 	bl	8002ba4 <vTaskSuspendAll>
				xTaskResumeAll();
 80007f6:	f002 f9e3 	bl	8002bc0 <xTaskResumeAll>
				//HAL_GPIO_WritePin(GPIOD, GPIO_,GPIO_PIN_SET);
				vTaskDelete(NULL);
 80007fa:	2000      	movs	r0, #0
 80007fc:	f001 ff40 	bl	8002680 <vTaskDelete>
			status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000800:	e7ea      	b.n	80007d8 <led_task+0x8>
	...

08000804 <SystemClock_Config>:
			}

		}
}
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	2230      	movs	r2, #48	; 0x30
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f004 ff0c 	bl	8005630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <SystemClock_Config+0xcc>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	4a27      	ldr	r2, [pc, #156]	; (80008d0 <SystemClock_Config+0xcc>)
 8000832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000836:	6413      	str	r3, [r2, #64]	; 0x40
 8000838:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <SystemClock_Config+0xcc>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <SystemClock_Config+0xd0>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <SystemClock_Config+0xd0>)
 800084e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <SystemClock_Config+0xd0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000860:	2302      	movs	r3, #2
 8000862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000864:	2301      	movs	r3, #1
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000868:	2310      	movs	r3, #16
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086c:	2302      	movs	r3, #2
 800086e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000870:	2300      	movs	r3, #0
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000874:	2308      	movs	r3, #8
 8000876:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000878:	23a8      	movs	r3, #168	; 0xa8
 800087a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800087c:	2302      	movs	r3, #2
 800087e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000880:	2307      	movs	r3, #7
 8000882:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4618      	mov	r0, r3
 800088a:	f000 fe25 	bl	80014d8 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000894:	f000 fa28 	bl	8000ce8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2302      	movs	r3, #2
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2105      	movs	r1, #5
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 f87e 	bl	80019b8 <HAL_RCC_ClockConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008c2:	f000 fa11 	bl	8000ce8 <Error_Handler>
  }
}
 80008c6:	bf00      	nop
 80008c8:	3750      	adds	r7, #80	; 0x50
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40007000 	.word	0x40007000

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08c      	sub	sp, #48	; 0x30
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
 80008f2:	4ba1      	ldr	r3, [pc, #644]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4aa0      	ldr	r2, [pc, #640]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 80008f8:	f043 0310 	orr.w	r3, r3, #16
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b9e      	ldr	r3, [pc, #632]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	61bb      	str	r3, [r7, #24]
 8000908:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	4b9a      	ldr	r3, [pc, #616]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a99      	ldr	r2, [pc, #612]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b97      	ldr	r3, [pc, #604]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	4b93      	ldr	r3, [pc, #588]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a92      	ldr	r2, [pc, #584]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 8000930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b90      	ldr	r3, [pc, #576]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b8c      	ldr	r3, [pc, #560]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a8b      	ldr	r2, [pc, #556]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b89      	ldr	r3, [pc, #548]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	4b85      	ldr	r3, [pc, #532]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a84      	ldr	r2, [pc, #528]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b82      	ldr	r3, [pc, #520]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b7e      	ldr	r3, [pc, #504]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a7d      	ldr	r2, [pc, #500]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b7b      	ldr	r3, [pc, #492]	; (8000b78 <MX_GPIO_Init+0x2a0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2108      	movs	r1, #8
 800099a:	4878      	ldr	r0, [pc, #480]	; (8000b7c <MX_GPIO_Init+0x2a4>)
 800099c:	f000 fd68 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2101      	movs	r1, #1
 80009a4:	4876      	ldr	r0, [pc, #472]	; (8000b80 <MX_GPIO_Init+0x2a8>)
 80009a6:	f000 fd63 	bl	8001470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80009aa:	2200      	movs	r2, #0
 80009ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009b0:	4874      	ldr	r0, [pc, #464]	; (8000b84 <MX_GPIO_Init+0x2ac>)
 80009b2:	f000 fd5d 	bl	8001470 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009b6:	2308      	movs	r3, #8
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	486b      	ldr	r0, [pc, #428]	; (8000b7c <MX_GPIO_Init+0x2a4>)
 80009ce:	f000 fb9d 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009d2:	2301      	movs	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4865      	ldr	r0, [pc, #404]	; (8000b80 <MX_GPIO_Init+0x2a8>)
 80009ea:	f000 fb8f 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009ee:	2308      	movs	r3, #8
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f2:	2302      	movs	r3, #2
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009fe:	2305      	movs	r3, #5
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	485d      	ldr	r0, [pc, #372]	; (8000b80 <MX_GPIO_Init+0x2a8>)
 8000a0a:	f000 fb7f 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a12:	4b5d      	ldr	r3, [pc, #372]	; (8000b88 <MX_GPIO_Init+0x2b0>)
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	485a      	ldr	r0, [pc, #360]	; (8000b8c <MX_GPIO_Init+0x2b4>)
 8000a22:	f000 fb73 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a26:	2310      	movs	r3, #16
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a36:	2306      	movs	r3, #6
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 031c 	add.w	r3, r7, #28
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4852      	ldr	r0, [pc, #328]	; (8000b8c <MX_GPIO_Init+0x2b4>)
 8000a42:	f000 fb63 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a46:	23e0      	movs	r3, #224	; 0xe0
 8000a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a56:	2305      	movs	r3, #5
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	4619      	mov	r1, r3
 8000a60:	484a      	ldr	r0, [pc, #296]	; (8000b8c <MX_GPIO_Init+0x2b4>)
 8000a62:	f000 fb53 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a66:	2304      	movs	r3, #4
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	4619      	mov	r1, r3
 8000a78:	4845      	ldr	r0, [pc, #276]	; (8000b90 <MX_GPIO_Init+0x2b8>)
 8000a7a:	f000 fb47 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a90:	2305      	movs	r3, #5
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	483d      	ldr	r0, [pc, #244]	; (8000b90 <MX_GPIO_Init+0x2b8>)
 8000a9c:	f000 fb36 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000aa0:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000aa4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4832      	ldr	r0, [pc, #200]	; (8000b84 <MX_GPIO_Init+0x2ac>)
 8000aba:	f000 fb27 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000abe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad0:	2306      	movs	r3, #6
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4829      	ldr	r0, [pc, #164]	; (8000b80 <MX_GPIO_Init+0x2a8>)
 8000adc:	f000 fb16 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4825      	ldr	r0, [pc, #148]	; (8000b8c <MX_GPIO_Init+0x2b4>)
 8000af6:	f000 fb09 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000afa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b0c:	230a      	movs	r3, #10
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	481d      	ldr	r0, [pc, #116]	; (8000b8c <MX_GPIO_Init+0x2b4>)
 8000b18:	f000 faf8 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4815      	ldr	r0, [pc, #84]	; (8000b84 <MX_GPIO_Init+0x2ac>)
 8000b30:	f000 faec 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b34:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3a:	2312      	movs	r3, #18
 8000b3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b46:	2304      	movs	r3, #4
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	480f      	ldr	r0, [pc, #60]	; (8000b90 <MX_GPIO_Init+0x2b8>)
 8000b52:	f000 fadb 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_GPIO_Init+0x2bc>)
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	4804      	ldr	r0, [pc, #16]	; (8000b7c <MX_GPIO_Init+0x2a4>)
 8000b6a:	f000 facf 	bl	800110c <HAL_GPIO_Init>

}
 8000b6e:	bf00      	nop
 8000b70:	3730      	adds	r7, #48	; 0x30
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020c00 	.word	0x40020c00
 8000b88:	10110000 	.word	0x10110000
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020400 	.word	0x40020400
 8000b94:	10120000 	.word	0x10120000

08000b98 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

	//char msg[100];
	const TickType_t xTicksToDelay =200;
 8000ba0:	23c8      	movs	r3, #200	; 0xc8
 8000ba2:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//snprintf(msg,100,"%s\n", (char*)parameters);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_10);
 8000ba4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba8:	4808      	ldr	r0, [pc, #32]	; (8000bcc <task1_handler+0x34>)
 8000baa:	f000 fc7a 	bl	80014a2 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(xTicksToDelay));
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb4:	fb02 f303 	mul.w	r3, r2, r3
 8000bb8:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <task1_handler+0x38>)
 8000bba:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbe:	099b      	lsrs	r3, r3, #6
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 fe83 	bl	80028cc <vTaskDelay>
		//SEGGER_SYSVIEW_PrintfTarget(msg);
		//taskYIELD();
		switch_priority();
 8000bc6:	f000 f841 	bl	8000c4c <switch_priority>
	{
 8000bca:	e7eb      	b.n	8000ba4 <task1_handler+0xc>
 8000bcc:	40020c00 	.word	0x40020c00
 8000bd0:	10624dd3 	.word	0x10624dd3

08000bd4 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	/*using vTaskDelayuntil for periodicity time */
	TickType_t xLastWaketime;
	const TickType_t xFrequency = 100; //100 mSec
 8000bdc:	2364      	movs	r3, #100	; 0x64
 8000bde:	60fb      	str	r3, [r7, #12]
	//char msg[100];
	xLastWaketime = xTaskGetTickCount();
 8000be0:	f002 f88e 	bl	8002d00 <xTaskGetTickCount>
 8000be4:	4603      	mov	r3, r0
 8000be6:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		//snprintf(msg,100,"%s\n", (char*)parameters);
		//SEGGER_SYSVIEW_PrintfTarget(msg);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8000be8:	2104      	movs	r1, #4
 8000bea:	480a      	ldr	r0, [pc, #40]	; (8000c14 <task2_handler+0x40>)
 8000bec:	f000 fc59 	bl	80014a2 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWaketime,pdMS_TO_TICKS(xFrequency) );
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bf6:	fb02 f303 	mul.w	r3, r2, r3
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <task2_handler+0x44>)
 8000bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8000c00:	099a      	lsrs	r2, r3, #6
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fde1 	bl	80027d0 <xTaskDelayUntil>
		switch_priority();
 8000c0e:	f000 f81d 	bl	8000c4c <switch_priority>
	{
 8000c12:	e7e9      	b.n	8000be8 <task2_handler+0x14>
 8000c14:	40020c00 	.word	0x40020c00
 8000c18:	10624dd3 	.word	0x10624dd3

08000c1c <task3_handler>:
	}

}

static void task3_handler(void *parameters)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b09c      	sub	sp, #112	; 0x70
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000c24:	f107 000c 	add.w	r0, r7, #12
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <task3_handler+0x28>)
 8000c2c:	2164      	movs	r1, #100	; 0x64
 8000c2e:	f004 fd07 	bl	8005640 <sniprintf>
		taskYIELD();
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <task3_handler+0x2c>)
 8000c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	f3bf 8f4f 	dsb	sy
 8000c3e:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000c42:	e7ef      	b.n	8000c24 <task3_handler+0x8>
 8000c44:	08005f1c 	.word	0x08005f1c
 8000c48:	e000ed04 	.word	0xe000ed04

08000c4c <switch_priority>:

}


void switch_priority(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 8000c56:	f002 fdd5 	bl	8003804 <vPortEnterCritical>
	if(status_button){
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <switch_priority+0x74>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d004      	beq.n	8000c6c <switch_priority+0x20>
		status_button = 0;
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <switch_priority+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8000c6c:	f002 fdf8 	bl	8003860 <vPortExitCritical>

	if(switch_priority){
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d01f      	beq.n	8000cb6 <switch_priority+0x6a>
		//t1 = xTaskGetHandle("Task-1");
		//t2 = xTaskGetHandle("Task-2");

		p1 = uxTaskPriorityGet(t1);
 8000c76:	6938      	ldr	r0, [r7, #16]
 8000c78:	f001 fe60 	bl	800293c <uxTaskPriorityGet>
 8000c7c:	60f8      	str	r0, [r7, #12]
		p2 = uxTaskPriorityGet(t2);
 8000c7e:	68b8      	ldr	r0, [r7, #8]
 8000c80:	f001 fe5c 	bl	800293c <uxTaskPriorityGet>
 8000c84:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8000c86:	f002 fa1f 	bl	80030c8 <xTaskGetCurrentTaskHandle>
 8000c8a:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d108      	bne.n	8000ca6 <switch_priority+0x5a>
			vTaskPrioritySet(t1,p2);
 8000c94:	6879      	ldr	r1, [r7, #4]
 8000c96:	6938      	ldr	r0, [r7, #16]
 8000c98:	f001 fe6a 	bl	8002970 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 8000c9c:	68f9      	ldr	r1, [r7, #12]
 8000c9e:	68b8      	ldr	r0, [r7, #8]
 8000ca0:	f001 fe66 	bl	8002970 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}

}
 8000ca4:	e007      	b.n	8000cb6 <switch_priority+0x6a>
			vTaskPrioritySet(t2,p1);
 8000ca6:	68f9      	ldr	r1, [r7, #12]
 8000ca8:	68b8      	ldr	r0, [r7, #8]
 8000caa:	f001 fe61 	bl	8002970 <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 8000cae:	6879      	ldr	r1, [r7, #4]
 8000cb0:	6938      	ldr	r0, [r7, #16]
 8000cb2:	f001 fe5d 	bl	8002970 <vTaskPrioritySet>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000094 	.word	0x20000094

08000cc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d101      	bne.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cd6:	f000 f917 	bl	8000f08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40001000 	.word	0x40001000

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0e:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a08      	ldr	r2, [pc, #32]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000d36:	f002 fceb 	bl	8003710 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	2036      	movs	r0, #54	; 0x36
 8000d5e:	f000 f9ab 	bl	80010b8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000d62:	2036      	movs	r0, #54	; 0x36
 8000d64:	f000 f9c4 	bl	80010f0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <HAL_InitTick+0xa4>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4a1e      	ldr	r2, [pc, #120]	; (8000dec <HAL_InitTick+0xa4>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	6413      	str	r3, [r2, #64]	; 0x40
 8000d78:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <HAL_InitTick+0xa4>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f003 0310 	and.w	r3, r3, #16
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d84:	f107 0210 	add.w	r2, r7, #16
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fff0 	bl	8001d74 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d94:	f000 ffda 	bl	8001d4c <HAL_RCC_GetPCLK1Freq>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da0:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <HAL_InitTick+0xa8>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	0c9b      	lsrs	r3, r3, #18
 8000da8:	3b01      	subs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_InitTick+0xac>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <HAL_InitTick+0xb0>)
 8000db0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_InitTick+0xac>)
 8000db4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_InitTick+0xac>)
 8000dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_InitTick+0xac>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_InitTick+0xac>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <HAL_InitTick+0xac>)
 8000dce:	f001 f803 	bl	8001dd8 <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d104      	bne.n	8000de2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <HAL_InitTick+0xac>)
 8000dda:	f001 f832 	bl	8001e42 <HAL_TIM_Base_Start_IT>
 8000dde:	4603      	mov	r3, r0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3730      	adds	r7, #48	; 0x30
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	200133b4 	.word	0x200133b4
 8000df8:	40001000 	.word	0x40001000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM6_DAC_IRQHandler+0x10>)
 8000e36:	f001 f828 	bl	8001e8a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200133b4 	.word	0x200133b4

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <SystemInit+0x28>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <SystemInit+0x28>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e58:	4b04      	ldr	r3, [pc, #16]	; (8000e6c <SystemInit+0x28>)
 8000e5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e76:	e003      	b.n	8000e80 <LoopCopyDataInit>

08000e78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e7e:	3104      	adds	r1, #4

08000e80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e80:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e88:	d3f6      	bcc.n	8000e78 <CopyDataInit>
  ldr  r2, =_sbss
 8000e8a:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e8c:	e002      	b.n	8000e94 <LoopFillZerobss>

08000e8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e90:	f842 3b04 	str.w	r3, [r2], #4

08000e94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e98:	d3f9      	bcc.n	8000e8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e9a:	f7ff ffd3 	bl	8000e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f004 fb89 	bl	80055b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea2:	f7ff fbb5 	bl	8000610 <main>
  bx  lr    
 8000ea6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ea8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000eac:	08006000 	.word	0x08006000
  ldr  r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000eb4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000eb8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000ebc:	200134a4 	.word	0x200134a4

08000ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec0:	e7fe      	b.n	8000ec0 <ADC_IRQHandler>
	...

08000ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a0d      	ldr	r2, [pc, #52]	; (8000f04 <HAL_Init+0x40>)
 8000ece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_Init+0x40>)
 8000eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x40>)
 8000ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f8d8 	bl	80010a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff ff28 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff fefe 	bl	8000cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023c00 	.word	0x40023c00

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	200133f4 	.word	0x200133f4

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200133f4 	.word	0x200133f4

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7a:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	60d3      	str	r3, [r2, #12]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0b      	blt.n	8000fd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	f003 021f 	and.w	r2, r3, #31
 8000fc4:	4907      	ldr	r1, [pc, #28]	; (8000fe4 <__NVIC_EnableIRQ+0x38>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	095b      	lsrs	r3, r3, #5
 8000fcc:	2001      	movs	r0, #1
 8000fce:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	db0a      	blt.n	8001012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	490c      	ldr	r1, [pc, #48]	; (8001034 <__NVIC_SetPriority+0x4c>)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	0112      	lsls	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	440b      	add	r3, r1
 800100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001010:	e00a      	b.n	8001028 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4908      	ldr	r1, [pc, #32]	; (8001038 <__NVIC_SetPriority+0x50>)
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	3b04      	subs	r3, #4
 8001020:	0112      	lsls	r2, r2, #4
 8001022:	b2d2      	uxtb	r2, r2
 8001024:	440b      	add	r3, r1
 8001026:	761a      	strb	r2, [r3, #24]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000e100 	.word	0xe000e100
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	f1c3 0307 	rsb	r3, r3, #7
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf28      	it	cs
 800105a:	2304      	movcs	r3, #4
 800105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3304      	adds	r3, #4
 8001062:	2b06      	cmp	r3, #6
 8001064:	d902      	bls.n	800106c <NVIC_EncodePriority+0x30>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b03      	subs	r3, #3
 800106a:	e000      	b.n	800106e <NVIC_EncodePriority+0x32>
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	f04f 32ff 	mov.w	r2, #4294967295
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	401a      	ands	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001084:	f04f 31ff 	mov.w	r1, #4294967295
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	43d9      	mvns	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	4313      	orrs	r3, r2
         );
}
 8001096:	4618      	mov	r0, r3
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ff4c 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ca:	f7ff ff61 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 80010ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	6978      	ldr	r0, [r7, #20]
 80010d6:	f7ff ffb1 	bl	800103c <NVIC_EncodePriority>
 80010da:	4602      	mov	r2, r0
 80010dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e0:	4611      	mov	r1, r2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff ff80 	bl	8000fe8 <__NVIC_SetPriority>
}
 80010e8:	bf00      	nop
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff54 	bl	8000fac <__NVIC_EnableIRQ>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e16b      	b.n	8001400 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	f040 815a 	bne.w	80013fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d00b      	beq.n	8001166 <HAL_GPIO_Init+0x5a>
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800115a:	2b11      	cmp	r3, #17
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b12      	cmp	r3, #18
 8001164:	d130      	bne.n	80011c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	68da      	ldr	r2, [r3, #12]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800119c:	2201      	movs	r2, #1
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	f003 0201 	and.w	r2, r3, #1
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	2203      	movs	r2, #3
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0xfc>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b12      	cmp	r3, #18
 8001206:	d123      	bne.n	8001250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	08da      	lsrs	r2, r3, #3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3208      	adds	r2, #8
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	69b9      	ldr	r1, [r7, #24]
 800124c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0203 	and.w	r2, r3, #3
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80b4 	beq.w	80013fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b5f      	ldr	r3, [pc, #380]	; (8001414 <HAL_GPIO_Init+0x308>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	4a5e      	ldr	r2, [pc, #376]	; (8001414 <HAL_GPIO_Init+0x308>)
 800129c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a0:	6453      	str	r3, [r2, #68]	; 0x44
 80012a2:	4b5c      	ldr	r3, [pc, #368]	; (8001414 <HAL_GPIO_Init+0x308>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012ae:	4a5a      	ldr	r2, [pc, #360]	; (8001418 <HAL_GPIO_Init+0x30c>)
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3302      	adds	r3, #2
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	220f      	movs	r2, #15
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a51      	ldr	r2, [pc, #324]	; (800141c <HAL_GPIO_Init+0x310>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d02b      	beq.n	8001332 <HAL_GPIO_Init+0x226>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a50      	ldr	r2, [pc, #320]	; (8001420 <HAL_GPIO_Init+0x314>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d025      	beq.n	800132e <HAL_GPIO_Init+0x222>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4f      	ldr	r2, [pc, #316]	; (8001424 <HAL_GPIO_Init+0x318>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01f      	beq.n	800132a <HAL_GPIO_Init+0x21e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4e      	ldr	r2, [pc, #312]	; (8001428 <HAL_GPIO_Init+0x31c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d019      	beq.n	8001326 <HAL_GPIO_Init+0x21a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4d      	ldr	r2, [pc, #308]	; (800142c <HAL_GPIO_Init+0x320>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0x216>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4c      	ldr	r2, [pc, #304]	; (8001430 <HAL_GPIO_Init+0x324>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d00d      	beq.n	800131e <HAL_GPIO_Init+0x212>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4b      	ldr	r2, [pc, #300]	; (8001434 <HAL_GPIO_Init+0x328>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d007      	beq.n	800131a <HAL_GPIO_Init+0x20e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4a      	ldr	r2, [pc, #296]	; (8001438 <HAL_GPIO_Init+0x32c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_GPIO_Init+0x20a>
 8001312:	2307      	movs	r3, #7
 8001314:	e00e      	b.n	8001334 <HAL_GPIO_Init+0x228>
 8001316:	2308      	movs	r3, #8
 8001318:	e00c      	b.n	8001334 <HAL_GPIO_Init+0x228>
 800131a:	2306      	movs	r3, #6
 800131c:	e00a      	b.n	8001334 <HAL_GPIO_Init+0x228>
 800131e:	2305      	movs	r3, #5
 8001320:	e008      	b.n	8001334 <HAL_GPIO_Init+0x228>
 8001322:	2304      	movs	r3, #4
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x228>
 8001326:	2303      	movs	r3, #3
 8001328:	e004      	b.n	8001334 <HAL_GPIO_Init+0x228>
 800132a:	2302      	movs	r3, #2
 800132c:	e002      	b.n	8001334 <HAL_GPIO_Init+0x228>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_GPIO_Init+0x228>
 8001332:	2300      	movs	r3, #0
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	f002 0203 	and.w	r2, r2, #3
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	4093      	lsls	r3, r2
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001344:	4934      	ldr	r1, [pc, #208]	; (8001418 <HAL_GPIO_Init+0x30c>)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001352:	4b3a      	ldr	r3, [pc, #232]	; (800143c <HAL_GPIO_Init+0x330>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001376:	4a31      	ldr	r2, [pc, #196]	; (800143c <HAL_GPIO_Init+0x330>)
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800137c:	4b2f      	ldr	r3, [pc, #188]	; (800143c <HAL_GPIO_Init+0x330>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013a0:	4a26      	ldr	r2, [pc, #152]	; (800143c <HAL_GPIO_Init+0x330>)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <HAL_GPIO_Init+0x330>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4013      	ands	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ca:	4a1c      	ldr	r2, [pc, #112]	; (800143c <HAL_GPIO_Init+0x330>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	; (800143c <HAL_GPIO_Init+0x330>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f4:	4a11      	ldr	r2, [pc, #68]	; (800143c <HAL_GPIO_Init+0x330>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3301      	adds	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	2b0f      	cmp	r3, #15
 8001404:	f67f ae90 	bls.w	8001128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001408:	bf00      	nop
 800140a:	3724      	adds	r7, #36	; 0x24
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	40023800 	.word	0x40023800
 8001418:	40013800 	.word	0x40013800
 800141c:	40020000 	.word	0x40020000
 8001420:	40020400 	.word	0x40020400
 8001424:	40020800 	.word	0x40020800
 8001428:	40020c00 	.word	0x40020c00
 800142c:	40021000 	.word	0x40021000
 8001430:	40021400 	.word	0x40021400
 8001434:	40021800 	.word	0x40021800
 8001438:	40021c00 	.word	0x40021c00
 800143c:	40013c00 	.word	0x40013c00

08001440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	887b      	ldrh	r3, [r7, #2]
 8001452:	4013      	ands	r3, r2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001458:	2301      	movs	r3, #1
 800145a:	73fb      	strb	r3, [r7, #15]
 800145c:	e001      	b.n	8001462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3714      	adds	r7, #20
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	807b      	strh	r3, [r7, #2]
 800147c:	4613      	mov	r3, r2
 800147e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800148c:	e003      	b.n	8001496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	041a      	lsls	r2, r3, #16
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	619a      	str	r2, [r3, #24]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695a      	ldr	r2, [r3, #20]
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	401a      	ands	r2, r3
 80014b6:	887b      	ldrh	r3, [r7, #2]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d104      	bne.n	80014c6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014bc:	887b      	ldrh	r3, [r7, #2]
 80014be:	041a      	lsls	r2, r3, #16
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80014c4:	e002      	b.n	80014cc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e25b      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d075      	beq.n	80015e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014f6:	4ba3      	ldr	r3, [pc, #652]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b04      	cmp	r3, #4
 8001500:	d00c      	beq.n	800151c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001502:	4ba0      	ldr	r3, [pc, #640]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800150a:	2b08      	cmp	r3, #8
 800150c:	d112      	bne.n	8001534 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800150e:	4b9d      	ldr	r3, [pc, #628]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800151a:	d10b      	bne.n	8001534 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	4b99      	ldr	r3, [pc, #612]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d05b      	beq.n	80015e0 <HAL_RCC_OscConfig+0x108>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d157      	bne.n	80015e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e236      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800153c:	d106      	bne.n	800154c <HAL_RCC_OscConfig+0x74>
 800153e:	4b91      	ldr	r3, [pc, #580]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a90      	ldr	r2, [pc, #576]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e01d      	b.n	8001588 <HAL_RCC_OscConfig+0xb0>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x98>
 8001556:	4b8b      	ldr	r3, [pc, #556]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a8a      	ldr	r2, [pc, #552]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b88      	ldr	r3, [pc, #544]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a87      	ldr	r2, [pc, #540]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e00b      	b.n	8001588 <HAL_RCC_OscConfig+0xb0>
 8001570:	4b84      	ldr	r3, [pc, #528]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a83      	ldr	r2, [pc, #524]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b81      	ldr	r3, [pc, #516]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a80      	ldr	r2, [pc, #512]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fcce 	bl	8000f30 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fcca 	bl	8000f30 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1fb      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	4b76      	ldr	r3, [pc, #472]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0xc0>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fcba 	bl	8000f30 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fcb6 	bl	8000f30 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e1e7      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	4b6c      	ldr	r3, [pc, #432]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0xe8>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d063      	beq.n	80016b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ee:	4b65      	ldr	r3, [pc, #404]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00b      	beq.n	8001612 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fa:	4b62      	ldr	r3, [pc, #392]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001602:	2b08      	cmp	r3, #8
 8001604:	d11c      	bne.n	8001640 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001606:	4b5f      	ldr	r3, [pc, #380]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d116      	bne.n	8001640 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001612:	4b5c      	ldr	r3, [pc, #368]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x152>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d001      	beq.n	800162a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e1bb      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162a:	4b56      	ldr	r3, [pc, #344]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4952      	ldr	r1, [pc, #328]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800163a:	4313      	orrs	r3, r2
 800163c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163e:	e03a      	b.n	80016b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d020      	beq.n	800168a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001648:	4b4f      	ldr	r3, [pc, #316]	; (8001788 <HAL_RCC_OscConfig+0x2b0>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164e:	f7ff fc6f 	bl	8000f30 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001656:	f7ff fc6b 	bl	8000f30 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e19c      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	4b46      	ldr	r3, [pc, #280]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001674:	4b43      	ldr	r3, [pc, #268]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4940      	ldr	r1, [pc, #256]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	4313      	orrs	r3, r2
 8001686:	600b      	str	r3, [r1, #0]
 8001688:	e015      	b.n	80016b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168a:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <HAL_RCC_OscConfig+0x2b0>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001690:	f7ff fc4e 	bl	8000f30 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001698:	f7ff fc4a 	bl	8000f30 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e17b      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	4b36      	ldr	r3, [pc, #216]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d030      	beq.n	8001724 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	695b      	ldr	r3, [r3, #20]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d016      	beq.n	80016f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ca:	4b30      	ldr	r3, [pc, #192]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff fc2e 	bl	8000f30 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d8:	f7ff fc2a 	bl	8000f30 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e15b      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x200>
 80016f6:	e015      	b.n	8001724 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_RCC_OscConfig+0x2b4>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fc17 	bl	8000f30 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff fc13 	bl	8000f30 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e144      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800171a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1f0      	bne.n	8001706 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 80a0 	beq.w	8001872 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001732:	2300      	movs	r3, #0
 8001734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001736:	4b13      	ldr	r3, [pc, #76]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10f      	bne.n	8001762 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_RCC_OscConfig+0x2ac>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175e:	2301      	movs	r3, #1
 8001760:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_RCC_OscConfig+0x2b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d121      	bne.n	80017b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_RCC_OscConfig+0x2b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_RCC_OscConfig+0x2b8>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177a:	f7ff fbd9 	bl	8000f30 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	e011      	b.n	80017a6 <HAL_RCC_OscConfig+0x2ce>
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	42470000 	.word	0x42470000
 800178c:	42470e80 	.word	0x42470e80
 8001790:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001794:	f7ff fbcc 	bl	8000f30 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0fd      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a6:	4b81      	ldr	r3, [pc, #516]	; (80019ac <HAL_RCC_OscConfig+0x4d4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d106      	bne.n	80017c8 <HAL_RCC_OscConfig+0x2f0>
 80017ba:	4b7d      	ldr	r3, [pc, #500]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	4a7c      	ldr	r2, [pc, #496]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6713      	str	r3, [r2, #112]	; 0x70
 80017c6:	e01c      	b.n	8001802 <HAL_RCC_OscConfig+0x32a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_OscConfig+0x312>
 80017d0:	4b77      	ldr	r3, [pc, #476]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 80017d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d4:	4a76      	ldr	r2, [pc, #472]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	6713      	str	r3, [r2, #112]	; 0x70
 80017dc:	4b74      	ldr	r3, [pc, #464]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e0:	4a73      	ldr	r2, [pc, #460]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6713      	str	r3, [r2, #112]	; 0x70
 80017e8:	e00b      	b.n	8001802 <HAL_RCC_OscConfig+0x32a>
 80017ea:	4b71      	ldr	r3, [pc, #452]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 80017ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ee:	4a70      	ldr	r2, [pc, #448]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 80017f0:	f023 0301 	bic.w	r3, r3, #1
 80017f4:	6713      	str	r3, [r2, #112]	; 0x70
 80017f6:	4b6e      	ldr	r3, [pc, #440]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fa:	4a6d      	ldr	r2, [pc, #436]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 80017fc:	f023 0304 	bic.w	r3, r3, #4
 8001800:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d015      	beq.n	8001836 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180a:	f7ff fb91 	bl	8000f30 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001810:	e00a      	b.n	8001828 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff fb8d 	bl	8000f30 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001820:	4293      	cmp	r3, r2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e0bc      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	4b61      	ldr	r3, [pc, #388]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 800182a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0ee      	beq.n	8001812 <HAL_RCC_OscConfig+0x33a>
 8001834:	e014      	b.n	8001860 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7ff fb7b 	bl	8000f30 <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183c:	e00a      	b.n	8001854 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff fb77 	bl	8000f30 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	f241 3288 	movw	r2, #5000	; 0x1388
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e0a6      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001854:	4b56      	ldr	r3, [pc, #344]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 8001856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1ee      	bne.n	800183e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d105      	bne.n	8001872 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001866:	4b52      	ldr	r3, [pc, #328]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	4a51      	ldr	r2, [pc, #324]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 800186c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 8092 	beq.w	80019a0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800187c:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 030c 	and.w	r3, r3, #12
 8001884:	2b08      	cmp	r3, #8
 8001886:	d05c      	beq.n	8001942 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d141      	bne.n	8001914 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001890:	4b48      	ldr	r3, [pc, #288]	; (80019b4 <HAL_RCC_OscConfig+0x4dc>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001896:	f7ff fb4b 	bl	8000f30 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189e:	f7ff fb47 	bl	8000f30 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e078      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b0:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f0      	bne.n	800189e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69da      	ldr	r2, [r3, #28]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	019b      	lsls	r3, r3, #6
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	3b01      	subs	r3, #1
 80018d6:	041b      	lsls	r3, r3, #16
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	061b      	lsls	r3, r3, #24
 80018e0:	4933      	ldr	r1, [pc, #204]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018e6:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <HAL_RCC_OscConfig+0x4dc>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fb20 	bl	8000f30 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fb1c 	bl	8000f30 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e04d      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x41c>
 8001912:	e045      	b.n	80019a0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <HAL_RCC_OscConfig+0x4dc>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff fb09 	bl	8000f30 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff fb05 	bl	8000f30 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e036      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001934:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x44a>
 8001940:	e02e      	b.n	80019a0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d101      	bne.n	800194e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e029      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_RCC_OscConfig+0x4d8>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	429a      	cmp	r2, r3
 8001960:	d11c      	bne.n	800199c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196c:	429a      	cmp	r2, r3
 800196e:	d115      	bne.n	800199c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001976:	4013      	ands	r3, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800197c:	4293      	cmp	r3, r2
 800197e:	d10d      	bne.n	800199c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d106      	bne.n	800199c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d001      	beq.n	80019a0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40007000 	.word	0x40007000
 80019b0:	40023800 	.word	0x40023800
 80019b4:	42470060 	.word	0x42470060

080019b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0cc      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d90c      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b65      	ldr	r3, [pc, #404]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a58      	ldr	r2, [pc, #352]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d044      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d119      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e067      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a96:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 0203 	bic.w	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4934      	ldr	r1, [pc, #208]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa8:	f7ff fa42 	bl	8000f30 <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f7ff fa3e 	bl	8000f30 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e04f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 020c 	and.w	r2, r3, #12
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1eb      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d20c      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4601      	mov	r1, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	5cd3      	ldrb	r3, [r2, r3]
 8001b52:	fa21 f303 	lsr.w	r3, r1, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f8f2 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08005f98 	.word	0x08005f98
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000004 	.word	0x20000004

08001b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b9a:	4b63      	ldr	r3, [pc, #396]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d007      	beq.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x32>
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d008      	beq.n	8001bbc <HAL_RCC_GetSysClockFreq+0x38>
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f040 80b4 	bne.w	8001d18 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb0:	4b5e      	ldr	r3, [pc, #376]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001bb2:	60bb      	str	r3, [r7, #8]
       break;
 8001bb4:	e0b3      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bb6:	4b5e      	ldr	r3, [pc, #376]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001bb8:	60bb      	str	r3, [r7, #8]
      break;
 8001bba:	e0b0      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bbc:	4b5a      	ldr	r3, [pc, #360]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bc6:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d04a      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd2:	4b55      	ldr	r3, [pc, #340]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	099b      	lsrs	r3, r3, #6
 8001bd8:	f04f 0400 	mov.w	r4, #0
 8001bdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	ea03 0501 	and.w	r5, r3, r1
 8001be8:	ea04 0602 	and.w	r6, r4, r2
 8001bec:	4629      	mov	r1, r5
 8001bee:	4632      	mov	r2, r6
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	f04f 0400 	mov.w	r4, #0
 8001bf8:	0154      	lsls	r4, r2, #5
 8001bfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bfe:	014b      	lsls	r3, r1, #5
 8001c00:	4619      	mov	r1, r3
 8001c02:	4622      	mov	r2, r4
 8001c04:	1b49      	subs	r1, r1, r5
 8001c06:	eb62 0206 	sbc.w	r2, r2, r6
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	f04f 0400 	mov.w	r4, #0
 8001c12:	0194      	lsls	r4, r2, #6
 8001c14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c18:	018b      	lsls	r3, r1, #6
 8001c1a:	1a5b      	subs	r3, r3, r1
 8001c1c:	eb64 0402 	sbc.w	r4, r4, r2
 8001c20:	f04f 0100 	mov.w	r1, #0
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	00e2      	lsls	r2, r4, #3
 8001c2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c2e:	00d9      	lsls	r1, r3, #3
 8001c30:	460b      	mov	r3, r1
 8001c32:	4614      	mov	r4, r2
 8001c34:	195b      	adds	r3, r3, r5
 8001c36:	eb44 0406 	adc.w	r4, r4, r6
 8001c3a:	f04f 0100 	mov.w	r1, #0
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	0262      	lsls	r2, r4, #9
 8001c44:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c48:	0259      	lsls	r1, r3, #9
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4614      	mov	r4, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	4621      	mov	r1, r4
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f04f 0400 	mov.w	r4, #0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	f7fe fb58 	bl	8000310 <__aeabi_uldivmod>
 8001c60:	4603      	mov	r3, r0
 8001c62:	460c      	mov	r4, r1
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	e049      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c68:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	f04f 0400 	mov.w	r4, #0
 8001c72:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	ea03 0501 	and.w	r5, r3, r1
 8001c7e:	ea04 0602 	and.w	r6, r4, r2
 8001c82:	4629      	mov	r1, r5
 8001c84:	4632      	mov	r2, r6
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	f04f 0400 	mov.w	r4, #0
 8001c8e:	0154      	lsls	r4, r2, #5
 8001c90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c94:	014b      	lsls	r3, r1, #5
 8001c96:	4619      	mov	r1, r3
 8001c98:	4622      	mov	r2, r4
 8001c9a:	1b49      	subs	r1, r1, r5
 8001c9c:	eb62 0206 	sbc.w	r2, r2, r6
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	f04f 0400 	mov.w	r4, #0
 8001ca8:	0194      	lsls	r4, r2, #6
 8001caa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cae:	018b      	lsls	r3, r1, #6
 8001cb0:	1a5b      	subs	r3, r3, r1
 8001cb2:	eb64 0402 	sbc.w	r4, r4, r2
 8001cb6:	f04f 0100 	mov.w	r1, #0
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	00e2      	lsls	r2, r4, #3
 8001cc0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cc4:	00d9      	lsls	r1, r3, #3
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4614      	mov	r4, r2
 8001cca:	195b      	adds	r3, r3, r5
 8001ccc:	eb44 0406 	adc.w	r4, r4, r6
 8001cd0:	f04f 0100 	mov.w	r1, #0
 8001cd4:	f04f 0200 	mov.w	r2, #0
 8001cd8:	02a2      	lsls	r2, r4, #10
 8001cda:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001cde:	0299      	lsls	r1, r3, #10
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4614      	mov	r4, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f04f 0400 	mov.w	r4, #0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4623      	mov	r3, r4
 8001cf2:	f7fe fb0d 	bl	8000310 <__aeabi_uldivmod>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	460c      	mov	r4, r1
 8001cfa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cfc:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	3301      	adds	r3, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	60bb      	str	r3, [r7, #8]
      break;
 8001d16:	e002      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d1a:	60bb      	str	r3, [r7, #8]
      break;
 8001d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	00f42400 	.word	0x00f42400
 8001d30:	007a1200 	.word	0x007a1200

08001d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d38:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000000 	.word	0x20000000

08001d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d50:	f7ff fff0 	bl	8001d34 <HAL_RCC_GetHCLKFreq>
 8001d54:	4601      	mov	r1, r0
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	0a9b      	lsrs	r3, r3, #10
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	4a03      	ldr	r2, [pc, #12]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d62:	5cd3      	ldrb	r3, [r2, r3]
 8001d64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	08005fa8 	.word	0x08005fa8

08001d74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	220f      	movs	r2, #15
 8001d82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_GetClockConfig+0x5c>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	08db      	lsrs	r3, r3, #3
 8001dae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <HAL_RCC_GetClockConfig+0x60>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 020f 	and.w	r2, r3, #15
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	601a      	str	r2, [r3, #0]
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40023c00 	.word	0x40023c00

08001dd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e01d      	b.n	8001e26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d106      	bne.n	8001e04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f815 	bl	8001e2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3304      	adds	r3, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f000 f968 	bl	80020ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b085      	sub	sp, #20
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f042 0201 	orr.w	r2, r2, #1
 8001e58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b06      	cmp	r3, #6
 8001e6a:	d007      	beq.n	8001e7c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d122      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d11b      	bne.n	8001ee6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f06f 0202 	mvn.w	r2, #2
 8001eb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f8ee 	bl	80020ae <HAL_TIM_IC_CaptureCallback>
 8001ed2:	e005      	b.n	8001ee0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f8e0 	bl	800209a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f8f1 	bl	80020c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b04      	cmp	r3, #4
 8001ef2:	d122      	bne.n	8001f3a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	f003 0304 	and.w	r3, r3, #4
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d11b      	bne.n	8001f3a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f06f 0204 	mvn.w	r2, #4
 8001f0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f8c4 	bl	80020ae <HAL_TIM_IC_CaptureCallback>
 8001f26:	e005      	b.n	8001f34 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f8b6 	bl	800209a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8c7 	bl	80020c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f003 0308 	and.w	r3, r3, #8
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d122      	bne.n	8001f8e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d11b      	bne.n	8001f8e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f06f 0208 	mvn.w	r2, #8
 8001f5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2204      	movs	r2, #4
 8001f64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f89a 	bl	80020ae <HAL_TIM_IC_CaptureCallback>
 8001f7a:	e005      	b.n	8001f88 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f88c 	bl	800209a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f89d 	bl	80020c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b10      	cmp	r3, #16
 8001f9a:	d122      	bne.n	8001fe2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d11b      	bne.n	8001fe2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f06f 0210 	mvn.w	r2, #16
 8001fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f870 	bl	80020ae <HAL_TIM_IC_CaptureCallback>
 8001fce:	e005      	b.n	8001fdc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f862 	bl	800209a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f873 	bl	80020c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d10e      	bne.n	800200e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f06f 0201 	mvn.w	r2, #1
 8002006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7fe fe5b 	bl	8000cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002018:	2b80      	cmp	r3, #128	; 0x80
 800201a:	d10e      	bne.n	800203a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002026:	2b80      	cmp	r3, #128	; 0x80
 8002028:	d107      	bne.n	800203a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f903 	bl	8002240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002044:	2b40      	cmp	r3, #64	; 0x40
 8002046:	d10e      	bne.n	8002066 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002052:	2b40      	cmp	r3, #64	; 0x40
 8002054:	d107      	bne.n	8002066 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800205e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f838 	bl	80020d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	f003 0320 	and.w	r3, r3, #32
 8002070:	2b20      	cmp	r3, #32
 8002072:	d10e      	bne.n	8002092 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f003 0320 	and.w	r3, r3, #32
 800207e:	2b20      	cmp	r3, #32
 8002080:	d107      	bne.n	8002092 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f06f 0220 	mvn.w	r2, #32
 800208a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f8cd 	bl	800222c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr

080020ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a40      	ldr	r2, [pc, #256]	; (8002200 <TIM_Base_SetConfig+0x114>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d013      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210a:	d00f      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3d      	ldr	r2, [pc, #244]	; (8002204 <TIM_Base_SetConfig+0x118>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d00b      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a3c      	ldr	r2, [pc, #240]	; (8002208 <TIM_Base_SetConfig+0x11c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d007      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a3b      	ldr	r2, [pc, #236]	; (800220c <TIM_Base_SetConfig+0x120>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d003      	beq.n	800212c <TIM_Base_SetConfig+0x40>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a3a      	ldr	r2, [pc, #232]	; (8002210 <TIM_Base_SetConfig+0x124>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d108      	bne.n	800213e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <TIM_Base_SetConfig+0x114>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02b      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214c:	d027      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a2c      	ldr	r2, [pc, #176]	; (8002204 <TIM_Base_SetConfig+0x118>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d023      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <TIM_Base_SetConfig+0x11c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d01f      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a2a      	ldr	r2, [pc, #168]	; (800220c <TIM_Base_SetConfig+0x120>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01b      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a29      	ldr	r2, [pc, #164]	; (8002210 <TIM_Base_SetConfig+0x124>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d017      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a28      	ldr	r2, [pc, #160]	; (8002214 <TIM_Base_SetConfig+0x128>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a27      	ldr	r2, [pc, #156]	; (8002218 <TIM_Base_SetConfig+0x12c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00f      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a26      	ldr	r2, [pc, #152]	; (800221c <TIM_Base_SetConfig+0x130>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00b      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a25      	ldr	r2, [pc, #148]	; (8002220 <TIM_Base_SetConfig+0x134>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a24      	ldr	r2, [pc, #144]	; (8002224 <TIM_Base_SetConfig+0x138>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d003      	beq.n	800219e <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a23      	ldr	r2, [pc, #140]	; (8002228 <TIM_Base_SetConfig+0x13c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d108      	bne.n	80021b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a0a      	ldr	r2, [pc, #40]	; (8002200 <TIM_Base_SetConfig+0x114>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d003      	beq.n	80021e4 <TIM_Base_SetConfig+0xf8>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a0c      	ldr	r2, [pc, #48]	; (8002210 <TIM_Base_SetConfig+0x124>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d103      	bne.n	80021ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	615a      	str	r2, [r3, #20]
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40000400 	.word	0x40000400
 8002208:	40000800 	.word	0x40000800
 800220c:	40000c00 	.word	0x40000c00
 8002210:	40010400 	.word	0x40010400
 8002214:	40014000 	.word	0x40014000
 8002218:	40014400 	.word	0x40014400
 800221c:	40014800 	.word	0x40014800
 8002220:	40001800 	.word	0x40001800
 8002224:	40001c00 	.word	0x40001c00
 8002228:	40002000 	.word	0x40002000

0800222c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f103 0208 	add.w	r2, r3, #8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f04f 32ff 	mov.w	r2, #4294967295
 800226c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f103 0208 	add.w	r2, r3, #8
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f103 0208 	add.w	r2, r3, #8
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	601a      	str	r2, [r3, #0]
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d103      	bne.n	8002316 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	e00c      	b.n	8002330 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3308      	adds	r3, #8
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e002      	b.n	8002324 <vListInsert+0x2e>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	429a      	cmp	r2, r3
 800232e:	d2f6      	bcs.n	800231e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	601a      	str	r2, [r3, #0]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6892      	ldr	r2, [r2, #8]
 800237e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6852      	ldr	r2, [r2, #4]
 8002388:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	d103      	bne.n	800239c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	1e5a      	subs	r2, r3, #1
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08c      	sub	sp, #48	; 0x30
 80023c0:	af04      	add	r7, sp, #16
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80023cc:	88fb      	ldrh	r3, [r7, #6]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f001 faf9 	bl	80039c8 <pvPortMalloc>
 80023d6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00e      	beq.n	80023fc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80023de:	2058      	movs	r0, #88	; 0x58
 80023e0:	f001 faf2 	bl	80039c8 <pvPortMalloc>
 80023e4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	631a      	str	r2, [r3, #48]	; 0x30
 80023f2:	e005      	b.n	8002400 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80023f4:	6978      	ldr	r0, [r7, #20]
 80023f6:	f001 fbc3 	bl	8003b80 <vPortFree>
 80023fa:	e001      	b.n	8002400 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d013      	beq.n	800242e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002406:	88fa      	ldrh	r2, [r7, #6]
 8002408:	2300      	movs	r3, #0
 800240a:	9303      	str	r3, [sp, #12]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	9302      	str	r3, [sp, #8]
 8002410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f80e 	bl	800243e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002422:	69f8      	ldr	r0, [r7, #28]
 8002424:	f000 f8a0 	bl	8002568 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002428:	2301      	movs	r3, #1
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	e002      	b.n	8002434 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002434:	69bb      	ldr	r3, [r7, #24]
    }
 8002436:	4618      	mov	r0, r3
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b088      	sub	sp, #32
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800244c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	461a      	mov	r2, r3
 8002456:	21a5      	movs	r1, #165	; 0xa5
 8002458:	f003 f8ea 	bl	8005630 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800245c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002466:	3b01      	subs	r3, #1
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	f023 0307 	bic.w	r3, r3, #7
 8002474:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <prvInitialiseNewTask+0x56>
 8002480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	e7fe      	b.n	8002492 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01f      	beq.n	80024da <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	e012      	b.n	80024c6 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	4413      	add	r3, r2
 80024a6:	7819      	ldrb	r1, [r3, #0]
 80024a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	3334      	adds	r3, #52	; 0x34
 80024b0:	460a      	mov	r2, r1
 80024b2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	4413      	add	r3, r2
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d006      	beq.n	80024ce <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	3301      	adds	r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	2b09      	cmp	r3, #9
 80024ca:	d9e9      	bls.n	80024a0 <prvInitialiseNewTask+0x62>
 80024cc:	e000      	b.n	80024d0 <prvInitialiseNewTask+0x92>
            {
                break;
 80024ce:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80024d8:	e003      	b.n	80024e2 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80024da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d901      	bls.n	80024ec <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024e8:	2304      	movs	r3, #4
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f0:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80024f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024f6:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	2200      	movs	r2, #0
 80024fc:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	3304      	adds	r3, #4
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fec6 	bl	8002294 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	3318      	adds	r3, #24
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fec1 	bl	8002294 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002516:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	f1c3 0205 	rsb	r2, r3, #5
 800251e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002520:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002526:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252a:	3350      	adds	r3, #80	; 0x50
 800252c:	2204      	movs	r2, #4
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f003 f87d 	bl	8005630 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002538:	3354      	adds	r3, #84	; 0x54
 800253a:	2201      	movs	r2, #1
 800253c:	2100      	movs	r1, #0
 800253e:	4618      	mov	r0, r3
 8002540:	f003 f876 	bl	8005630 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	68f9      	ldr	r1, [r7, #12]
 8002548:	69b8      	ldr	r0, [r7, #24]
 800254a:	f000 ffbb 	bl	80034c4 <pxPortInitialiseStack>
 800254e:	4602      	mov	r2, r0
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800255e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002560:	bf00      	nop
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af02      	add	r7, sp, #8
 800256e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002570:	f001 f948 	bl	8003804 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002574:	4b3b      	ldr	r3, [pc, #236]	; (8002664 <prvAddNewTaskToReadyList+0xfc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	4a3a      	ldr	r2, [pc, #232]	; (8002664 <prvAddNewTaskToReadyList+0xfc>)
 800257c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800257e:	4b3a      	ldr	r3, [pc, #232]	; (8002668 <prvAddNewTaskToReadyList+0x100>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002586:	4a38      	ldr	r2, [pc, #224]	; (8002668 <prvAddNewTaskToReadyList+0x100>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800258c:	4b35      	ldr	r3, [pc, #212]	; (8002664 <prvAddNewTaskToReadyList+0xfc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d110      	bne.n	80025b6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002594:	f000 fd00 	bl	8002f98 <prvInitialiseTaskLists>
 8002598:	e00d      	b.n	80025b6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800259a:	4b34      	ldr	r3, [pc, #208]	; (800266c <prvAddNewTaskToReadyList+0x104>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025a2:	4b31      	ldr	r3, [pc, #196]	; (8002668 <prvAddNewTaskToReadyList+0x100>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d802      	bhi.n	80025b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80025b0:	4a2d      	ldr	r2, [pc, #180]	; (8002668 <prvAddNewTaskToReadyList+0x100>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80025b6:	4b2e      	ldr	r3, [pc, #184]	; (8002670 <prvAddNewTaskToReadyList+0x108>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <prvAddNewTaskToReadyList+0x108>)
 80025be:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025c0:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <prvAddNewTaskToReadyList+0x108>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d016      	beq.n	80025fc <prvAddNewTaskToReadyList+0x94>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f002 fd81 	bl	80050d8 <SEGGER_SYSVIEW_OnTaskCreate>
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	461d      	mov	r5, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	461c      	mov	r4, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	1ae3      	subs	r3, r4, r3
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	462b      	mov	r3, r5
 80025f8:	f001 fbde 	bl	8003db8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 fdee 	bl	80051e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	2201      	movs	r2, #1
 800260a:	409a      	lsls	r2, r3
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <prvAddNewTaskToReadyList+0x10c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4313      	orrs	r3, r2
 8002612:	4a18      	ldr	r2, [pc, #96]	; (8002674 <prvAddNewTaskToReadyList+0x10c>)
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4a15      	ldr	r2, [pc, #84]	; (8002678 <prvAddNewTaskToReadyList+0x110>)
 8002624:	441a      	add	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f7ff fe3e 	bl	80022ae <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002632:	f001 f915 	bl	8003860 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <prvAddNewTaskToReadyList+0x104>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00e      	beq.n	800265c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800263e:	4b0a      	ldr	r3, [pc, #40]	; (8002668 <prvAddNewTaskToReadyList+0x100>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	429a      	cmp	r2, r3
 800264a:	d207      	bcs.n	800265c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <prvAddNewTaskToReadyList+0x114>)
 800264e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bdb0      	pop	{r4, r5, r7, pc}
 8002664:	20000170 	.word	0x20000170
 8002668:	20000098 	.word	0x20000098
 800266c:	2000017c 	.word	0x2000017c
 8002670:	2000018c 	.word	0x2000018c
 8002674:	20000178 	.word	0x20000178
 8002678:	2000009c 	.word	0x2000009c
 800267c:	e000ed04 	.word	0xe000ed04

08002680 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002688:	f001 f8bc 	bl	8003804 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <vTaskDelete+0x18>
 8002692:	4b45      	ldr	r3, [pc, #276]	; (80027a8 <vTaskDelete+0x128>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	e000      	b.n	800269a <vTaskDelete+0x1a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3304      	adds	r3, #4
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fe61 	bl	8002368 <uxListRemove>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d115      	bne.n	80026d8 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b0:	493e      	ldr	r1, [pc, #248]	; (80027ac <vTaskDelete+0x12c>)
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10a      	bne.n	80026d8 <vTaskDelete+0x58>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	2201      	movs	r2, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43da      	mvns	r2, r3
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <vTaskDelete+0x130>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4013      	ands	r3, r2
 80026d4:	4a36      	ldr	r2, [pc, #216]	; (80027b0 <vTaskDelete+0x130>)
 80026d6:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d004      	beq.n	80026ea <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	3318      	adds	r3, #24
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fe3f 	bl	8002368 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80026ea:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <vTaskDelete+0x134>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	4a30      	ldr	r2, [pc, #192]	; (80027b4 <vTaskDelete+0x134>)
 80026f2:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <vTaskDelete+0x128>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d118      	bne.n	8002730 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3304      	adds	r3, #4
 8002702:	4619      	mov	r1, r3
 8002704:	482c      	ldr	r0, [pc, #176]	; (80027b8 <vTaskDelete+0x138>)
 8002706:	f7ff fdd2 	bl	80022ae <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800270a:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <vTaskDelete+0x13c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	4a2a      	ldr	r2, [pc, #168]	; (80027bc <vTaskDelete+0x13c>)
 8002712:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	4618      	mov	r0, r3
 8002718:	f002 fe04 	bl	8005324 <SEGGER_SYSVIEW_ShrinkId>
 800271c:	4603      	mov	r3, r0
 800271e:	4619      	mov	r1, r3
 8002720:	2022      	movs	r0, #34	; 0x22
 8002722:	f002 f877 	bl	8004814 <SEGGER_SYSVIEW_RecordU32>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4618      	mov	r0, r3
 800272a:	f001 fc1d 	bl	8003f68 <SYSVIEW_DeleteTask>
 800272e:	e016      	b.n	800275e <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <vTaskDelete+0x140>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3b01      	subs	r3, #1
 8002736:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <vTaskDelete+0x140>)
 8002738:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4618      	mov	r0, r3
 800273e:	f002 fdf1 	bl	8005324 <SEGGER_SYSVIEW_ShrinkId>
 8002742:	4603      	mov	r3, r0
 8002744:	4619      	mov	r1, r3
 8002746:	2022      	movs	r0, #34	; 0x22
 8002748:	f002 f864 	bl	8004814 <SEGGER_SYSVIEW_RecordU32>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4618      	mov	r0, r3
 8002750:	f001 fc0a 	bl	8003f68 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 fc8b 	bl	8003070 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800275a:	f000 fc99 	bl	8003090 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800275e:	f001 f87f 	bl	8003860 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <vTaskDelete+0x144>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01a      	beq.n	80027a0 <vTaskDelete+0x120>
        {
            if( pxTCB == pxCurrentTCB )
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <vTaskDelete+0x128>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	429a      	cmp	r2, r3
 8002772:	d115      	bne.n	80027a0 <vTaskDelete+0x120>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <vTaskDelete+0x148>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d009      	beq.n	8002790 <vTaskDelete+0x110>
 800277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002780:	f383 8811 	msr	BASEPRI, r3
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	e7fe      	b.n	800278e <vTaskDelete+0x10e>
                portYIELD_WITHIN_API();
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <vTaskDelete+0x14c>)
 8002792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20000098 	.word	0x20000098
 80027ac:	2000009c 	.word	0x2000009c
 80027b0:	20000178 	.word	0x20000178
 80027b4:	2000018c 	.word	0x2000018c
 80027b8:	20000144 	.word	0x20000144
 80027bc:	20000158 	.word	0x20000158
 80027c0:	20000170 	.word	0x20000170
 80027c4:	2000017c 	.word	0x2000017c
 80027c8:	20000198 	.word	0x20000198
 80027cc:	e000ed04 	.word	0xe000ed04

080027d0 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d109      	bne.n	80027f8 <xTaskDelayUntil+0x28>
 80027e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e8:	f383 8811 	msr	BASEPRI, r3
 80027ec:	f3bf 8f6f 	isb	sy
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	e7fe      	b.n	80027f6 <xTaskDelayUntil+0x26>
        configASSERT( ( xTimeIncrement > 0U ) );
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <xTaskDelayUntil+0x42>
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	e7fe      	b.n	8002810 <xTaskDelayUntil+0x40>
        configASSERT( uxSchedulerSuspended == 0 );
 8002812:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <xTaskDelayUntil+0xf0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <xTaskDelayUntil+0x5e>
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	f383 8811 	msr	BASEPRI, r3
 8002822:	f3bf 8f6f 	isb	sy
 8002826:	f3bf 8f4f 	dsb	sy
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	e7fe      	b.n	800282c <xTaskDelayUntil+0x5c>

        vTaskSuspendAll();
 800282e:	f000 f9b9 	bl	8002ba4 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <xTaskDelayUntil+0xf4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	4413      	add	r3, r2
 8002840:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6a3a      	ldr	r2, [r7, #32]
 8002848:	429a      	cmp	r2, r3
 800284a:	d20b      	bcs.n	8002864 <xTaskDelayUntil+0x94>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	429a      	cmp	r2, r3
 8002854:	d211      	bcs.n	800287a <xTaskDelayUntil+0xaa>
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	429a      	cmp	r2, r3
 800285c:	d90d      	bls.n	800287a <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 800285e:	2301      	movs	r3, #1
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
 8002862:	e00a      	b.n	800287a <xTaskDelayUntil+0xaa>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	429a      	cmp	r2, r3
 800286c:	d303      	bcc.n	8002876 <xTaskDelayUntil+0xa6>
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	429a      	cmp	r2, r3
 8002874:	d901      	bls.n	800287a <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 8002876:	2301      	movs	r3, #1
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002886:	2024      	movs	r0, #36	; 0x24
 8002888:	f001 ffa6 	bl	80047d8 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800288c:	69fa      	ldr	r2, [r7, #28]
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f000 fd9d 	bl	80033d4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800289a:	f000 f991 	bl	8002bc0 <xTaskResumeAll>
 800289e:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <xTaskDelayUntil+0xf8>)
 80028a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	f3bf 8f4f 	dsb	sy
 80028b2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80028b8:	4618      	mov	r0, r3
 80028ba:	3728      	adds	r7, #40	; 0x28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20000198 	.word	0x20000198
 80028c4:	20000174 	.word	0x20000174
 80028c8:	e000ed04 	.word	0xe000ed04

080028cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01a      	beq.n	8002914 <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <vTaskDelay+0x68>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d009      	beq.n	80028fa <vTaskDelay+0x2e>
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	e7fe      	b.n	80028f8 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 80028fa:	f000 f953 	bl	8002ba4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	2023      	movs	r0, #35	; 0x23
 8002902:	f001 ff87 	bl	8004814 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002906:	2100      	movs	r1, #0
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fd63 	bl	80033d4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800290e:	f000 f957 	bl	8002bc0 <xTaskResumeAll>
 8002912:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d107      	bne.n	800292a <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 800291a:	4b07      	ldr	r3, [pc, #28]	; (8002938 <vTaskDelay+0x6c>)
 800291c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800292a:	bf00      	nop
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000198 	.word	0x20000198
 8002938:	e000ed04 	.word	0xe000ed04

0800293c <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002944:	f000 ff5e 	bl	8003804 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d102      	bne.n	8002954 <uxTaskPriorityGet+0x18>
 800294e:	4b07      	ldr	r3, [pc, #28]	; (800296c <uxTaskPriorityGet+0x30>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	e000      	b.n	8002956 <uxTaskPriorityGet+0x1a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800295e:	f000 ff7f 	bl	8003860 <vPortExitCritical>

        return uxReturn;
 8002962:	68bb      	ldr	r3, [r7, #8]
    }
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000098 	.word	0x20000098

08002970 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af02      	add	r7, sp, #8
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d909      	bls.n	8002998 <vTaskPrioritySet+0x28>
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	e7fe      	b.n	8002996 <vTaskPrioritySet+0x26>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b04      	cmp	r3, #4
 800299c:	d901      	bls.n	80029a2 <vTaskPrioritySet+0x32>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800299e:	2304      	movs	r3, #4
 80029a0:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80029a2:	f000 ff2f 	bl	8003804 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <vTaskPrioritySet+0x42>
 80029ac:	4b4c      	ldr	r3, [pc, #304]	; (8002ae0 <vTaskPrioritySet+0x170>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	e000      	b.n	80029b4 <vTaskPrioritySet+0x44>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f002 fcb3 	bl	8005324 <SEGGER_SYSVIEW_ShrinkId>
 80029be:	4603      	mov	r3, r0
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	4619      	mov	r1, r3
 80029c4:	2028      	movs	r0, #40	; 0x28
 80029c6:	f001 ff61 	bl	800488c <SEGGER_SYSVIEW_RecordU32x2>
 80029ca:	69b8      	ldr	r0, [r7, #24]
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	461a      	mov	r2, r3
 80029d8:	2300      	movs	r3, #0
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	4613      	mov	r3, r2
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	f001 fa52 	bl	8003e88 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e8:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d06f      	beq.n	8002ad2 <vTaskPrioritySet+0x162>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d90d      	bls.n	8002a16 <vTaskPrioritySet+0xa6>
                {
                    if( pxTCB != pxCurrentTCB )
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <vTaskPrioritySet+0x170>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d00f      	beq.n	8002a24 <vTaskPrioritySet+0xb4>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002a04:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <vTaskPrioritySet+0x170>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d309      	bcc.n	8002a24 <vTaskPrioritySet+0xb4>
                        {
                            xYieldRequired = pdTRUE;
 8002a10:	2301      	movs	r3, #1
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	e006      	b.n	8002a24 <vTaskPrioritySet+0xb4>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002a16:	4b32      	ldr	r3, [pc, #200]	; (8002ae0 <vTaskPrioritySet+0x170>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d101      	bne.n	8002a24 <vTaskPrioritySet+0xb4>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8002a20:	2301      	movs	r3, #1
 8002a22:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d102      	bne.n	8002a3c <vTaskPrioritySet+0xcc>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	db04      	blt.n	8002a54 <vTaskPrioritySet+0xe4>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	f1c3 0205 	rsb	r2, r3, #5
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6959      	ldr	r1, [r3, #20]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4a20      	ldr	r2, [pc, #128]	; (8002ae4 <vTaskPrioritySet+0x174>)
 8002a64:	4413      	add	r3, r2
 8002a66:	4299      	cmp	r1, r3
 8002a68:	d128      	bne.n	8002abc <vTaskPrioritySet+0x14c>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fc7a 	bl	8002368 <uxListRemove>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <vTaskPrioritySet+0x11e>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <vTaskPrioritySet+0x178>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <vTaskPrioritySet+0x178>)
 8002a8c:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a92:	2201      	movs	r2, #1
 8002a94:	409a      	lsls	r2, r3
 8002a96:	4b14      	ldr	r3, [pc, #80]	; (8002ae8 <vTaskPrioritySet+0x178>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	4a12      	ldr	r2, [pc, #72]	; (8002ae8 <vTaskPrioritySet+0x178>)
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <vTaskPrioritySet+0x174>)
 8002aae:	441a      	add	r2, r3
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	f7ff fbf9 	bl	80022ae <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <vTaskPrioritySet+0x162>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <vTaskPrioritySet+0x17c>)
 8002ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002ad2:	f000 fec5 	bl	8003860 <vPortExitCritical>
    }
 8002ad6:	bf00      	nop
 8002ad8:	3720      	adds	r7, #32
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000098 	.word	0x20000098
 8002ae4:	2000009c 	.word	0x2000009c
 8002ae8:	20000178 	.word	0x20000178
 8002aec:	e000ed04 	.word	0xe000ed04

08002af0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002af6:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <vTaskStartScheduler+0x94>)
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	2300      	movs	r3, #0
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2300      	movs	r3, #0
 8002b00:	2282      	movs	r2, #130	; 0x82
 8002b02:	4921      	ldr	r1, [pc, #132]	; (8002b88 <vTaskStartScheduler+0x98>)
 8002b04:	4821      	ldr	r0, [pc, #132]	; (8002b8c <vTaskStartScheduler+0x9c>)
 8002b06:	f7ff fc59 	bl	80023bc <xTaskCreate>
 8002b0a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d123      	bne.n	8002b5a <vTaskStartScheduler+0x6a>
 8002b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <vTaskStartScheduler+0xa0>)
 8002b26:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b2c:	4b19      	ldr	r3, [pc, #100]	; (8002b94 <vTaskStartScheduler+0xa4>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b32:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <vTaskStartScheduler+0xa8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <vTaskStartScheduler+0xac>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <vTaskStartScheduler+0x94>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d102      	bne.n	8002b4a <vTaskStartScheduler+0x5a>
 8002b44:	f002 faac 	bl	80050a0 <SEGGER_SYSVIEW_OnIdle>
 8002b48:	e004      	b.n	8002b54 <vTaskStartScheduler+0x64>
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <vTaskStartScheduler+0xac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 fb04 	bl	800515c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002b54:	f000 fd3e 	bl	80035d4 <xPortStartScheduler>
 8002b58:	e00d      	b.n	8002b76 <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d109      	bne.n	8002b76 <vTaskStartScheduler+0x86>
 8002b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	607b      	str	r3, [r7, #4]
 8002b74:	e7fe      	b.n	8002b74 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <vTaskStartScheduler+0xb0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000194 	.word	0x20000194
 8002b88:	08005f20 	.word	0x08005f20
 8002b8c:	08002f69 	.word	0x08002f69
 8002b90:	20000190 	.word	0x20000190
 8002b94:	2000017c 	.word	0x2000017c
 8002b98:	20000174 	.word	0x20000174
 8002b9c:	20000098 	.word	0x20000098
 8002ba0:	2000000c 	.word	0x2000000c

08002ba4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <vTaskSuspendAll+0x18>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3301      	adds	r3, #1
 8002bae:	4a03      	ldr	r2, [pc, #12]	; (8002bbc <vTaskSuspendAll+0x18>)
 8002bb0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002bb2:	bf00      	nop
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	20000198 	.word	0x20000198

08002bc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002bce:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <xTaskResumeAll+0x11c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <xTaskResumeAll+0x2a>
 8002bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	e7fe      	b.n	8002be8 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002bea:	f000 fe0b 	bl	8003804 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002bee:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <xTaskResumeAll+0x11c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	4a39      	ldr	r2, [pc, #228]	; (8002cdc <xTaskResumeAll+0x11c>)
 8002bf6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bf8:	4b38      	ldr	r3, [pc, #224]	; (8002cdc <xTaskResumeAll+0x11c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d165      	bne.n	8002ccc <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c00:	4b37      	ldr	r3, [pc, #220]	; (8002ce0 <xTaskResumeAll+0x120>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d061      	beq.n	8002ccc <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c08:	e032      	b.n	8002c70 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c0a:	4b36      	ldr	r3, [pc, #216]	; (8002ce4 <xTaskResumeAll+0x124>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3318      	adds	r3, #24
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fba6 	bl	8002368 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3304      	adds	r3, #4
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fba1 	bl	8002368 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f002 fad9 	bl	80051e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	2201      	movs	r2, #1
 8002c34:	409a      	lsls	r2, r3
 8002c36:	4b2c      	ldr	r3, [pc, #176]	; (8002ce8 <xTaskResumeAll+0x128>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ce8 <xTaskResumeAll+0x128>)
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4a27      	ldr	r2, [pc, #156]	; (8002cec <xTaskResumeAll+0x12c>)
 8002c4e:	441a      	add	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f7ff fb29 	bl	80022ae <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c60:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <xTaskResumeAll+0x130>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8002c6a:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <xTaskResumeAll+0x134>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c70:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <xTaskResumeAll+0x124>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1c8      	bne.n	8002c0a <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002c7e:	f000 fa07 	bl	8003090 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c82:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <xTaskResumeAll+0x138>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d010      	beq.n	8002cb0 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c8e:	f000 f847 	bl	8002d20 <xTaskIncrementTick>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8002c98:	4b16      	ldr	r3, [pc, #88]	; (8002cf4 <xTaskResumeAll+0x134>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f1      	bne.n	8002c8e <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <xTaskResumeAll+0x138>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002cb0:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <xTaskResumeAll+0x134>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d009      	beq.n	8002ccc <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <xTaskResumeAll+0x13c>)
 8002cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	f3bf 8f4f 	dsb	sy
 8002cc8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002ccc:	f000 fdc8 	bl	8003860 <vPortExitCritical>

    return xAlreadyYielded;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000198 	.word	0x20000198
 8002ce0:	20000170 	.word	0x20000170
 8002ce4:	20000130 	.word	0x20000130
 8002ce8:	20000178 	.word	0x20000178
 8002cec:	2000009c 	.word	0x2000009c
 8002cf0:	20000098 	.word	0x20000098
 8002cf4:	20000184 	.word	0x20000184
 8002cf8:	20000180 	.word	0x20000180
 8002cfc:	e000ed04 	.word	0xe000ed04

08002d00 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <xTaskGetTickCount+0x1c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002d0c:	687b      	ldr	r3, [r7, #4]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000174 	.word	0x20000174

08002d20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d2a:	4b50      	ldr	r3, [pc, #320]	; (8002e6c <xTaskIncrementTick+0x14c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 8091 	bne.w	8002e56 <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d34:	4b4e      	ldr	r3, [pc, #312]	; (8002e70 <xTaskIncrementTick+0x150>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d3c:	4a4c      	ldr	r2, [pc, #304]	; (8002e70 <xTaskIncrementTick+0x150>)
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d11f      	bne.n	8002d88 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d48:	4b4a      	ldr	r3, [pc, #296]	; (8002e74 <xTaskIncrementTick+0x154>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <xTaskIncrementTick+0x46>
 8002d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d56:	f383 8811 	msr	BASEPRI, r3
 8002d5a:	f3bf 8f6f 	isb	sy
 8002d5e:	f3bf 8f4f 	dsb	sy
 8002d62:	603b      	str	r3, [r7, #0]
 8002d64:	e7fe      	b.n	8002d64 <xTaskIncrementTick+0x44>
 8002d66:	4b43      	ldr	r3, [pc, #268]	; (8002e74 <xTaskIncrementTick+0x154>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	4b42      	ldr	r3, [pc, #264]	; (8002e78 <xTaskIncrementTick+0x158>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a40      	ldr	r2, [pc, #256]	; (8002e74 <xTaskIncrementTick+0x154>)
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4a40      	ldr	r2, [pc, #256]	; (8002e78 <xTaskIncrementTick+0x158>)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b40      	ldr	r3, [pc, #256]	; (8002e7c <xTaskIncrementTick+0x15c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	4a3e      	ldr	r2, [pc, #248]	; (8002e7c <xTaskIncrementTick+0x15c>)
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	f000 f984 	bl	8003090 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d88:	4b3d      	ldr	r3, [pc, #244]	; (8002e80 <xTaskIncrementTick+0x160>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d34c      	bcc.n	8002e2c <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d92:	4b38      	ldr	r3, [pc, #224]	; (8002e74 <xTaskIncrementTick+0x154>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d104      	bne.n	8002da6 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d9c:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <xTaskIncrementTick+0x160>)
 8002d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002da2:	601a      	str	r2, [r3, #0]
                    break;
 8002da4:	e042      	b.n	8002e2c <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002da6:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <xTaskIncrementTick+0x154>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d203      	bcs.n	8002dc6 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002dbe:	4a30      	ldr	r2, [pc, #192]	; (8002e80 <xTaskIncrementTick+0x160>)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002dc4:	e032      	b.n	8002e2c <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff facc 	bl	8002368 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d004      	beq.n	8002de2 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	3318      	adds	r3, #24
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff fac3 	bl	8002368 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f002 f9fb 	bl	80051e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	2201      	movs	r2, #1
 8002df0:	409a      	lsls	r2, r3
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <xTaskIncrementTick+0x164>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <xTaskIncrementTick+0x164>)
 8002dfa:	6013      	str	r3, [r2, #0]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4a1f      	ldr	r2, [pc, #124]	; (8002e88 <xTaskIncrementTick+0x168>)
 8002e0a:	441a      	add	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	3304      	adds	r3, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f7ff fa4b 	bl	80022ae <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	; (8002e8c <xTaskIncrementTick+0x16c>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d3b5      	bcc.n	8002d92 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8002e26:	2301      	movs	r3, #1
 8002e28:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e2a:	e7b2      	b.n	8002d92 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e2c:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <xTaskIncrementTick+0x16c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e32:	4915      	ldr	r1, [pc, #84]	; (8002e88 <xTaskIncrementTick+0x168>)
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d901      	bls.n	8002e48 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 8002e44:	2301      	movs	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <xTaskIncrementTick+0x170>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8002e50:	2301      	movs	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	e004      	b.n	8002e60 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <xTaskIncrementTick+0x174>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	4a0d      	ldr	r2, [pc, #52]	; (8002e94 <xTaskIncrementTick+0x174>)
 8002e5e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002e60:	697b      	ldr	r3, [r7, #20]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3718      	adds	r7, #24
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000198 	.word	0x20000198
 8002e70:	20000174 	.word	0x20000174
 8002e74:	20000128 	.word	0x20000128
 8002e78:	2000012c 	.word	0x2000012c
 8002e7c:	20000188 	.word	0x20000188
 8002e80:	20000190 	.word	0x20000190
 8002e84:	20000178 	.word	0x20000178
 8002e88:	2000009c 	.word	0x2000009c
 8002e8c:	20000098 	.word	0x20000098
 8002e90:	20000184 	.word	0x20000184
 8002e94:	20000180 	.word	0x20000180

08002e98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	; (8002f50 <vTaskSwitchContext+0xb8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	; (8002f54 <vTaskSwitchContext+0xbc>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002eac:	e04c      	b.n	8002f48 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8002eae:	4b29      	ldr	r3, [pc, #164]	; (8002f54 <vTaskSwitchContext+0xbc>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eb4:	4b28      	ldr	r3, [pc, #160]	; (8002f58 <vTaskSwitchContext+0xc0>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002ec2:	7afb      	ldrb	r3, [r7, #11]
 8002ec4:	f1c3 031f 	rsb	r3, r3, #31
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	4924      	ldr	r1, [pc, #144]	; (8002f5c <vTaskSwitchContext+0xc4>)
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d109      	bne.n	8002ef2 <vTaskSwitchContext+0x5a>
        __asm volatile
 8002ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	607b      	str	r3, [r7, #4]
 8002ef0:	e7fe      	b.n	8002ef0 <vTaskSwitchContext+0x58>
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <vTaskSwitchContext+0xc4>)
 8002efe:	4413      	add	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	3308      	adds	r3, #8
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d104      	bne.n	8002f22 <vTaskSwitchContext+0x8a>
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a0d      	ldr	r2, [pc, #52]	; (8002f60 <vTaskSwitchContext+0xc8>)
 8002f2a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <vTaskSwitchContext+0xc8>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <vTaskSwitchContext+0xcc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d102      	bne.n	8002f3e <vTaskSwitchContext+0xa6>
 8002f38:	f002 f8b2 	bl	80050a0 <SEGGER_SYSVIEW_OnIdle>
}
 8002f3c:	e004      	b.n	8002f48 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <vTaskSwitchContext+0xc8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f002 f90a 	bl	800515c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002f48:	bf00      	nop
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	20000198 	.word	0x20000198
 8002f54:	20000184 	.word	0x20000184
 8002f58:	20000178 	.word	0x20000178
 8002f5c:	2000009c 	.word	0x2000009c
 8002f60:	20000098 	.word	0x20000098
 8002f64:	20000194 	.word	0x20000194

08002f68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002f70:	f000 f852 	bl	8003018 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <prvIdleTask+0x28>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d9f9      	bls.n	8002f70 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <prvIdleTask+0x2c>)
 8002f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002f8c:	e7f0      	b.n	8002f70 <prvIdleTask+0x8>
 8002f8e:	bf00      	nop
 8002f90:	2000009c 	.word	0x2000009c
 8002f94:	e000ed04 	.word	0xe000ed04

08002f98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	e00c      	b.n	8002fbe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <prvInitialiseTaskLists+0x60>)
 8002fb0:	4413      	add	r3, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff f94e 	bl	8002254 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d9ef      	bls.n	8002fa4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002fc4:	480d      	ldr	r0, [pc, #52]	; (8002ffc <prvInitialiseTaskLists+0x64>)
 8002fc6:	f7ff f945 	bl	8002254 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002fca:	480d      	ldr	r0, [pc, #52]	; (8003000 <prvInitialiseTaskLists+0x68>)
 8002fcc:	f7ff f942 	bl	8002254 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002fd0:	480c      	ldr	r0, [pc, #48]	; (8003004 <prvInitialiseTaskLists+0x6c>)
 8002fd2:	f7ff f93f 	bl	8002254 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002fd6:	480c      	ldr	r0, [pc, #48]	; (8003008 <prvInitialiseTaskLists+0x70>)
 8002fd8:	f7ff f93c 	bl	8002254 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002fdc:	480b      	ldr	r0, [pc, #44]	; (800300c <prvInitialiseTaskLists+0x74>)
 8002fde:	f7ff f939 	bl	8002254 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <prvInitialiseTaskLists+0x78>)
 8002fe4:	4a05      	ldr	r2, [pc, #20]	; (8002ffc <prvInitialiseTaskLists+0x64>)
 8002fe6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <prvInitialiseTaskLists+0x7c>)
 8002fea:	4a05      	ldr	r2, [pc, #20]	; (8003000 <prvInitialiseTaskLists+0x68>)
 8002fec:	601a      	str	r2, [r3, #0]
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000009c 	.word	0x2000009c
 8002ffc:	20000100 	.word	0x20000100
 8003000:	20000114 	.word	0x20000114
 8003004:	20000130 	.word	0x20000130
 8003008:	20000144 	.word	0x20000144
 800300c:	2000015c 	.word	0x2000015c
 8003010:	20000128 	.word	0x20000128
 8003014:	2000012c 	.word	0x2000012c

08003018 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800301e:	e019      	b.n	8003054 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003020:	f000 fbf0 	bl	8003804 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <prvCheckTasksWaitingTermination+0x4c>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff f999 	bl	8002368 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <prvCheckTasksWaitingTermination+0x50>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3b01      	subs	r3, #1
 800303c:	4a0a      	ldr	r2, [pc, #40]	; (8003068 <prvCheckTasksWaitingTermination+0x50>)
 800303e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003040:	4b0a      	ldr	r3, [pc, #40]	; (800306c <prvCheckTasksWaitingTermination+0x54>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3b01      	subs	r3, #1
 8003046:	4a09      	ldr	r2, [pc, #36]	; (800306c <prvCheckTasksWaitingTermination+0x54>)
 8003048:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800304a:	f000 fc09 	bl	8003860 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f80e 	bl	8003070 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003054:	4b05      	ldr	r3, [pc, #20]	; (800306c <prvCheckTasksWaitingTermination+0x54>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e1      	bne.n	8003020 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	20000144 	.word	0x20000144
 8003068:	20000170 	.word	0x20000170
 800306c:	20000158 	.word	0x20000158

08003070 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fd7f 	bl	8003b80 <vPortFree>
                vPortFree( pxTCB );
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fd7c 	bl	8003b80 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003094:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <prvResetNextTaskUnblockTime+0x30>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800309e:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <prvResetNextTaskUnblockTime+0x34>)
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295
 80030a4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80030a6:	e005      	b.n	80030b4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <prvResetNextTaskUnblockTime+0x30>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <prvResetNextTaskUnblockTime+0x34>)
 80030b2:	6013      	str	r3, [r2, #0]
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000128 	.word	0x20000128
 80030c4:	20000190 	.word	0x20000190

080030c8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <xTaskGetCurrentTaskHandle+0x1c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	607b      	str	r3, [r7, #4]

        return xReturn;
 80030d4:	687b      	ldr	r3, [r7, #4]
    }
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000098 	.word	0x20000098

080030e8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af02      	add	r7, sp, #8
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
 80030f4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <xTaskGenericNotifyWait+0x28>
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	f383 8811 	msr	BASEPRI, r3
 8003104:	f3bf 8f6f 	isb	sy
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	e7fe      	b.n	800310e <xTaskGenericNotifyWait+0x26>

        taskENTER_CRITICAL();
 8003110:	f000 fb78 	bl	8003804 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003114:	4b36      	ldr	r3, [pc, #216]	; (80031f0 <xTaskGenericNotifyWait+0x108>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	3354      	adds	r3, #84	; 0x54
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d022      	beq.n	800316c <xTaskGenericNotifyWait+0x84>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003126:	4b32      	ldr	r3, [pc, #200]	; (80031f0 <xTaskGenericNotifyWait+0x108>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	3214      	adds	r2, #20
 800312e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	43d2      	mvns	r2, r2
 8003136:	4011      	ands	r1, r2
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	3214      	adds	r2, #20
 800313c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003140:	4b2b      	ldr	r3, [pc, #172]	; (80031f0 <xTaskGenericNotifyWait+0x108>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	3354      	adds	r3, #84	; 0x54
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <xTaskGenericNotifyWait+0x84>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003154:	2101      	movs	r1, #1
 8003156:	6a38      	ldr	r0, [r7, #32]
 8003158:	f000 f93c 	bl	80033d4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <xTaskGenericNotifyWait+0x10c>)
 800315e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800316c:	f000 fb78 	bl	8003860 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003170:	f000 fb48 	bl	8003804 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	6a3b      	ldr	r3, [r7, #32]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	4613      	mov	r3, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	2040      	movs	r0, #64	; 0x40
 8003182:	f001 fbdd 	bl	8004940 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <xTaskGenericNotifyWait+0xb4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800318c:	4b18      	ldr	r3, [pc, #96]	; (80031f0 <xTaskGenericNotifyWait+0x108>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	3214      	adds	r2, #20
 8003194:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800319c:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <xTaskGenericNotifyWait+0x108>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	3354      	adds	r3, #84	; 0x54
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d002      	beq.n	80031b4 <xTaskGenericNotifyWait+0xcc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e00e      	b.n	80031d2 <xTaskGenericNotifyWait+0xea>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <xTaskGenericNotifyWait+0x108>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	3214      	adds	r2, #20
 80031bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	43d2      	mvns	r2, r2
 80031c4:	4011      	ands	r1, r2
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	3214      	adds	r2, #20
 80031ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80031ce:	2301      	movs	r3, #1
 80031d0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80031d2:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <xTaskGenericNotifyWait+0x108>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	3354      	adds	r3, #84	; 0x54
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80031e0:	f000 fb3e 	bl	8003860 <vPortExitCritical>

        return xReturn;
 80031e4:	697b      	ldr	r3, [r7, #20]
    }
 80031e6:	4618      	mov	r0, r3
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000098 	.word	0x20000098
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08e      	sub	sp, #56	; 0x38
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003206:	2301      	movs	r3, #1
 8003208:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d009      	beq.n	8003224 <xTaskGenericNotify+0x2c>
 8003210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003214:	f383 8811 	msr	BASEPRI, r3
 8003218:	f3bf 8f6f 	isb	sy
 800321c:	f3bf 8f4f 	dsb	sy
 8003220:	623b      	str	r3, [r7, #32]
 8003222:	e7fe      	b.n	8003222 <xTaskGenericNotify+0x2a>
        configASSERT( xTaskToNotify );
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d109      	bne.n	800323e <xTaskGenericNotify+0x46>
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	e7fe      	b.n	800323c <xTaskGenericNotify+0x44>
        pxTCB = xTaskToNotify;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 8003242:	f000 fadf 	bl	8003804 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	2b00      	cmp	r3, #0
 800324a:	d006      	beq.n	800325a <xTaskGenericNotify+0x62>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	3214      	adds	r2, #20
 8003252:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800325a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4413      	add	r3, r2
 8003260:	3354      	adds	r3, #84	; 0x54
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	4413      	add	r3, r2
 800326e:	3354      	adds	r3, #84	; 0x54
 8003270:	2202      	movs	r2, #2
 8003272:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	2b04      	cmp	r3, #4
 8003278:	d83b      	bhi.n	80032f2 <xTaskGenericNotify+0xfa>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <xTaskGenericNotify+0x88>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	0800330f 	.word	0x0800330f
 8003284:	08003295 	.word	0x08003295
 8003288:	080032b1 	.word	0x080032b1
 800328c:	080032c9 	.word	0x080032c9
 8003290:	080032d7 	.word	0x080032d7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	3214      	adds	r2, #20
 800329a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	ea42 0103 	orr.w	r1, r2, r3
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	3214      	adds	r2, #20
 80032aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80032ae:	e031      	b.n	8003314 <xTaskGenericNotify+0x11c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80032b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	3214      	adds	r2, #20
 80032b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ba:	1c59      	adds	r1, r3, #1
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	3214      	adds	r2, #20
 80032c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80032c6:	e025      	b.n	8003314 <xTaskGenericNotify+0x11c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80032c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	3214      	adds	r2, #20
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80032d4:	e01e      	b.n	8003314 <xTaskGenericNotify+0x11c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80032d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d006      	beq.n	80032ec <xTaskGenericNotify+0xf4>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	3214      	adds	r2, #20
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80032ea:	e013      	b.n	8003314 <xTaskGenericNotify+0x11c>
                        xReturn = pdFAIL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80032f0:	e010      	b.n	8003314 <xTaskGenericNotify+0x11c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80032f2:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <xTaskGenericNotify+0x1c8>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00b      	beq.n	8003312 <xTaskGenericNotify+0x11a>
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	e7fe      	b.n	800330c <xTaskGenericNotify+0x114>
                    break;
 800330e:	bf00      	nop
 8003310:	e000      	b.n	8003314 <xTaskGenericNotify+0x11c>

                    break;
 8003312:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003316:	4618      	mov	r0, r3
 8003318:	f002 f804 	bl	8005324 <SEGGER_SYSVIEW_ShrinkId>
 800331c:	4601      	mov	r1, r0
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	4613      	mov	r3, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	203e      	movs	r0, #62	; 0x3e
 800332a:	f001 fb09 	bl	8004940 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800332e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003332:	2b01      	cmp	r3, #1
 8003334:	d13c      	bne.n	80033b0 <xTaskGenericNotify+0x1b8>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	3304      	adds	r3, #4
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff f814 	bl	8002368 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8003340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003342:	4618      	mov	r0, r3
 8003344:	f001 ff4c 	bl	80051e0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	2201      	movs	r2, #1
 800334e:	409a      	lsls	r2, r3
 8003350:	4b1c      	ldr	r3, [pc, #112]	; (80033c4 <xTaskGenericNotify+0x1cc>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	4a1b      	ldr	r2, [pc, #108]	; (80033c4 <xTaskGenericNotify+0x1cc>)
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335e:	4613      	mov	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <xTaskGenericNotify+0x1d0>)
 8003368:	441a      	add	r2, r3
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	3304      	adds	r3, #4
 800336e:	4619      	mov	r1, r3
 8003370:	4610      	mov	r0, r2
 8003372:	f7fe ff9c 	bl	80022ae <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <xTaskGenericNotify+0x19a>
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	e7fe      	b.n	8003390 <xTaskGenericNotify+0x198>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <xTaskGenericNotify+0x1d4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	429a      	cmp	r2, r3
 800339e:	d907      	bls.n	80033b0 <xTaskGenericNotify+0x1b8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80033a0:	4b0b      	ldr	r3, [pc, #44]	; (80033d0 <xTaskGenericNotify+0x1d8>)
 80033a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80033b0:	f000 fa56 	bl	8003860 <vPortExitCritical>

        return xReturn;
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80033b6:	4618      	mov	r0, r3
 80033b8:	3730      	adds	r7, #48	; 0x30
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	20000174 	.word	0x20000174
 80033c4:	20000178 	.word	0x20000178
 80033c8:	2000009c 	.word	0x2000009c
 80033cc:	20000098 	.word	0x20000098
 80033d0:	e000ed04 	.word	0xe000ed04

080033d4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80033de:	4b32      	ldr	r3, [pc, #200]	; (80034a8 <prvAddCurrentTaskToDelayedList+0xd4>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033e4:	4b31      	ldr	r3, [pc, #196]	; (80034ac <prvAddCurrentTaskToDelayedList+0xd8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3304      	adds	r3, #4
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe ffbc 	bl	8002368 <uxListRemove>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10b      	bne.n	800340e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80033f6:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <prvAddCurrentTaskToDelayedList+0xd8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	2201      	movs	r2, #1
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43da      	mvns	r2, r3
 8003404:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4013      	ands	r3, r2
 800340a:	4a29      	ldr	r2, [pc, #164]	; (80034b0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800340c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003414:	d110      	bne.n	8003438 <prvAddCurrentTaskToDelayedList+0x64>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00d      	beq.n	8003438 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800341c:	4b23      	ldr	r3, [pc, #140]	; (80034ac <prvAddCurrentTaskToDelayedList+0xd8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	211b      	movs	r1, #27
 8003422:	4618      	mov	r0, r3
 8003424:	f001 ff1e 	bl	8005264 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003428:	4b20      	ldr	r3, [pc, #128]	; (80034ac <prvAddCurrentTaskToDelayedList+0xd8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3304      	adds	r3, #4
 800342e:	4619      	mov	r1, r3
 8003430:	4820      	ldr	r0, [pc, #128]	; (80034b4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003432:	f7fe ff3c 	bl	80022ae <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003436:	e032      	b.n	800349e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003440:	4b1a      	ldr	r3, [pc, #104]	; (80034ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	429a      	cmp	r2, r3
 800344e:	d20f      	bcs.n	8003470 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003450:	4b16      	ldr	r3, [pc, #88]	; (80034ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2104      	movs	r1, #4
 8003456:	4618      	mov	r0, r3
 8003458:	f001 ff04 	bl	8005264 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800345c:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4b12      	ldr	r3, [pc, #72]	; (80034ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3304      	adds	r3, #4
 8003466:	4619      	mov	r1, r3
 8003468:	4610      	mov	r0, r2
 800346a:	f7fe ff44 	bl	80022f6 <vListInsert>
}
 800346e:	e016      	b.n	800349e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2104      	movs	r1, #4
 8003476:	4618      	mov	r0, r3
 8003478:	f001 fef4 	bl	8005264 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800347c:	4b0f      	ldr	r3, [pc, #60]	; (80034bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4b0a      	ldr	r3, [pc, #40]	; (80034ac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	3304      	adds	r3, #4
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f7fe ff34 	bl	80022f6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800348e:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	429a      	cmp	r2, r3
 8003496:	d202      	bcs.n	800349e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003498:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <prvAddCurrentTaskToDelayedList+0xec>)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6013      	str	r3, [r2, #0]
}
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	20000174 	.word	0x20000174
 80034ac:	20000098 	.word	0x20000098
 80034b0:	20000178 	.word	0x20000178
 80034b4:	2000015c 	.word	0x2000015c
 80034b8:	2000012c 	.word	0x2000012c
 80034bc:	20000128 	.word	0x20000128
 80034c0:	20000190 	.word	0x20000190

080034c4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	60b9      	str	r1, [r7, #8]
 80034ce:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	3b04      	subs	r3, #4
 80034d4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3b04      	subs	r3, #4
 80034e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f023 0201 	bic.w	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3b04      	subs	r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80034f4:	4a0c      	ldr	r2, [pc, #48]	; (8003528 <pxPortInitialiseStack+0x64>)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3b14      	subs	r3, #20
 80034fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	3b04      	subs	r3, #4
 800350a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f06f 0202 	mvn.w	r2, #2
 8003512:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3b20      	subs	r3, #32
 8003518:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800351a:	68fb      	ldr	r3, [r7, #12]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	0800352d 	.word	0x0800352d

0800352c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <prvTaskExitError+0x50>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d009      	beq.n	8003554 <prvTaskExitError+0x28>
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	e7fe      	b.n	8003552 <prvTaskExitError+0x26>
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003566:	bf00      	nop
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0fc      	beq.n	8003568 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800356e:	bf00      	nop
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	20000010 	.word	0x20000010

08003580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <pxCurrentTCBConst2>)
 8003582:	6819      	ldr	r1, [r3, #0]
 8003584:	6808      	ldr	r0, [r1, #0]
 8003586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800358a:	f380 8809 	msr	PSP, r0
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	f04f 0000 	mov.w	r0, #0
 8003596:	f380 8811 	msr	BASEPRI, r0
 800359a:	4770      	bx	lr
 800359c:	f3af 8000 	nop.w

080035a0 <pxCurrentTCBConst2>:
 80035a0:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80035a4:	bf00      	nop
 80035a6:	bf00      	nop

080035a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80035a8:	4808      	ldr	r0, [pc, #32]	; (80035cc <prvPortStartFirstTask+0x24>)
 80035aa:	6800      	ldr	r0, [r0, #0]
 80035ac:	6800      	ldr	r0, [r0, #0]
 80035ae:	f380 8808 	msr	MSP, r0
 80035b2:	f04f 0000 	mov.w	r0, #0
 80035b6:	f380 8814 	msr	CONTROL, r0
 80035ba:	b662      	cpsie	i
 80035bc:	b661      	cpsie	f
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	df00      	svc	0
 80035c8:	bf00      	nop
 80035ca:	0000      	.short	0x0000
 80035cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop

080035d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80035da:	4b44      	ldr	r3, [pc, #272]	; (80036ec <xPortStartScheduler+0x118>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a44      	ldr	r2, [pc, #272]	; (80036f0 <xPortStartScheduler+0x11c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d109      	bne.n	80035f8 <xPortStartScheduler+0x24>
 80035e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e8:	f383 8811 	msr	BASEPRI, r3
 80035ec:	f3bf 8f6f 	isb	sy
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	e7fe      	b.n	80035f6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80035f8:	4b3c      	ldr	r3, [pc, #240]	; (80036ec <xPortStartScheduler+0x118>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a3d      	ldr	r2, [pc, #244]	; (80036f4 <xPortStartScheduler+0x120>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d109      	bne.n	8003616 <xPortStartScheduler+0x42>
 8003602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	e7fe      	b.n	8003614 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003616:	4b38      	ldr	r3, [pc, #224]	; (80036f8 <xPortStartScheduler+0x124>)
 8003618:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	22ff      	movs	r2, #255	; 0xff
 8003626:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003638:	b2da      	uxtb	r2, r3
 800363a:	4b30      	ldr	r3, [pc, #192]	; (80036fc <xPortStartScheduler+0x128>)
 800363c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800363e:	4b30      	ldr	r3, [pc, #192]	; (8003700 <xPortStartScheduler+0x12c>)
 8003640:	2207      	movs	r2, #7
 8003642:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003644:	e009      	b.n	800365a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8003646:	4b2e      	ldr	r3, [pc, #184]	; (8003700 <xPortStartScheduler+0x12c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3b01      	subs	r3, #1
 800364c:	4a2c      	ldr	r2, [pc, #176]	; (8003700 <xPortStartScheduler+0x12c>)
 800364e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	b2db      	uxtb	r3, r3
 8003658:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	2b80      	cmp	r3, #128	; 0x80
 8003664:	d0ef      	beq.n	8003646 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <xPortStartScheduler+0x12c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f1c3 0307 	rsb	r3, r3, #7
 800366e:	2b04      	cmp	r3, #4
 8003670:	d009      	beq.n	8003686 <xPortStartScheduler+0xb2>
 8003672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	e7fe      	b.n	8003684 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003686:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <xPortStartScheduler+0x12c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <xPortStartScheduler+0x12c>)
 800368e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <xPortStartScheduler+0x12c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003698:	4a19      	ldr	r2, [pc, #100]	; (8003700 <xPortStartScheduler+0x12c>)
 800369a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80036a4:	4b17      	ldr	r3, [pc, #92]	; (8003704 <xPortStartScheduler+0x130>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a16      	ldr	r2, [pc, #88]	; (8003704 <xPortStartScheduler+0x130>)
 80036aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036ae:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80036b0:	4b14      	ldr	r3, [pc, #80]	; (8003704 <xPortStartScheduler+0x130>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a13      	ldr	r2, [pc, #76]	; (8003704 <xPortStartScheduler+0x130>)
 80036b6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036ba:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80036bc:	f000 f954 	bl	8003968 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80036c0:	4b11      	ldr	r3, [pc, #68]	; (8003708 <xPortStartScheduler+0x134>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80036c6:	f000 f973 	bl	80039b0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <xPortStartScheduler+0x138>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a0f      	ldr	r2, [pc, #60]	; (800370c <xPortStartScheduler+0x138>)
 80036d0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80036d4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80036d6:	f7ff ff67 	bl	80035a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80036da:	f7ff fbdd 	bl	8002e98 <vTaskSwitchContext>
    prvTaskExitError();
 80036de:	f7ff ff25 	bl	800352c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	e000ed00 	.word	0xe000ed00
 80036f0:	410fc271 	.word	0x410fc271
 80036f4:	410fc270 	.word	0x410fc270
 80036f8:	e000e400 	.word	0xe000e400
 80036fc:	2000019c 	.word	0x2000019c
 8003700:	200001a0 	.word	0x200001a0
 8003704:	e000ed20 	.word	0xe000ed20
 8003708:	20000010 	.word	0x20000010
 800370c:	e000ef34 	.word	0xe000ef34

08003710 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003716:	4b35      	ldr	r3, [pc, #212]	; (80037ec <vInitPrioGroupValue+0xdc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a35      	ldr	r2, [pc, #212]	; (80037f0 <vInitPrioGroupValue+0xe0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d109      	bne.n	8003734 <vInitPrioGroupValue+0x24>
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	613b      	str	r3, [r7, #16]
 8003732:	e7fe      	b.n	8003732 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003734:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <vInitPrioGroupValue+0xdc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a2e      	ldr	r2, [pc, #184]	; (80037f4 <vInitPrioGroupValue+0xe4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d109      	bne.n	8003752 <vInitPrioGroupValue+0x42>
 800373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003742:	f383 8811 	msr	BASEPRI, r3
 8003746:	f3bf 8f6f 	isb	sy
 800374a:	f3bf 8f4f 	dsb	sy
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	e7fe      	b.n	8003750 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003752:	4b29      	ldr	r3, [pc, #164]	; (80037f8 <vInitPrioGroupValue+0xe8>)
 8003754:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	22ff      	movs	r2, #255	; 0xff
 8003762:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4b21      	ldr	r3, [pc, #132]	; (80037fc <vInitPrioGroupValue+0xec>)
 8003778:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800377a:	4b21      	ldr	r3, [pc, #132]	; (8003800 <vInitPrioGroupValue+0xf0>)
 800377c:	2207      	movs	r2, #7
 800377e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003780:	e009      	b.n	8003796 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8003782:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <vInitPrioGroupValue+0xf0>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3b01      	subs	r3, #1
 8003788:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <vInitPrioGroupValue+0xf0>)
 800378a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	b2db      	uxtb	r3, r3
 8003794:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379e:	2b80      	cmp	r3, #128	; 0x80
 80037a0:	d0ef      	beq.n	8003782 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037a2:	4b17      	ldr	r3, [pc, #92]	; (8003800 <vInitPrioGroupValue+0xf0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f1c3 0307 	rsb	r3, r3, #7
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d009      	beq.n	80037c2 <vInitPrioGroupValue+0xb2>
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	e7fe      	b.n	80037c0 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037c2:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <vInitPrioGroupValue+0xf0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	021b      	lsls	r3, r3, #8
 80037c8:	4a0d      	ldr	r2, [pc, #52]	; (8003800 <vInitPrioGroupValue+0xf0>)
 80037ca:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <vInitPrioGroupValue+0xf0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037d4:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <vInitPrioGroupValue+0xf0>)
 80037d6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80037e0:	bf00      	nop
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	e000ed00 	.word	0xe000ed00
 80037f0:	410fc271 	.word	0x410fc271
 80037f4:	410fc270 	.word	0x410fc270
 80037f8:	e000e400 	.word	0xe000e400
 80037fc:	2000019c 	.word	0x2000019c
 8003800:	200001a0 	.word	0x200001a0

08003804 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800381c:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <vPortEnterCritical+0x54>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3301      	adds	r3, #1
 8003822:	4a0d      	ldr	r2, [pc, #52]	; (8003858 <vPortEnterCritical+0x54>)
 8003824:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003826:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <vPortEnterCritical+0x54>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d10e      	bne.n	800384c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <vPortEnterCritical+0x58>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	d009      	beq.n	800384c <vPortEnterCritical+0x48>
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	e7fe      	b.n	800384a <vPortEnterCritical+0x46>
    }
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	20000010 	.word	0x20000010
 800385c:	e000ed04 	.word	0xe000ed04

08003860 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <vPortExitCritical+0x4c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <vPortExitCritical+0x22>
 800386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	e7fe      	b.n	8003880 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8003882:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <vPortExitCritical+0x4c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3b01      	subs	r3, #1
 8003888:	4a08      	ldr	r2, [pc, #32]	; (80038ac <vPortExitCritical+0x4c>)
 800388a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800388c:	4b07      	ldr	r3, [pc, #28]	; (80038ac <vPortExitCritical+0x4c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d104      	bne.n	800389e <vPortExitCritical+0x3e>
 8003894:	2300      	movs	r3, #0
 8003896:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000010 	.word	0x20000010

080038b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80038b0:	f3ef 8009 	mrs	r0, PSP
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	4b15      	ldr	r3, [pc, #84]	; (8003910 <pxCurrentTCBConst>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	f01e 0f10 	tst.w	lr, #16
 80038c0:	bf08      	it	eq
 80038c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80038c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ca:	6010      	str	r0, [r2, #0]
 80038cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80038d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038d4:	f380 8811 	msr	BASEPRI, r0
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f7ff fada 	bl	8002e98 <vTaskSwitchContext>
 80038e4:	f04f 0000 	mov.w	r0, #0
 80038e8:	f380 8811 	msr	BASEPRI, r0
 80038ec:	bc09      	pop	{r0, r3}
 80038ee:	6819      	ldr	r1, [r3, #0]
 80038f0:	6808      	ldr	r0, [r1, #0]
 80038f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f6:	f01e 0f10 	tst.w	lr, #16
 80038fa:	bf08      	it	eq
 80038fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003900:	f380 8809 	msr	PSP, r0
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	f3af 8000 	nop.w

08003910 <pxCurrentTCBConst>:
 8003910:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop

08003918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
        __asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003930:	f001 fb3c 	bl	8004fac <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003934:	f7ff f9f4 	bl	8002d20 <xTaskIncrementTick>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d006      	beq.n	800394c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800393e:	f001 fb93 	bl	8005068 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <SysTick_Handler+0x4c>)
 8003944:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	e001      	b.n	8003950 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 800394c:	f001 fb70 	bl	8005030 <SEGGER_SYSVIEW_RecordExitISR>
 8003950:	2300      	movs	r3, #0
 8003952:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	e000ed04 	.word	0xe000ed04

08003968 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <vPortSetupTimerInterrupt+0x34>)
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003972:	4b0b      	ldr	r3, [pc, #44]	; (80039a0 <vPortSetupTimerInterrupt+0x38>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003978:	4b0a      	ldr	r3, [pc, #40]	; (80039a4 <vPortSetupTimerInterrupt+0x3c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <vPortSetupTimerInterrupt+0x40>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	099b      	lsrs	r3, r3, #6
 8003984:	4a09      	ldr	r2, [pc, #36]	; (80039ac <vPortSetupTimerInterrupt+0x44>)
 8003986:	3b01      	subs	r3, #1
 8003988:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800398a:	4b04      	ldr	r3, [pc, #16]	; (800399c <vPortSetupTimerInterrupt+0x34>)
 800398c:	2207      	movs	r2, #7
 800398e:	601a      	str	r2, [r3, #0]
}
 8003990:	bf00      	nop
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	e000e010 	.word	0xe000e010
 80039a0:	e000e018 	.word	0xe000e018
 80039a4:	20000000 	.word	0x20000000
 80039a8:	10624dd3 	.word	0x10624dd3
 80039ac:	e000e014 	.word	0xe000e014

080039b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80039b0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80039c0 <vPortEnableVFP+0x10>
 80039b4:	6801      	ldr	r1, [r0, #0]
 80039b6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80039ba:	6001      	str	r1, [r0, #0]
 80039bc:	4770      	bx	lr
 80039be:	0000      	.short	0x0000
 80039c0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop

080039c8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b08a      	sub	sp, #40	; 0x28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80039d4:	f7ff f8e6 	bl	8002ba4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80039d8:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <pvPortMalloc+0x1a0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80039e0:	f000 f92e 	bl	8003c40 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80039e4:	4b61      	ldr	r3, [pc, #388]	; (8003b6c <pvPortMalloc+0x1a4>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f040 80a5 	bne.w	8003b3c <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d02c      	beq.n	8003a52 <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80039f8:	2208      	movs	r2, #8
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d226      	bcs.n	8003a52 <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8003a04:	2208      	movs	r2, #8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d020      	beq.n	8003a58 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f023 0307 	bic.w	r3, r3, #7
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d213      	bcs.n	8003a4c <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f023 0307 	bic.w	r3, r3, #7
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00f      	beq.n	8003a58 <pvPortMalloc+0x90>
        __asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	e7fe      	b.n	8003a4a <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a50:	e002      	b.n	8003a58 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	607b      	str	r3, [r7, #4]
 8003a56:	e000      	b.n	8003a5a <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a58:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d06d      	beq.n	8003b3c <pvPortMalloc+0x174>
 8003a60:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <pvPortMalloc+0x1a8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d868      	bhi.n	8003b3c <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003a6a:	4b42      	ldr	r3, [pc, #264]	; (8003b74 <pvPortMalloc+0x1ac>)
 8003a6c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003a6e:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <pvPortMalloc+0x1ac>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a74:	e004      	b.n	8003a80 <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d903      	bls.n	8003a92 <pvPortMalloc+0xca>
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f1      	bne.n	8003a76 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003a92:	4b35      	ldr	r3, [pc, #212]	; (8003b68 <pvPortMalloc+0x1a0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d04f      	beq.n	8003b3c <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2208      	movs	r2, #8
 8003aa2:	4413      	add	r3, r2
 8003aa4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	1ad2      	subs	r2, r2, r3
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d91e      	bls.n	8003afc <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d009      	beq.n	8003ae4 <pvPortMalloc+0x11c>
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	e7fe      	b.n	8003ae2 <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	1ad2      	subs	r2, r2, r3
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003af6:	69b8      	ldr	r0, [r7, #24]
 8003af8:	f000 f904 	bl	8003d04 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003afc:	4b1c      	ldr	r3, [pc, #112]	; (8003b70 <pvPortMalloc+0x1a8>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	4a1a      	ldr	r2, [pc, #104]	; (8003b70 <pvPortMalloc+0x1a8>)
 8003b08:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b0a:	4b19      	ldr	r3, [pc, #100]	; (8003b70 <pvPortMalloc+0x1a8>)
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <pvPortMalloc+0x1b0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d203      	bcs.n	8003b1e <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b16:	4b16      	ldr	r3, [pc, #88]	; (8003b70 <pvPortMalloc+0x1a8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <pvPortMalloc+0x1b0>)
 8003b1c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <pvPortMalloc+0x1a4>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <pvPortMalloc+0x1b4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3301      	adds	r3, #1
 8003b38:	4a10      	ldr	r2, [pc, #64]	; (8003b7c <pvPortMalloc+0x1b4>)
 8003b3a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003b3c:	f7ff f840 	bl	8002bc0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <pvPortMalloc+0x196>
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	e7fe      	b.n	8003b5c <pvPortMalloc+0x194>
    return pvReturn;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3728      	adds	r7, #40	; 0x28
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	20012dac 	.word	0x20012dac
 8003b6c:	20012dc0 	.word	0x20012dc0
 8003b70:	20012db0 	.word	0x20012db0
 8003b74:	20012da4 	.word	0x20012da4
 8003b78:	20012db4 	.word	0x20012db4
 8003b7c:	20012db8 	.word	0x20012db8

08003b80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d04b      	beq.n	8003c2a <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003b92:	2308      	movs	r3, #8
 8003b94:	425b      	negs	r3, r3
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4413      	add	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <vPortFree+0xb4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <vPortFree+0x42>
 8003bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e7fe      	b.n	8003bc0 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <vPortFree+0x5e>
 8003bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bce:	f383 8811 	msr	BASEPRI, r3
 8003bd2:	f3bf 8f6f 	isb	sy
 8003bd6:	f3bf 8f4f 	dsb	sy
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	e7fe      	b.n	8003bdc <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <vPortFree+0xb4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01e      	beq.n	8003c2a <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d11a      	bne.n	8003c2a <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <vPortFree+0xb4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	401a      	ands	r2, r3
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003c04:	f7fe ffce 	bl	8002ba4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <vPortFree+0xb8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4413      	add	r3, r2
 8003c12:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <vPortFree+0xb8>)
 8003c14:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c16:	6938      	ldr	r0, [r7, #16]
 8003c18:	f000 f874 	bl	8003d04 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003c1c:	4b07      	ldr	r3, [pc, #28]	; (8003c3c <vPortFree+0xbc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	4a06      	ldr	r2, [pc, #24]	; (8003c3c <vPortFree+0xbc>)
 8003c24:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003c26:	f7fe ffcb 	bl	8002bc0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003c2a:	bf00      	nop
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20012dc0 	.word	0x20012dc0
 8003c38:	20012db0 	.word	0x20012db0
 8003c3c:	20012dbc 	.word	0x20012dbc

08003c40 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003c46:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003c4a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <prvHeapInit+0xac>)
 8003c4e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00c      	beq.n	8003c74 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3307      	adds	r3, #7
 8003c5e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0307 	bic.w	r3, r3, #7
 8003c66:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	4a1f      	ldr	r2, [pc, #124]	; (8003cec <prvHeapInit+0xac>)
 8003c70:	4413      	add	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c78:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <prvHeapInit+0xb0>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003c7e:	4b1c      	ldr	r3, [pc, #112]	; (8003cf0 <prvHeapInit+0xb0>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	4413      	add	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0307 	bic.w	r3, r3, #7
 8003c9a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <prvHeapInit+0xb4>)
 8003ca0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <prvHeapInit+0xb4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003caa:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <prvHeapInit+0xb4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	1ad2      	subs	r2, r2, r3
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <prvHeapInit+0xb4>)
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <prvHeapInit+0xb8>)
 8003cce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4a09      	ldr	r2, [pc, #36]	; (8003cfc <prvHeapInit+0xbc>)
 8003cd6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003cd8:	4b09      	ldr	r3, [pc, #36]	; (8003d00 <prvHeapInit+0xc0>)
 8003cda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003cde:	601a      	str	r2, [r3, #0]
}
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	200001a4 	.word	0x200001a4
 8003cf0:	20012da4 	.word	0x20012da4
 8003cf4:	20012dac 	.word	0x20012dac
 8003cf8:	20012db4 	.word	0x20012db4
 8003cfc:	20012db0 	.word	0x20012db0
 8003d00:	20012dc0 	.word	0x20012dc0

08003d04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d0c:	4b28      	ldr	r3, [pc, #160]	; (8003db0 <prvInsertBlockIntoFreeList+0xac>)
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	e002      	b.n	8003d18 <prvInsertBlockIntoFreeList+0x14>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d8f7      	bhi.n	8003d12 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d108      	bne.n	8003d46 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	441a      	add	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	441a      	add	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d118      	bne.n	8003d8c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <prvInsertBlockIntoFreeList+0xb0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d00d      	beq.n	8003d82 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	441a      	add	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e008      	b.n	8003d94 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <prvInsertBlockIntoFreeList+0xb0>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e003      	b.n	8003d94 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d002      	beq.n	8003da2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003da2:	bf00      	nop
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	20012da4 	.word	0x20012da4
 8003db4:	20012dac 	.word	0x20012dac

08003db8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003dc6:	2205      	movs	r2, #5
 8003dc8:	492b      	ldr	r1, [pc, #172]	; (8003e78 <SYSVIEW_AddTask+0xc0>)
 8003dca:	68b8      	ldr	r0, [r7, #8]
 8003dcc:	f001 fc16 	bl	80055fc <memcmp>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d04b      	beq.n	8003e6e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003dd6:	4b29      	ldr	r3, [pc, #164]	; (8003e7c <SYSVIEW_AddTask+0xc4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2b07      	cmp	r3, #7
 8003ddc:	d903      	bls.n	8003de6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003dde:	4828      	ldr	r0, [pc, #160]	; (8003e80 <SYSVIEW_AddTask+0xc8>)
 8003de0:	f001 fb8c 	bl	80054fc <SEGGER_SYSVIEW_Warn>
    return;
 8003de4:	e044      	b.n	8003e70 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003de6:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <SYSVIEW_AddTask+0xc4>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4926      	ldr	r1, [pc, #152]	; (8003e84 <SYSVIEW_AddTask+0xcc>)
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003dfa:	4b20      	ldr	r3, [pc, #128]	; (8003e7c <SYSVIEW_AddTask+0xc4>)
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4921      	ldr	r1, [pc, #132]	; (8003e84 <SYSVIEW_AddTask+0xcc>)
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <SYSVIEW_AddTask+0xc4>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	491b      	ldr	r1, [pc, #108]	; (8003e84 <SYSVIEW_AddTask+0xcc>)
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	3308      	adds	r3, #8
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003e26:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <SYSVIEW_AddTask+0xc4>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4916      	ldr	r1, [pc, #88]	; (8003e84 <SYSVIEW_AddTask+0xcc>)
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	330c      	adds	r3, #12
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003e3c:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <SYSVIEW_AddTask+0xc4>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4910      	ldr	r1, [pc, #64]	; (8003e84 <SYSVIEW_AddTask+0xcc>)
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	3310      	adds	r3, #16
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003e52:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <SYSVIEW_AddTask+0xc4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3301      	adds	r3, #1
 8003e58:	4a08      	ldr	r2, [pc, #32]	; (8003e7c <SYSVIEW_AddTask+0xc4>)
 8003e5a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f93a 	bl	80040e0 <SYSVIEW_SendTaskInfo>
 8003e6c:	e000      	b.n	8003e70 <SYSVIEW_AddTask+0xb8>
    return;
 8003e6e:	bf00      	nop

}
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	08005f28 	.word	0x08005f28
 8003e7c:	20012e64 	.word	0x20012e64
 8003e80:	08005f30 	.word	0x08005f30
 8003e84:	20012dc4 	.word	0x20012dc4

08003e88 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003e96:	2205      	movs	r2, #5
 8003e98:	4930      	ldr	r1, [pc, #192]	; (8003f5c <SYSVIEW_UpdateTask+0xd4>)
 8003e9a:	68b8      	ldr	r0, [r7, #8]
 8003e9c:	f001 fbae 	bl	80055fc <memcmp>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d056      	beq.n	8003f54 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	e00d      	b.n	8003ec8 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8003eac:	492c      	ldr	r1, [pc, #176]	; (8003f60 <SYSVIEW_UpdateTask+0xd8>)
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d008      	beq.n	8003ed4 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <SYSVIEW_UpdateTask+0xdc>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d3ec      	bcc.n	8003eac <SYSVIEW_UpdateTask+0x24>
 8003ed2:	e000      	b.n	8003ed6 <SYSVIEW_UpdateTask+0x4e>
      break;
 8003ed4:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8003ed6:	4b23      	ldr	r3, [pc, #140]	; (8003f64 <SYSVIEW_UpdateTask+0xdc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d230      	bcs.n	8003f42 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8003ee0:	491f      	ldr	r1, [pc, #124]	; (8003f60 <SYSVIEW_UpdateTask+0xd8>)
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	3304      	adds	r3, #4
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8003ef4:	491a      	ldr	r1, [pc, #104]	; (8003f60 <SYSVIEW_UpdateTask+0xd8>)
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	3308      	adds	r3, #8
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8003f08:	4915      	ldr	r1, [pc, #84]	; (8003f60 <SYSVIEW_UpdateTask+0xd8>)
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	330c      	adds	r3, #12
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8003f1c:	4910      	ldr	r1, [pc, #64]	; (8003f60 <SYSVIEW_UpdateTask+0xd8>)
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4613      	mov	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	3310      	adds	r3, #16
 8003f2c:	6a3a      	ldr	r2, [r7, #32]
 8003f2e:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f8d0 	bl	80040e0 <SYSVIEW_SendTaskInfo>
 8003f40:	e009      	b.n	8003f56 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff ff33 	bl	8003db8 <SYSVIEW_AddTask>
 8003f52:	e000      	b.n	8003f56 <SYSVIEW_UpdateTask+0xce>
    return;
 8003f54:	bf00      	nop
  }
}
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	08005f28 	.word	0x08005f28
 8003f60:	20012dc4 	.word	0x20012dc4
 8003f64:	20012e64 	.word	0x20012e64

08003f68 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8003f70:	4b59      	ldr	r3, [pc, #356]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80ab 	beq.w	80040d0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e00d      	b.n	8003f9c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8003f80:	4956      	ldr	r1, [pc, #344]	; (80040dc <SYSVIEW_DeleteTask+0x174>)
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d008      	beq.n	8003fa8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	4b4e      	ldr	r3, [pc, #312]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d3ec      	bcc.n	8003f80 <SYSVIEW_DeleteTask+0x18>
 8003fa6:	e000      	b.n	8003faa <SYSVIEW_DeleteTask+0x42>
      break;
 8003fa8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8003faa:	4b4b      	ldr	r3, [pc, #300]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d111      	bne.n	8003fda <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4a46      	ldr	r2, [pc, #280]	; (80040dc <SYSVIEW_DeleteTask+0x174>)
 8003fc2:	4413      	add	r3, r2
 8003fc4:	2214      	movs	r2, #20
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 fb31 	bl	8005630 <memset>
    _NumTasks--;
 8003fce:	4b42      	ldr	r3, [pc, #264]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	4a40      	ldr	r2, [pc, #256]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	e07b      	b.n	80040d2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8003fda:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d276      	bcs.n	80040d2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8003fe4:	4b3c      	ldr	r3, [pc, #240]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	1e5a      	subs	r2, r3, #1
 8003fea:	493c      	ldr	r1, [pc, #240]	; (80040dc <SYSVIEW_DeleteTask+0x174>)
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	6819      	ldr	r1, [r3, #0]
 8003ff8:	4838      	ldr	r0, [pc, #224]	; (80040dc <SYSVIEW_DeleteTask+0x174>)
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4403      	add	r3, r0
 8004006:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004008:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	1e5a      	subs	r2, r3, #1
 800400e:	4933      	ldr	r1, [pc, #204]	; (80040dc <SYSVIEW_DeleteTask+0x174>)
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	3304      	adds	r3, #4
 800401c:	6819      	ldr	r1, [r3, #0]
 800401e:	482f      	ldr	r0, [pc, #188]	; (80040dc <SYSVIEW_DeleteTask+0x174>)
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4403      	add	r3, r0
 800402c:	3304      	adds	r3, #4
 800402e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004030:	4b29      	ldr	r3, [pc, #164]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	1e5a      	subs	r2, r3, #1
 8004036:	4929      	ldr	r1, [pc, #164]	; (80040dc <SYSVIEW_DeleteTask+0x174>)
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	3308      	adds	r3, #8
 8004044:	6819      	ldr	r1, [r3, #0]
 8004046:	4825      	ldr	r0, [pc, #148]	; (80040dc <SYSVIEW_DeleteTask+0x174>)
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4403      	add	r3, r0
 8004054:	3308      	adds	r3, #8
 8004056:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004058:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	1e5a      	subs	r2, r3, #1
 800405e:	491f      	ldr	r1, [pc, #124]	; (80040dc <SYSVIEW_DeleteTask+0x174>)
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	330c      	adds	r3, #12
 800406c:	6819      	ldr	r1, [r3, #0]
 800406e:	481b      	ldr	r0, [pc, #108]	; (80040dc <SYSVIEW_DeleteTask+0x174>)
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4613      	mov	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4403      	add	r3, r0
 800407c:	330c      	adds	r3, #12
 800407e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004080:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	1e5a      	subs	r2, r3, #1
 8004086:	4915      	ldr	r1, [pc, #84]	; (80040dc <SYSVIEW_DeleteTask+0x174>)
 8004088:	4613      	mov	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	3310      	adds	r3, #16
 8004094:	6819      	ldr	r1, [r3, #0]
 8004096:	4811      	ldr	r0, [pc, #68]	; (80040dc <SYSVIEW_DeleteTask+0x174>)
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4403      	add	r3, r0
 80040a4:	3310      	adds	r3, #16
 80040a6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	1e5a      	subs	r2, r3, #1
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4a09      	ldr	r2, [pc, #36]	; (80040dc <SYSVIEW_DeleteTask+0x174>)
 80040b8:	4413      	add	r3, r2
 80040ba:	2214      	movs	r2, #20
 80040bc:	2100      	movs	r1, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 fab6 	bl	8005630 <memset>
    _NumTasks--;
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3b01      	subs	r3, #1
 80040ca:	4a03      	ldr	r2, [pc, #12]	; (80040d8 <SYSVIEW_DeleteTask+0x170>)
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e000      	b.n	80040d2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80040d0:	bf00      	nop
  }
}
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20012e64 	.word	0x20012e64
 80040dc:	20012dc4 	.word	0x20012dc4

080040e0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	; 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80040ee:	f107 0314 	add.w	r3, r7, #20
 80040f2:	2214      	movs	r2, #20
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 fa9a 	bl	8005630 <memset>
  TaskInfo.TaskID     = TaskID;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004110:	f107 0314 	add.w	r3, r7, #20
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fe21 	bl	8004d5c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800411a:	bf00      	nop
 800411c:	3728      	adds	r7, #40	; 0x28
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800412a:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <USART2_IRQHandler+0x80>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d011      	beq.n	800415e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800413a:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <USART2_IRQHandler+0x84>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f003 030b 	and.w	r3, r3, #11
 8004148:	2b00      	cmp	r3, #0
 800414a:	d108      	bne.n	800415e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800414c:	4b17      	ldr	r3, [pc, #92]	; (80041ac <USART2_IRQHandler+0x88>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d004      	beq.n	800415e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004154:	4b15      	ldr	r3, [pc, #84]	; (80041ac <USART2_IRQHandler+0x88>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	79fa      	ldrb	r2, [r7, #7]
 800415a:	4610      	mov	r0, r2
 800415c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01a      	beq.n	800419e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004168:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <USART2_IRQHandler+0x8c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d015      	beq.n	800419c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004170:	4b0f      	ldr	r3, [pc, #60]	; (80041b0 <USART2_IRQHandler+0x8c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	1dfa      	adds	r2, r7, #7
 8004176:	4610      	mov	r0, r2
 8004178:	4798      	blx	r3
 800417a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004182:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <USART2_IRQHandler+0x90>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a0b      	ldr	r2, [pc, #44]	; (80041b4 <USART2_IRQHandler+0x90>)
 8004188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	e006      	b.n	800419e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004190:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <USART2_IRQHandler+0x80>)
 8004192:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004194:	79fa      	ldrb	r2, [r7, #7]
 8004196:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <USART2_IRQHandler+0x84>)
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e000      	b.n	800419e <USART2_IRQHandler+0x7a>
      return;
 800419c:	bf00      	nop
    }
  }
}
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	40004400 	.word	0x40004400
 80041a8:	40004404 	.word	0x40004404
 80041ac:	20012e68 	.word	0x20012e68
 80041b0:	20012e6c 	.word	0x20012e6c
 80041b4:	4000440c 	.word	0x4000440c

080041b8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80041bc:	4b05      	ldr	r3, [pc, #20]	; (80041d4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a04      	ldr	r2, [pc, #16]	; (80041d4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80041c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041c6:	6013      	str	r3, [r2, #0]
}
 80041c8:	bf00      	nop
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	4000440c 	.word	0x4000440c

080041d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80041de:	4b24      	ldr	r3, [pc, #144]	; (8004270 <_DoInit+0x98>)
 80041e0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2203      	movs	r2, #3
 80041e6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2203      	movs	r2, #3
 80041ec:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a20      	ldr	r2, [pc, #128]	; (8004274 <_DoInit+0x9c>)
 80041f2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a20      	ldr	r2, [pc, #128]	; (8004278 <_DoInit+0xa0>)
 80041f8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004200:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a17      	ldr	r2, [pc, #92]	; (8004274 <_DoInit+0x9c>)
 8004218:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a17      	ldr	r2, [pc, #92]	; (800427c <_DoInit+0xa4>)
 800421e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2210      	movs	r2, #16
 8004224:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3307      	adds	r3, #7
 800423c:	4a10      	ldr	r2, [pc, #64]	; (8004280 <_DoInit+0xa8>)
 800423e:	6810      	ldr	r0, [r2, #0]
 8004240:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004242:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a0e      	ldr	r2, [pc, #56]	; (8004284 <_DoInit+0xac>)
 800424a:	6810      	ldr	r0, [r2, #0]
 800424c:	6018      	str	r0, [r3, #0]
 800424e:	8891      	ldrh	r1, [r2, #4]
 8004250:	7992      	ldrb	r2, [r2, #6]
 8004252:	8099      	strh	r1, [r3, #4]
 8004254:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004256:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004260:	f3bf 8f5f 	dmb	sy
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	200133f8 	.word	0x200133f8
 8004274:	08005f80 	.word	0x08005f80
 8004278:	20012e70 	.word	0x20012e70
 800427c:	20013270 	.word	0x20013270
 8004280:	08005f8c 	.word	0x08005f8c
 8004284:	08005f90 	.word	0x08005f90

08004288 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b08c      	sub	sp, #48	; 0x30
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004294:	4b3e      	ldr	r3, [pc, #248]	; (8004390 <SEGGER_RTT_ReadNoLock+0x108>)
 8004296:	623b      	str	r3, [r7, #32]
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <SEGGER_RTT_ReadNoLock+0x1e>
 80042a2:	f7ff ff99 	bl	80041d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4613      	mov	r3, r2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4413      	add	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	3360      	adds	r3, #96	; 0x60
 80042b2:	4a37      	ldr	r2, [pc, #220]	; (8004390 <SEGGER_RTT_ReadNoLock+0x108>)
 80042b4:	4413      	add	r3, r2
 80042b6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80042c8:	2300      	movs	r3, #0
 80042ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80042cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d92b      	bls.n	800432c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4293      	cmp	r3, r2
 80042e4:	bf28      	it	cs
 80042e6:	4613      	movcs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f0:	4413      	add	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	6939      	ldr	r1, [r7, #16]
 80042f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042fa:	f001 f98e 	bl	800561a <memcpy>
    NumBytesRead += NumBytesRem;
 80042fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	4413      	add	r3, r2
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	4413      	add	r3, r2
 800430c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	4413      	add	r3, r2
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004324:	429a      	cmp	r2, r3
 8004326:	d101      	bne.n	800432c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004328:	2300      	movs	r3, #0
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4293      	cmp	r3, r2
 800433a:	bf28      	it	cs
 800433c:	4613      	movcs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d019      	beq.n	800437a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	4413      	add	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	6939      	ldr	r1, [r7, #16]
 8004354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004356:	f001 f960 	bl	800561a <memcpy>
    NumBytesRead += NumBytesRem;
 800435a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	4413      	add	r3, r2
 8004360:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	4413      	add	r3, r2
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004372:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	4413      	add	r3, r2
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004384:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004388:	4618      	mov	r0, r3
 800438a:	3730      	adds	r7, #48	; 0x30
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	200133f8 	.word	0x200133f8

08004394 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004394:	b480      	push	{r7}
 8004396:	b087      	sub	sp, #28
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80043a4:	e002      	b.n	80043ac <_EncodeStr+0x18>
    Len++;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	3301      	adds	r3, #1
 80043aa:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4413      	add	r3, r2
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f6      	bne.n	80043a6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d901      	bls.n	80043c4 <_EncodeStr+0x30>
    Len = Limit;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	2bfe      	cmp	r3, #254	; 0xfe
 80043c8:	d806      	bhi.n	80043d8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	60fa      	str	r2, [r7, #12]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]
 80043d6:	e011      	b.n	80043fc <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	60fa      	str	r2, [r7, #12]
 80043de:	22ff      	movs	r2, #255	; 0xff
 80043e0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	60fa      	str	r2, [r7, #12]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	b2d2      	uxtb	r2, r2
 80043ec:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	0a19      	lsrs	r1, r3, #8
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	60fa      	str	r2, [r7, #12]
 80043f8:	b2ca      	uxtb	r2, r1
 80043fa:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004400:	e00a      	b.n	8004418 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	1c53      	adds	r3, r2, #1
 8004406:	60bb      	str	r3, [r7, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	1c59      	adds	r1, r3, #1
 800440c:	60f9      	str	r1, [r7, #12]
 800440e:	7812      	ldrb	r2, [r2, #0]
 8004410:	701a      	strb	r2, [r3, #0]
    n++;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	3301      	adds	r3, #1
 8004416:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	429a      	cmp	r2, r3
 800441e:	d3f0      	bcc.n	8004402 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004420:	68fb      	ldr	r3, [r7, #12]
}
 8004422:	4618      	mov	r0, r3
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800442e:	b480      	push	{r7}
 8004430:	b083      	sub	sp, #12
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	3304      	adds	r3, #4
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800444e:	4b33      	ldr	r3, [pc, #204]	; (800451c <_HandleIncomingPacket+0xd4>)
 8004450:	7e1b      	ldrb	r3, [r3, #24]
 8004452:	4618      	mov	r0, r3
 8004454:	1cfb      	adds	r3, r7, #3
 8004456:	2201      	movs	r2, #1
 8004458:	4619      	mov	r1, r3
 800445a:	f7ff ff15 	bl	8004288 <SEGGER_RTT_ReadNoLock>
 800445e:	4603      	mov	r3, r0
 8004460:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	dd4d      	ble.n	8004504 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	2b05      	cmp	r3, #5
 800446c:	d022      	beq.n	80044b4 <_HandleIncomingPacket+0x6c>
 800446e:	2b05      	cmp	r3, #5
 8004470:	dc0b      	bgt.n	800448a <_HandleIncomingPacket+0x42>
 8004472:	2b02      	cmp	r3, #2
 8004474:	d015      	beq.n	80044a2 <_HandleIncomingPacket+0x5a>
 8004476:	2b02      	cmp	r3, #2
 8004478:	dc02      	bgt.n	8004480 <_HandleIncomingPacket+0x38>
 800447a:	2b01      	cmp	r3, #1
 800447c:	d00e      	beq.n	800449c <_HandleIncomingPacket+0x54>
 800447e:	e034      	b.n	80044ea <_HandleIncomingPacket+0xa2>
 8004480:	2b03      	cmp	r3, #3
 8004482:	d011      	beq.n	80044a8 <_HandleIncomingPacket+0x60>
 8004484:	2b04      	cmp	r3, #4
 8004486:	d012      	beq.n	80044ae <_HandleIncomingPacket+0x66>
 8004488:	e02f      	b.n	80044ea <_HandleIncomingPacket+0xa2>
 800448a:	2b07      	cmp	r3, #7
 800448c:	d018      	beq.n	80044c0 <_HandleIncomingPacket+0x78>
 800448e:	2b07      	cmp	r3, #7
 8004490:	db13      	blt.n	80044ba <_HandleIncomingPacket+0x72>
 8004492:	2b7f      	cmp	r3, #127	; 0x7f
 8004494:	d038      	beq.n	8004508 <_HandleIncomingPacket+0xc0>
 8004496:	2b80      	cmp	r3, #128	; 0x80
 8004498:	d015      	beq.n	80044c6 <_HandleIncomingPacket+0x7e>
 800449a:	e026      	b.n	80044ea <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800449c:	f000 fae2 	bl	8004a64 <SEGGER_SYSVIEW_Start>
      break;
 80044a0:	e037      	b.n	8004512 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80044a2:	f000 fb9b 	bl	8004bdc <SEGGER_SYSVIEW_Stop>
      break;
 80044a6:	e034      	b.n	8004512 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80044a8:	f000 fd50 	bl	8004f4c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80044ac:	e031      	b.n	8004512 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80044ae:	f000 fd39 	bl	8004f24 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80044b2:	e02e      	b.n	8004512 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80044b4:	f000 fbb8 	bl	8004c28 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80044b8:	e02b      	b.n	8004512 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80044ba:	f000 ffe1 	bl	8005480 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80044be:	e028      	b.n	8004512 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80044c0:	f000 ffc0 	bl	8005444 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80044c4:	e025      	b.n	8004512 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044c6:	4b15      	ldr	r3, [pc, #84]	; (800451c <_HandleIncomingPacket+0xd4>)
 80044c8:	7e1b      	ldrb	r3, [r3, #24]
 80044ca:	4618      	mov	r0, r3
 80044cc:	1cfb      	adds	r3, r7, #3
 80044ce:	2201      	movs	r2, #1
 80044d0:	4619      	mov	r1, r3
 80044d2:	f7ff fed9 	bl	8004288 <SEGGER_RTT_ReadNoLock>
 80044d6:	4603      	mov	r3, r0
 80044d8:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	dd15      	ble.n	800450c <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 ff2e 	bl	8005344 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80044e8:	e010      	b.n	800450c <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80044ea:	78fb      	ldrb	r3, [r7, #3]
 80044ec:	b25b      	sxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	da0e      	bge.n	8004510 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <_HandleIncomingPacket+0xd4>)
 80044f4:	7e1b      	ldrb	r3, [r3, #24]
 80044f6:	4618      	mov	r0, r3
 80044f8:	1cfb      	adds	r3, r7, #3
 80044fa:	2201      	movs	r2, #1
 80044fc:	4619      	mov	r1, r3
 80044fe:	f7ff fec3 	bl	8004288 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004502:	e005      	b.n	8004510 <_HandleIncomingPacket+0xc8>
    }
  }
 8004504:	bf00      	nop
 8004506:	e004      	b.n	8004512 <_HandleIncomingPacket+0xca>
      break;
 8004508:	bf00      	nop
 800450a:	e002      	b.n	8004512 <_HandleIncomingPacket+0xca>
      break;
 800450c:	bf00      	nop
 800450e:	e000      	b.n	8004512 <_HandleIncomingPacket+0xca>
      break;
 8004510:	bf00      	nop
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20013280 	.word	0x20013280

08004520 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b08c      	sub	sp, #48	; 0x30
 8004524:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004526:	2301      	movs	r3, #1
 8004528:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800452a:	1d3b      	adds	r3, r7, #4
 800452c:	3301      	adds	r3, #1
 800452e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004534:	4b32      	ldr	r3, [pc, #200]	; (8004600 <_TrySendOverflowPacket+0xe0>)
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
 800453a:	e00b      	b.n	8004554 <_TrySendOverflowPacket+0x34>
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	b2da      	uxtb	r2, r3
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	1c59      	adds	r1, r3, #1
 8004544:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004546:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	09db      	lsrs	r3, r3, #7
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	2b7f      	cmp	r3, #127	; 0x7f
 8004558:	d8f0      	bhi.n	800453c <_TrySendOverflowPacket+0x1c>
 800455a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004568:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800456a:	4b26      	ldr	r3, [pc, #152]	; (8004604 <_TrySendOverflowPacket+0xe4>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004570:	4b23      	ldr	r3, [pc, #140]	; (8004600 <_TrySendOverflowPacket+0xe0>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	623b      	str	r3, [r7, #32]
 8004582:	e00b      	b.n	800459c <_TrySendOverflowPacket+0x7c>
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	b2da      	uxtb	r2, r3
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	1c59      	adds	r1, r3, #1
 800458c:	6279      	str	r1, [r7, #36]	; 0x24
 800458e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	09db      	lsrs	r3, r3, #7
 800459a:	623b      	str	r3, [r7, #32]
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	2b7f      	cmp	r3, #127	; 0x7f
 80045a0:	d8f0      	bhi.n	8004584 <_TrySendOverflowPacket+0x64>
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	627a      	str	r2, [r7, #36]	; 0x24
 80045a8:	6a3a      	ldr	r2, [r7, #32]
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80045b2:	4b13      	ldr	r3, [pc, #76]	; (8004600 <_TrySendOverflowPacket+0xe0>)
 80045b4:	785b      	ldrb	r3, [r3, #1]
 80045b6:	4618      	mov	r0, r3
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	1d3b      	adds	r3, r7, #4
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	1d3b      	adds	r3, r7, #4
 80045c2:	4619      	mov	r1, r3
 80045c4:	f7fb fe04 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80045c8:	4603      	mov	r3, r0
 80045ca:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80045cc:	f7ff fdf4 	bl	80041b8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80045d6:	4a0a      	ldr	r2, [pc, #40]	; (8004600 <_TrySendOverflowPacket+0xe0>)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80045dc:	4b08      	ldr	r3, [pc, #32]	; (8004600 <_TrySendOverflowPacket+0xe0>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <_TrySendOverflowPacket+0xe0>)
 80045e6:	701a      	strb	r2, [r3, #0]
 80045e8:	e004      	b.n	80045f4 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80045ea:	4b05      	ldr	r3, [pc, #20]	; (8004600 <_TrySendOverflowPacket+0xe0>)
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	3301      	adds	r3, #1
 80045f0:	4a03      	ldr	r2, [pc, #12]	; (8004600 <_TrySendOverflowPacket+0xe0>)
 80045f2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80045f4:	693b      	ldr	r3, [r7, #16]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3730      	adds	r7, #48	; 0x30
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20013280 	.word	0x20013280
 8004604:	e0001004 	.word	0xe0001004

08004608 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004608:	b580      	push	{r7, lr}
 800460a:	b08a      	sub	sp, #40	; 0x28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004614:	4b6d      	ldr	r3, [pc, #436]	; (80047cc <_SendPacket+0x1c4>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d010      	beq.n	800463e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800461c:	4b6b      	ldr	r3, [pc, #428]	; (80047cc <_SendPacket+0x1c4>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80a5 	beq.w	8004770 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004626:	4b69      	ldr	r3, [pc, #420]	; (80047cc <_SendPacket+0x1c4>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d109      	bne.n	8004642 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800462e:	f7ff ff77 	bl	8004520 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004632:	4b66      	ldr	r3, [pc, #408]	; (80047cc <_SendPacket+0x1c4>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b01      	cmp	r3, #1
 8004638:	f040 809c 	bne.w	8004774 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800463c:	e001      	b.n	8004642 <_SendPacket+0x3a>
    goto Send;
 800463e:	bf00      	nop
 8004640:	e000      	b.n	8004644 <_SendPacket+0x3c>
Send:
 8004642:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b1f      	cmp	r3, #31
 8004648:	d809      	bhi.n	800465e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800464a:	4b60      	ldr	r3, [pc, #384]	; (80047cc <_SendPacket+0x1c4>)
 800464c:	69da      	ldr	r2, [r3, #28]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	f040 808d 	bne.w	8004778 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b17      	cmp	r3, #23
 8004662:	d807      	bhi.n	8004674 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3b01      	subs	r3, #1
 8004668:	60fb      	str	r3, [r7, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	e03d      	b.n	80046f0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	2b7f      	cmp	r3, #127	; 0x7f
 8004680:	d912      	bls.n	80046a8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	09da      	lsrs	r2, r3, #7
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3b01      	subs	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	3a01      	subs	r2, #1
 800469a:	60fa      	str	r2, [r7, #12]
 800469c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	e006      	b.n	80046b6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b7f      	cmp	r3, #127	; 0x7f
 80046ba:	d912      	bls.n	80046e2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	09da      	lsrs	r2, r3, #7
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	3a01      	subs	r2, #1
 80046d4:	60fa      	str	r2, [r7, #12]
 80046d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	701a      	strb	r2, [r3, #0]
 80046e0:	e006      	b.n	80046f0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80046f0:	4b37      	ldr	r3, [pc, #220]	; (80047d0 <_SendPacket+0x1c8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80046f6:	4b35      	ldr	r3, [pc, #212]	; (80047cc <_SendPacket+0x1c4>)
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	627b      	str	r3, [r7, #36]	; 0x24
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	623b      	str	r3, [r7, #32]
 8004708:	e00b      	b.n	8004722 <_SendPacket+0x11a>
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	b2da      	uxtb	r2, r3
 800470e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004710:	1c59      	adds	r1, r3, #1
 8004712:	6279      	str	r1, [r7, #36]	; 0x24
 8004714:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	09db      	lsrs	r3, r3, #7
 8004720:	623b      	str	r3, [r7, #32]
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	2b7f      	cmp	r3, #127	; 0x7f
 8004726:	d8f0      	bhi.n	800470a <_SendPacket+0x102>
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	1c5a      	adds	r2, r3, #1
 800472c:	627a      	str	r2, [r7, #36]	; 0x24
 800472e:	6a3a      	ldr	r2, [r7, #32]
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004738:	4b24      	ldr	r3, [pc, #144]	; (80047cc <_SendPacket+0x1c4>)
 800473a:	785b      	ldrb	r3, [r3, #1]
 800473c:	4618      	mov	r0, r3
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	461a      	mov	r2, r3
 8004746:	68f9      	ldr	r1, [r7, #12]
 8004748:	f7fb fd42 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800474c:	4603      	mov	r3, r0
 800474e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004750:	f7ff fd32 	bl	80041b8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800475a:	4a1c      	ldr	r2, [pc, #112]	; (80047cc <_SendPacket+0x1c4>)
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	60d3      	str	r3, [r2, #12]
 8004760:	e00b      	b.n	800477a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004762:	4b1a      	ldr	r3, [pc, #104]	; (80047cc <_SendPacket+0x1c4>)
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	3301      	adds	r3, #1
 8004768:	b2da      	uxtb	r2, r3
 800476a:	4b18      	ldr	r3, [pc, #96]	; (80047cc <_SendPacket+0x1c4>)
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	e004      	b.n	800477a <_SendPacket+0x172>
    goto SendDone;
 8004770:	bf00      	nop
 8004772:	e002      	b.n	800477a <_SendPacket+0x172>
      goto SendDone;
 8004774:	bf00      	nop
 8004776:	e000      	b.n	800477a <_SendPacket+0x172>
      goto SendDone;
 8004778:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800477a:	4b14      	ldr	r3, [pc, #80]	; (80047cc <_SendPacket+0x1c4>)
 800477c:	7e1b      	ldrb	r3, [r3, #24]
 800477e:	4619      	mov	r1, r3
 8004780:	4a14      	ldr	r2, [pc, #80]	; (80047d4 <_SendPacket+0x1cc>)
 8004782:	460b      	mov	r3, r1
 8004784:	005b      	lsls	r3, r3, #1
 8004786:	440b      	add	r3, r1
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	4413      	add	r3, r2
 800478c:	336c      	adds	r3, #108	; 0x6c
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4b0e      	ldr	r3, [pc, #56]	; (80047cc <_SendPacket+0x1c4>)
 8004792:	7e1b      	ldrb	r3, [r3, #24]
 8004794:	4618      	mov	r0, r3
 8004796:	490f      	ldr	r1, [pc, #60]	; (80047d4 <_SendPacket+0x1cc>)
 8004798:	4603      	mov	r3, r0
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	4403      	add	r3, r0
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	440b      	add	r3, r1
 80047a2:	3370      	adds	r3, #112	; 0x70
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d00b      	beq.n	80047c2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80047aa:	4b08      	ldr	r3, [pc, #32]	; (80047cc <_SendPacket+0x1c4>)
 80047ac:	789b      	ldrb	r3, [r3, #2]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d107      	bne.n	80047c2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <_SendPacket+0x1c4>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80047b8:	f7ff fe46 	bl	8004448 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80047bc:	4b03      	ldr	r3, [pc, #12]	; (80047cc <_SendPacket+0x1c4>)
 80047be:	2200      	movs	r2, #0
 80047c0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80047c2:	bf00      	nop
 80047c4:	3728      	adds	r7, #40	; 0x28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20013280 	.word	0x20013280
 80047d0:	e0001004 	.word	0xe0001004
 80047d4:	200133f8 	.word	0x200133f8

080047d8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80047e0:	f3ef 8311 	mrs	r3, BASEPRI
 80047e4:	f04f 0120 	mov.w	r1, #32
 80047e8:	f381 8811 	msr	BASEPRI, r1
 80047ec:	60fb      	str	r3, [r7, #12]
 80047ee:	4808      	ldr	r0, [pc, #32]	; (8004810 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80047f0:	f7ff fe1d 	bl	800442e <_PreparePacket>
 80047f4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	68b8      	ldr	r0, [r7, #8]
 80047fc:	f7ff ff04 	bl	8004608 <_SendPacket>
  RECORD_END();
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f383 8811 	msr	BASEPRI, r3
}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	200132b0 	.word	0x200132b0

08004814 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800481e:	f3ef 8311 	mrs	r3, BASEPRI
 8004822:	f04f 0120 	mov.w	r1, #32
 8004826:	f381 8811 	msr	BASEPRI, r1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	4816      	ldr	r0, [pc, #88]	; (8004888 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800482e:	f7ff fdfe 	bl	800442e <_PreparePacket>
 8004832:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	61bb      	str	r3, [r7, #24]
 8004840:	e00b      	b.n	800485a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	1c59      	adds	r1, r3, #1
 800484a:	61f9      	str	r1, [r7, #28]
 800484c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	09db      	lsrs	r3, r3, #7
 8004858:	61bb      	str	r3, [r7, #24]
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b7f      	cmp	r3, #127	; 0x7f
 800485e:	d8f0      	bhi.n	8004842 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	61fa      	str	r2, [r7, #28]
 8004866:	69ba      	ldr	r2, [r7, #24]
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	68f9      	ldr	r1, [r7, #12]
 8004874:	6938      	ldr	r0, [r7, #16]
 8004876:	f7ff fec7 	bl	8004608 <_SendPacket>
  RECORD_END();
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f383 8811 	msr	BASEPRI, r3
}
 8004880:	bf00      	nop
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	200132b0 	.word	0x200132b0

0800488c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800488c:	b580      	push	{r7, lr}
 800488e:	b08c      	sub	sp, #48	; 0x30
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004898:	f3ef 8311 	mrs	r3, BASEPRI
 800489c:	f04f 0120 	mov.w	r1, #32
 80048a0:	f381 8811 	msr	BASEPRI, r1
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	4825      	ldr	r0, [pc, #148]	; (800493c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80048a8:	f7ff fdc1 	bl	800442e <_PreparePacket>
 80048ac:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ba:	e00b      	b.n	80048d4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	1c59      	adds	r1, r3, #1
 80048c4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80048c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	09db      	lsrs	r3, r3, #7
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d6:	2b7f      	cmp	r3, #127	; 0x7f
 80048d8:	d8f0      	bhi.n	80048bc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80048da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048dc:	1c5a      	adds	r2, r3, #1
 80048de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	623b      	str	r3, [r7, #32]
 80048f2:	e00b      	b.n	800490c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	1c59      	adds	r1, r3, #1
 80048fc:	6279      	str	r1, [r7, #36]	; 0x24
 80048fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	09db      	lsrs	r3, r3, #7
 800490a:	623b      	str	r3, [r7, #32]
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	2b7f      	cmp	r3, #127	; 0x7f
 8004910:	d8f0      	bhi.n	80048f4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	627a      	str	r2, [r7, #36]	; 0x24
 8004918:	6a3a      	ldr	r2, [r7, #32]
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	6979      	ldr	r1, [r7, #20]
 8004926:	69b8      	ldr	r0, [r7, #24]
 8004928:	f7ff fe6e 	bl	8004608 <_SendPacket>
  RECORD_END();
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	f383 8811 	msr	BASEPRI, r3
}
 8004932:	bf00      	nop
 8004934:	3730      	adds	r7, #48	; 0x30
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	200132b0 	.word	0x200132b0

08004940 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004940:	b580      	push	{r7, lr}
 8004942:	b090      	sub	sp, #64	; 0x40
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800494e:	f3ef 8311 	mrs	r3, BASEPRI
 8004952:	f04f 0120 	mov.w	r1, #32
 8004956:	f381 8811 	msr	BASEPRI, r1
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	4840      	ldr	r0, [pc, #256]	; (8004a60 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800495e:	f7ff fd66 	bl	800442e <_PreparePacket>
 8004962:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004970:	e00b      	b.n	800498a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	b2da      	uxtb	r2, r3
 8004976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004978:	1c59      	adds	r1, r3, #1
 800497a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800497c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	701a      	strb	r2, [r3, #0]
 8004984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004986:	09db      	lsrs	r3, r3, #7
 8004988:	63bb      	str	r3, [r7, #56]	; 0x38
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	2b7f      	cmp	r3, #127	; 0x7f
 800498e:	d8f0      	bhi.n	8004972 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004998:	b2d2      	uxtb	r2, r2
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	637b      	str	r3, [r7, #52]	; 0x34
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	633b      	str	r3, [r7, #48]	; 0x30
 80049a8:	e00b      	b.n	80049c2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b0:	1c59      	adds	r1, r3, #1
 80049b2:	6379      	str	r1, [r7, #52]	; 0x34
 80049b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	09db      	lsrs	r3, r3, #7
 80049c0:	633b      	str	r3, [r7, #48]	; 0x30
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	2b7f      	cmp	r3, #127	; 0x7f
 80049c6:	d8f0      	bhi.n	80049aa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	637a      	str	r2, [r7, #52]	; 0x34
 80049ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
 80049e0:	e00b      	b.n	80049fa <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80049e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	1c59      	adds	r1, r3, #1
 80049ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80049ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	09db      	lsrs	r3, r3, #7
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	2b7f      	cmp	r3, #127	; 0x7f
 80049fe:	d8f0      	bhi.n	80049e2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
 8004a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a16:	623b      	str	r3, [r7, #32]
 8004a18:	e00b      	b.n	8004a32 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	1c59      	adds	r1, r3, #1
 8004a22:	6279      	str	r1, [r7, #36]	; 0x24
 8004a24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	09db      	lsrs	r3, r3, #7
 8004a30:	623b      	str	r3, [r7, #32]
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	2b7f      	cmp	r3, #127	; 0x7f
 8004a36:	d8f0      	bhi.n	8004a1a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	1c5a      	adds	r2, r3, #1
 8004a3c:	627a      	str	r2, [r7, #36]	; 0x24
 8004a3e:	6a3a      	ldr	r2, [r7, #32]
 8004a40:	b2d2      	uxtb	r2, r2
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	6979      	ldr	r1, [r7, #20]
 8004a4c:	69b8      	ldr	r0, [r7, #24]
 8004a4e:	f7ff fddb 	bl	8004608 <_SendPacket>
  RECORD_END();
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	f383 8811 	msr	BASEPRI, r3
}
 8004a58:	bf00      	nop
 8004a5a:	3740      	adds	r7, #64	; 0x40
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	200132b0 	.word	0x200132b0

08004a64 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08c      	sub	sp, #48	; 0x30
 8004a68:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004a6a:	4b59      	ldr	r3, [pc, #356]	; (8004bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004a70:	f3ef 8311 	mrs	r3, BASEPRI
 8004a74:	f04f 0120 	mov.w	r1, #32
 8004a78:	f381 8811 	msr	BASEPRI, r1
 8004a7c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004a7e:	4b54      	ldr	r3, [pc, #336]	; (8004bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a80:	785b      	ldrb	r3, [r3, #1]
 8004a82:	220a      	movs	r2, #10
 8004a84:	4953      	ldr	r1, [pc, #332]	; (8004bd4 <SEGGER_SYSVIEW_Start+0x170>)
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fb fba2 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004a92:	f7ff fb91 	bl	80041b8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004a96:	200a      	movs	r0, #10
 8004a98:	f7ff fe9e 	bl	80047d8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a9c:	f3ef 8311 	mrs	r3, BASEPRI
 8004aa0:	f04f 0120 	mov.w	r1, #32
 8004aa4:	f381 8811 	msr	BASEPRI, r1
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	484b      	ldr	r0, [pc, #300]	; (8004bd8 <SEGGER_SYSVIEW_Start+0x174>)
 8004aac:	f7ff fcbf 	bl	800442e <_PreparePacket>
 8004ab0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aba:	4b45      	ldr	r3, [pc, #276]	; (8004bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ac0:	e00b      	b.n	8004ada <SEGGER_SYSVIEW_Start+0x76>
 8004ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	1c59      	adds	r1, r3, #1
 8004aca:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004acc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	09db      	lsrs	r3, r3, #7
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ade:	d8f0      	bhi.n	8004ac2 <SEGGER_SYSVIEW_Start+0x5e>
 8004ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ae8:	b2d2      	uxtb	r2, r2
 8004aea:	701a      	strb	r2, [r3, #0]
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
 8004af4:	4b36      	ldr	r3, [pc, #216]	; (8004bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	623b      	str	r3, [r7, #32]
 8004afa:	e00b      	b.n	8004b14 <SEGGER_SYSVIEW_Start+0xb0>
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	1c59      	adds	r1, r3, #1
 8004b04:	6279      	str	r1, [r7, #36]	; 0x24
 8004b06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b0a:	b2d2      	uxtb	r2, r2
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	09db      	lsrs	r3, r3, #7
 8004b12:	623b      	str	r3, [r7, #32]
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	2b7f      	cmp	r3, #127	; 0x7f
 8004b18:	d8f0      	bhi.n	8004afc <SEGGER_SYSVIEW_Start+0x98>
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	627a      	str	r2, [r7, #36]	; 0x24
 8004b20:	6a3a      	ldr	r2, [r7, #32]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	61fb      	str	r3, [r7, #28]
 8004b2e:	4b28      	ldr	r3, [pc, #160]	; (8004bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	61bb      	str	r3, [r7, #24]
 8004b34:	e00b      	b.n	8004b4e <SEGGER_SYSVIEW_Start+0xea>
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	1c59      	adds	r1, r3, #1
 8004b3e:	61f9      	str	r1, [r7, #28]
 8004b40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b44:	b2d2      	uxtb	r2, r2
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	09db      	lsrs	r3, r3, #7
 8004b4c:	61bb      	str	r3, [r7, #24]
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b7f      	cmp	r3, #127	; 0x7f
 8004b52:	d8f0      	bhi.n	8004b36 <SEGGER_SYSVIEW_Start+0xd2>
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	61fa      	str	r2, [r7, #28]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	b2d2      	uxtb	r2, r2
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	e00b      	b.n	8004b86 <SEGGER_SYSVIEW_Start+0x122>
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	1c59      	adds	r1, r3, #1
 8004b76:	6179      	str	r1, [r7, #20]
 8004b78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	09db      	lsrs	r3, r3, #7
 8004b84:	613b      	str	r3, [r7, #16]
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b7f      	cmp	r3, #127	; 0x7f
 8004b8a:	d8f0      	bhi.n	8004b6e <SEGGER_SYSVIEW_Start+0x10a>
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	617a      	str	r2, [r7, #20]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004b9c:	2218      	movs	r2, #24
 8004b9e:	6839      	ldr	r1, [r7, #0]
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff fd31 	bl	8004608 <_SendPacket>
      RECORD_END();
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004bac:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <SEGGER_SYSVIEW_Start+0x16c>)
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004bba:	f000 f9c7 	bl	8004f4c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004bbe:	f000 f9b1 	bl	8004f24 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004bc2:	f000 fc5d 	bl	8005480 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004bc6:	bf00      	nop
 8004bc8:	3730      	adds	r7, #48	; 0x30
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20013280 	.word	0x20013280
 8004bd4:	08005fb0 	.word	0x08005fb0
 8004bd8:	200132b0 	.word	0x200132b0

08004bdc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004be2:	f3ef 8311 	mrs	r3, BASEPRI
 8004be6:	f04f 0120 	mov.w	r1, #32
 8004bea:	f381 8811 	msr	BASEPRI, r1
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	480b      	ldr	r0, [pc, #44]	; (8004c20 <SEGGER_SYSVIEW_Stop+0x44>)
 8004bf2:	f7ff fc1c 	bl	800442e <_PreparePacket>
 8004bf6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <SEGGER_SYSVIEW_Stop+0x48>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d007      	beq.n	8004c10 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004c00:	220b      	movs	r2, #11
 8004c02:	6839      	ldr	r1, [r7, #0]
 8004c04:	6838      	ldr	r0, [r7, #0]
 8004c06:	f7ff fcff 	bl	8004608 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <SEGGER_SYSVIEW_Stop+0x48>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f383 8811 	msr	BASEPRI, r3
}
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200132b0 	.word	0x200132b0
 8004c24:	20013280 	.word	0x20013280

08004c28 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08c      	sub	sp, #48	; 0x30
 8004c2c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c32:	f04f 0120 	mov.w	r1, #32
 8004c36:	f381 8811 	msr	BASEPRI, r1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	4845      	ldr	r0, [pc, #276]	; (8004d54 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004c3e:	f7ff fbf6 	bl	800442e <_PreparePacket>
 8004c42:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c4c:	4b42      	ldr	r3, [pc, #264]	; (8004d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c52:	e00b      	b.n	8004c6c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	1c59      	adds	r1, r3, #1
 8004c5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	09db      	lsrs	r3, r3, #7
 8004c6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8004c70:	d8f0      	bhi.n	8004c54 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
 8004c86:	4b34      	ldr	r3, [pc, #208]	; (8004d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	623b      	str	r3, [r7, #32]
 8004c8c:	e00b      	b.n	8004ca6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	1c59      	adds	r1, r3, #1
 8004c96:	6279      	str	r1, [r7, #36]	; 0x24
 8004c98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	09db      	lsrs	r3, r3, #7
 8004ca4:	623b      	str	r3, [r7, #32]
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8004caa:	d8f0      	bhi.n	8004c8e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	627a      	str	r2, [r7, #36]	; 0x24
 8004cb2:	6a3a      	ldr	r2, [r7, #32]
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	61fb      	str	r3, [r7, #28]
 8004cc0:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	e00b      	b.n	8004ce0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	1c59      	adds	r1, r3, #1
 8004cd0:	61f9      	str	r1, [r7, #28]
 8004cd2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	09db      	lsrs	r3, r3, #7
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce4:	d8f0      	bhi.n	8004cc8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	61fa      	str	r2, [r7, #28]
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	617b      	str	r3, [r7, #20]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	e00b      	b.n	8004d18 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	1c59      	adds	r1, r3, #1
 8004d08:	6179      	str	r1, [r7, #20]
 8004d0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	09db      	lsrs	r3, r3, #7
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d1c:	d8f0      	bhi.n	8004d00 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	1c5a      	adds	r2, r3, #1
 8004d22:	617a      	str	r2, [r7, #20]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	701a      	strb	r2, [r3, #0]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004d2e:	2218      	movs	r2, #24
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	68b8      	ldr	r0, [r7, #8]
 8004d34:	f7ff fc68 	bl	8004608 <_SendPacket>
  RECORD_END();
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004d3e:	4b06      	ldr	r3, [pc, #24]	; (8004d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004d46:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	4798      	blx	r3
  }
}
 8004d4c:	bf00      	nop
 8004d4e:	3730      	adds	r7, #48	; 0x30
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	200132b0 	.word	0x200132b0
 8004d58:	20013280 	.word	0x20013280

08004d5c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b092      	sub	sp, #72	; 0x48
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004d64:	f3ef 8311 	mrs	r3, BASEPRI
 8004d68:	f04f 0120 	mov.w	r1, #32
 8004d6c:	f381 8811 	msr	BASEPRI, r1
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	486a      	ldr	r0, [pc, #424]	; (8004f1c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004d74:	f7ff fb5b 	bl	800442e <_PreparePacket>
 8004d78:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	647b      	str	r3, [r7, #68]	; 0x44
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b66      	ldr	r3, [pc, #408]	; (8004f20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d8e:	e00b      	b.n	8004da8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d96:	1c59      	adds	r1, r3, #1
 8004d98:	6479      	str	r1, [r7, #68]	; 0x44
 8004d9a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d9e:	b2d2      	uxtb	r2, r2
 8004da0:	701a      	strb	r2, [r3, #0]
 8004da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da4:	09db      	lsrs	r3, r3, #7
 8004da6:	643b      	str	r3, [r7, #64]	; 0x40
 8004da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004daa:	2b7f      	cmp	r3, #127	; 0x7f
 8004dac:	d8f0      	bhi.n	8004d90 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004db0:	1c5a      	adds	r2, r3, #1
 8004db2:	647a      	str	r2, [r7, #68]	; 0x44
 8004db4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004db6:	b2d2      	uxtb	r2, r2
 8004db8:	701a      	strb	r2, [r3, #0]
 8004dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dc8:	e00b      	b.n	8004de2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd0:	1c59      	adds	r1, r3, #1
 8004dd2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	09db      	lsrs	r3, r3, #7
 8004de0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	2b7f      	cmp	r3, #127	; 0x7f
 8004de6:	d8f0      	bhi.n	8004dca <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	701a      	strb	r2, [r3, #0]
 8004df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	4619      	mov	r1, r3
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f7ff fac7 	bl	8004394 <_EncodeStr>
 8004e06:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004e08:	2209      	movs	r2, #9
 8004e0a:	68f9      	ldr	r1, [r7, #12]
 8004e0c:	6938      	ldr	r0, [r7, #16]
 8004e0e:	f7ff fbfb 	bl	8004608 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b40      	ldr	r3, [pc, #256]	; (8004f20 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	633b      	str	r3, [r7, #48]	; 0x30
 8004e26:	e00b      	b.n	8004e40 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2e:	1c59      	adds	r1, r3, #1
 8004e30:	6379      	str	r1, [r7, #52]	; 0x34
 8004e32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e36:	b2d2      	uxtb	r2, r2
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	09db      	lsrs	r3, r3, #7
 8004e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e42:	2b7f      	cmp	r3, #127	; 0x7f
 8004e44:	d8f0      	bhi.n	8004e28 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	637a      	str	r2, [r7, #52]	; 0x34
 8004e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e60:	e00b      	b.n	8004e7a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	1c59      	adds	r1, r3, #1
 8004e6a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	09db      	lsrs	r3, r3, #7
 8004e78:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e7e:	d8f0      	bhi.n	8004e62 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e88:	b2d2      	uxtb	r2, r2
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	623b      	str	r3, [r7, #32]
 8004e9a:	e00b      	b.n	8004eb4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	1c59      	adds	r1, r3, #1
 8004ea4:	6279      	str	r1, [r7, #36]	; 0x24
 8004ea6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	09db      	lsrs	r3, r3, #7
 8004eb2:	623b      	str	r3, [r7, #32]
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8004eb8:	d8f0      	bhi.n	8004e9c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	627a      	str	r2, [r7, #36]	; 0x24
 8004ec0:	6a3a      	ldr	r2, [r7, #32]
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61bb      	str	r3, [r7, #24]
 8004ed2:	e00b      	b.n	8004eec <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	1c59      	adds	r1, r3, #1
 8004edc:	61f9      	str	r1, [r7, #28]
 8004ede:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	09db      	lsrs	r3, r3, #7
 8004eea:	61bb      	str	r3, [r7, #24]
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef0:	d8f0      	bhi.n	8004ed4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	61fa      	str	r2, [r7, #28]
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	b2d2      	uxtb	r2, r2
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004f02:	2215      	movs	r2, #21
 8004f04:	68f9      	ldr	r1, [r7, #12]
 8004f06:	6938      	ldr	r0, [r7, #16]
 8004f08:	f7ff fb7e 	bl	8004608 <_SendPacket>
  RECORD_END();
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f383 8811 	msr	BASEPRI, r3
}
 8004f12:	bf00      	nop
 8004f14:	3748      	adds	r7, #72	; 0x48
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	200132b0 	.word	0x200132b0
 8004f20:	20013280 	.word	0x20013280

08004f24 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004f28:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004f30:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004f3a:	4b03      	ldr	r3, [pc, #12]	; (8004f48 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4798      	blx	r3
  }
}
 8004f42:	bf00      	nop
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20013280 	.word	0x20013280

08004f4c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004f4c:	b590      	push	{r4, r7, lr}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004f52:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d019      	beq.n	8004f8e <SEGGER_SYSVIEW_RecordSystime+0x42>
 8004f5a:	4b12      	ldr	r3, [pc, #72]	; (8004fa4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d014      	beq.n	8004f8e <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004f64:	4b0f      	ldr	r3, [pc, #60]	; (8004fa4 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4798      	blx	r3
 8004f6c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004f70:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004f72:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	f04f 0400 	mov.w	r4, #0
 8004f7e:	0013      	movs	r3, r2
 8004f80:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004f82:	461a      	mov	r2, r3
 8004f84:	4601      	mov	r1, r0
 8004f86:	200d      	movs	r0, #13
 8004f88:	f7ff fc80 	bl	800488c <SEGGER_SYSVIEW_RecordU32x2>
 8004f8c:	e005      	b.n	8004f9a <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004f8e:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4619      	mov	r1, r3
 8004f94:	200c      	movs	r0, #12
 8004f96:	f7ff fc3d 	bl	8004814 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd90      	pop	{r4, r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20013280 	.word	0x20013280
 8004fa8:	e0001004 	.word	0xe0001004

08004fac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb6:	f04f 0120 	mov.w	r1, #32
 8004fba:	f381 8811 	msr	BASEPRI, r1
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	4819      	ldr	r0, [pc, #100]	; (8005028 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004fc2:	f7ff fa34 	bl	800442e <_PreparePacket>
 8004fc6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004fcc:	4b17      	ldr	r3, [pc, #92]	; (800502c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	e00b      	b.n	8004ff8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	1c59      	adds	r1, r3, #1
 8004fe8:	6179      	str	r1, [r7, #20]
 8004fea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	09db      	lsrs	r3, r3, #7
 8004ff6:	613b      	str	r3, [r7, #16]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8004ffc:	d8f0      	bhi.n	8004fe0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	617a      	str	r2, [r7, #20]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800500e:	2202      	movs	r2, #2
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	68b8      	ldr	r0, [r7, #8]
 8005014:	f7ff faf8 	bl	8004608 <_SendPacket>
  RECORD_END();
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f383 8811 	msr	BASEPRI, r3
}
 800501e:	bf00      	nop
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	200132b0 	.word	0x200132b0
 800502c:	e000ed04 	.word	0xe000ed04

08005030 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005036:	f3ef 8311 	mrs	r3, BASEPRI
 800503a:	f04f 0120 	mov.w	r1, #32
 800503e:	f381 8811 	msr	BASEPRI, r1
 8005042:	607b      	str	r3, [r7, #4]
 8005044:	4807      	ldr	r0, [pc, #28]	; (8005064 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005046:	f7ff f9f2 	bl	800442e <_PreparePacket>
 800504a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800504c:	2203      	movs	r2, #3
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	6838      	ldr	r0, [r7, #0]
 8005052:	f7ff fad9 	bl	8004608 <_SendPacket>
  RECORD_END();
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f383 8811 	msr	BASEPRI, r3
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	200132b0 	.word	0x200132b0

08005068 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800506e:	f3ef 8311 	mrs	r3, BASEPRI
 8005072:	f04f 0120 	mov.w	r1, #32
 8005076:	f381 8811 	msr	BASEPRI, r1
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	4807      	ldr	r0, [pc, #28]	; (800509c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800507e:	f7ff f9d6 	bl	800442e <_PreparePacket>
 8005082:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005084:	2212      	movs	r2, #18
 8005086:	6839      	ldr	r1, [r7, #0]
 8005088:	6838      	ldr	r0, [r7, #0]
 800508a:	f7ff fabd 	bl	8004608 <_SendPacket>
  RECORD_END();
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f383 8811 	msr	BASEPRI, r3
}
 8005094:	bf00      	nop
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	200132b0 	.word	0x200132b0

080050a0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050a6:	f3ef 8311 	mrs	r3, BASEPRI
 80050aa:	f04f 0120 	mov.w	r1, #32
 80050ae:	f381 8811 	msr	BASEPRI, r1
 80050b2:	607b      	str	r3, [r7, #4]
 80050b4:	4807      	ldr	r0, [pc, #28]	; (80050d4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80050b6:	f7ff f9ba 	bl	800442e <_PreparePacket>
 80050ba:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80050bc:	2211      	movs	r2, #17
 80050be:	6839      	ldr	r1, [r7, #0]
 80050c0:	6838      	ldr	r0, [r7, #0]
 80050c2:	f7ff faa1 	bl	8004608 <_SendPacket>
  RECORD_END();
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f383 8811 	msr	BASEPRI, r3
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	200132b0 	.word	0x200132b0

080050d8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050e0:	f3ef 8311 	mrs	r3, BASEPRI
 80050e4:	f04f 0120 	mov.w	r1, #32
 80050e8:	f381 8811 	msr	BASEPRI, r1
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	4819      	ldr	r0, [pc, #100]	; (8005154 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80050f0:	f7ff f99d 	bl	800442e <_PreparePacket>
 80050f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80050fa:	4b17      	ldr	r3, [pc, #92]	; (8005158 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	61fb      	str	r3, [r7, #28]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	e00b      	b.n	8005126 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	b2da      	uxtb	r2, r3
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	1c59      	adds	r1, r3, #1
 8005116:	61f9      	str	r1, [r7, #28]
 8005118:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	09db      	lsrs	r3, r3, #7
 8005124:	61bb      	str	r3, [r7, #24]
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	2b7f      	cmp	r3, #127	; 0x7f
 800512a:	d8f0      	bhi.n	800510e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	61fa      	str	r2, [r7, #28]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	701a      	strb	r2, [r3, #0]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800513c:	2208      	movs	r2, #8
 800513e:	68f9      	ldr	r1, [r7, #12]
 8005140:	6938      	ldr	r0, [r7, #16]
 8005142:	f7ff fa61 	bl	8004608 <_SendPacket>
  RECORD_END();
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f383 8811 	msr	BASEPRI, r3
}
 800514c:	bf00      	nop
 800514e:	3720      	adds	r7, #32
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	200132b0 	.word	0x200132b0
 8005158:	20013280 	.word	0x20013280

0800515c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800515c:	b580      	push	{r7, lr}
 800515e:	b088      	sub	sp, #32
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005164:	f3ef 8311 	mrs	r3, BASEPRI
 8005168:	f04f 0120 	mov.w	r1, #32
 800516c:	f381 8811 	msr	BASEPRI, r1
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	4819      	ldr	r0, [pc, #100]	; (80051d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005174:	f7ff f95b 	bl	800442e <_PreparePacket>
 8005178:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800517e:	4b17      	ldr	r3, [pc, #92]	; (80051dc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	61fb      	str	r3, [r7, #28]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	61bb      	str	r3, [r7, #24]
 8005190:	e00b      	b.n	80051aa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	b2da      	uxtb	r2, r3
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	1c59      	adds	r1, r3, #1
 800519a:	61f9      	str	r1, [r7, #28]
 800519c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	09db      	lsrs	r3, r3, #7
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	2b7f      	cmp	r3, #127	; 0x7f
 80051ae:	d8f0      	bhi.n	8005192 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	61fa      	str	r2, [r7, #28]
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80051c0:	2204      	movs	r2, #4
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	6938      	ldr	r0, [r7, #16]
 80051c6:	f7ff fa1f 	bl	8004608 <_SendPacket>
  RECORD_END();
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	f383 8811 	msr	BASEPRI, r3
}
 80051d0:	bf00      	nop
 80051d2:	3720      	adds	r7, #32
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	200132b0 	.word	0x200132b0
 80051dc:	20013280 	.word	0x20013280

080051e0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80051e8:	f3ef 8311 	mrs	r3, BASEPRI
 80051ec:	f04f 0120 	mov.w	r1, #32
 80051f0:	f381 8811 	msr	BASEPRI, r1
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	4819      	ldr	r0, [pc, #100]	; (800525c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80051f8:	f7ff f919 	bl	800442e <_PreparePacket>
 80051fc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005202:	4b17      	ldr	r3, [pc, #92]	; (8005260 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	61fb      	str	r3, [r7, #28]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	e00b      	b.n	800522e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	b2da      	uxtb	r2, r3
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	1c59      	adds	r1, r3, #1
 800521e:	61f9      	str	r1, [r7, #28]
 8005220:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005224:	b2d2      	uxtb	r2, r2
 8005226:	701a      	strb	r2, [r3, #0]
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	09db      	lsrs	r3, r3, #7
 800522c:	61bb      	str	r3, [r7, #24]
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b7f      	cmp	r3, #127	; 0x7f
 8005232:	d8f0      	bhi.n	8005216 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	61fa      	str	r2, [r7, #28]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005244:	2206      	movs	r2, #6
 8005246:	68f9      	ldr	r1, [r7, #12]
 8005248:	6938      	ldr	r0, [r7, #16]
 800524a:	f7ff f9dd 	bl	8004608 <_SendPacket>
  RECORD_END();
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f383 8811 	msr	BASEPRI, r3
}
 8005254:	bf00      	nop
 8005256:	3720      	adds	r7, #32
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	200132b0 	.word	0x200132b0
 8005260:	20013280 	.word	0x20013280

08005264 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	; 0x28
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800526e:	f3ef 8311 	mrs	r3, BASEPRI
 8005272:	f04f 0120 	mov.w	r1, #32
 8005276:	f381 8811 	msr	BASEPRI, r1
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	4827      	ldr	r0, [pc, #156]	; (800531c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800527e:	f7ff f8d6 	bl	800442e <_PreparePacket>
 8005282:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005288:	4b25      	ldr	r3, [pc, #148]	; (8005320 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	623b      	str	r3, [r7, #32]
 800529a:	e00b      	b.n	80052b4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	b2da      	uxtb	r2, r3
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	1c59      	adds	r1, r3, #1
 80052a4:	6279      	str	r1, [r7, #36]	; 0x24
 80052a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	09db      	lsrs	r3, r3, #7
 80052b2:	623b      	str	r3, [r7, #32]
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	2b7f      	cmp	r3, #127	; 0x7f
 80052b8:	d8f0      	bhi.n	800529c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	627a      	str	r2, [r7, #36]	; 0x24
 80052c0:	6a3a      	ldr	r2, [r7, #32]
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	61bb      	str	r3, [r7, #24]
 80052d2:	e00b      	b.n	80052ec <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	1c59      	adds	r1, r3, #1
 80052dc:	61f9      	str	r1, [r7, #28]
 80052de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	09db      	lsrs	r3, r3, #7
 80052ea:	61bb      	str	r3, [r7, #24]
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	2b7f      	cmp	r3, #127	; 0x7f
 80052f0:	d8f0      	bhi.n	80052d4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	61fa      	str	r2, [r7, #28]
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8005302:	2207      	movs	r2, #7
 8005304:	68f9      	ldr	r1, [r7, #12]
 8005306:	6938      	ldr	r0, [r7, #16]
 8005308:	f7ff f97e 	bl	8004608 <_SendPacket>
  RECORD_END();
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f383 8811 	msr	BASEPRI, r3
}
 8005312:	bf00      	nop
 8005314:	3728      	adds	r7, #40	; 0x28
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	200132b0 	.word	0x200132b0
 8005320:	20013280 	.word	0x20013280

08005324 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800532c:	4b04      	ldr	r3, [pc, #16]	; (8005340 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	1ad3      	subs	r3, r2, r3
}
 8005334:	4618      	mov	r0, r3
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	20013280 	.word	0x20013280

08005344 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b08c      	sub	sp, #48	; 0x30
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800534e:	4b3b      	ldr	r3, [pc, #236]	; (800543c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d06d      	beq.n	8005432 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005356:	4b39      	ldr	r3, [pc, #228]	; (800543c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800535c:	2300      	movs	r3, #0
 800535e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005360:	e008      	b.n	8005374 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	3301      	adds	r3, #1
 8005372:	62bb      	str	r3, [r7, #40]	; 0x28
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005378:	429a      	cmp	r2, r3
 800537a:	d3f2      	bcc.n	8005362 <SEGGER_SYSVIEW_SendModule+0x1e>
 800537c:	e000      	b.n	8005380 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800537e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d055      	beq.n	8005432 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005386:	f3ef 8311 	mrs	r3, BASEPRI
 800538a:	f04f 0120 	mov.w	r1, #32
 800538e:	f381 8811 	msr	BASEPRI, r1
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	482a      	ldr	r0, [pc, #168]	; (8005440 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005396:	f7ff f84a 	bl	800442e <_PreparePacket>
 800539a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	e00b      	b.n	80053c2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	1c59      	adds	r1, r3, #1
 80053b2:	6279      	str	r1, [r7, #36]	; 0x24
 80053b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053b8:	b2d2      	uxtb	r2, r2
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	09db      	lsrs	r3, r3, #7
 80053c0:	623b      	str	r3, [r7, #32]
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	2b7f      	cmp	r3, #127	; 0x7f
 80053c6:	d8f0      	bhi.n	80053aa <SEGGER_SYSVIEW_SendModule+0x66>
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	627a      	str	r2, [r7, #36]	; 0x24
 80053ce:	6a3a      	ldr	r2, [r7, #32]
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	61fb      	str	r3, [r7, #28]
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	61bb      	str	r3, [r7, #24]
 80053e2:	e00b      	b.n	80053fc <SEGGER_SYSVIEW_SendModule+0xb8>
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	1c59      	adds	r1, r3, #1
 80053ec:	61f9      	str	r1, [r7, #28]
 80053ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	09db      	lsrs	r3, r3, #7
 80053fa:	61bb      	str	r3, [r7, #24]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	2b7f      	cmp	r3, #127	; 0x7f
 8005400:	d8f0      	bhi.n	80053e4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	61fa      	str	r2, [r7, #28]
 8005408:	69ba      	ldr	r2, [r7, #24]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2280      	movs	r2, #128	; 0x80
 8005418:	4619      	mov	r1, r3
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f7fe ffba 	bl	8004394 <_EncodeStr>
 8005420:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005422:	2216      	movs	r2, #22
 8005424:	68f9      	ldr	r1, [r7, #12]
 8005426:	6938      	ldr	r0, [r7, #16]
 8005428:	f7ff f8ee 	bl	8004608 <_SendPacket>
      RECORD_END();
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005432:	bf00      	nop
 8005434:	3730      	adds	r7, #48	; 0x30
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	200132a8 	.word	0x200132a8
 8005440:	200132b0 	.word	0x200132b0

08005444 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800544a:	4b0c      	ldr	r3, [pc, #48]	; (800547c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00f      	beq.n	8005472 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005452:	4b0a      	ldr	r3, [pc, #40]	; (800547c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f2      	bne.n	8005458 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	200132a8 	.word	0x200132a8

08005480 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005486:	f3ef 8311 	mrs	r3, BASEPRI
 800548a:	f04f 0120 	mov.w	r1, #32
 800548e:	f381 8811 	msr	BASEPRI, r1
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	4817      	ldr	r0, [pc, #92]	; (80054f4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005496:	f7fe ffca 	bl	800442e <_PreparePacket>
 800549a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	e00b      	b.n	80054c4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	1c59      	adds	r1, r3, #1
 80054b4:	6179      	str	r1, [r7, #20]
 80054b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	09db      	lsrs	r3, r3, #7
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b7f      	cmp	r3, #127	; 0x7f
 80054c8:	d8f0      	bhi.n	80054ac <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	1c5a      	adds	r2, r3, #1
 80054ce:	617a      	str	r2, [r7, #20]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	701a      	strb	r2, [r3, #0]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80054da:	221b      	movs	r2, #27
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	68b8      	ldr	r0, [r7, #8]
 80054e0:	f7ff f892 	bl	8004608 <_SendPacket>
  RECORD_END();
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f383 8811 	msr	BASEPRI, r3
}
 80054ea:	bf00      	nop
 80054ec:	3718      	adds	r7, #24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	200132b0 	.word	0x200132b0
 80054f8:	200132ac 	.word	0x200132ac

080054fc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	; 0x28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005504:	f3ef 8311 	mrs	r3, BASEPRI
 8005508:	f04f 0120 	mov.w	r1, #32
 800550c:	f381 8811 	msr	BASEPRI, r1
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	4827      	ldr	r0, [pc, #156]	; (80055b0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005514:	f7fe ff8b 	bl	800442e <_PreparePacket>
 8005518:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800551a:	2280      	movs	r2, #128	; 0x80
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	6938      	ldr	r0, [r7, #16]
 8005520:	f7fe ff38 	bl	8004394 <_EncodeStr>
 8005524:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	627b      	str	r3, [r7, #36]	; 0x24
 800552a:	2301      	movs	r3, #1
 800552c:	623b      	str	r3, [r7, #32]
 800552e:	e00b      	b.n	8005548 <SEGGER_SYSVIEW_Warn+0x4c>
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	b2da      	uxtb	r2, r3
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	1c59      	adds	r1, r3, #1
 8005538:	6279      	str	r1, [r7, #36]	; 0x24
 800553a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	09db      	lsrs	r3, r3, #7
 8005546:	623b      	str	r3, [r7, #32]
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	2b7f      	cmp	r3, #127	; 0x7f
 800554c:	d8f0      	bhi.n	8005530 <SEGGER_SYSVIEW_Warn+0x34>
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	627a      	str	r2, [r7, #36]	; 0x24
 8005554:	6a3a      	ldr	r2, [r7, #32]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	61fb      	str	r3, [r7, #28]
 8005562:	2300      	movs	r3, #0
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	e00b      	b.n	8005580 <SEGGER_SYSVIEW_Warn+0x84>
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	b2da      	uxtb	r2, r3
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	1c59      	adds	r1, r3, #1
 8005570:	61f9      	str	r1, [r7, #28]
 8005572:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	09db      	lsrs	r3, r3, #7
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	2b7f      	cmp	r3, #127	; 0x7f
 8005584:	d8f0      	bhi.n	8005568 <SEGGER_SYSVIEW_Warn+0x6c>
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	61fa      	str	r2, [r7, #28]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005596:	221a      	movs	r2, #26
 8005598:	68f9      	ldr	r1, [r7, #12]
 800559a:	6938      	ldr	r0, [r7, #16]
 800559c:	f7ff f834 	bl	8004608 <_SendPacket>
  RECORD_END();
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f383 8811 	msr	BASEPRI, r3
}
 80055a6:	bf00      	nop
 80055a8:	3728      	adds	r7, #40	; 0x28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	200132b0 	.word	0x200132b0

080055b4 <__libc_init_array>:
 80055b4:	b570      	push	{r4, r5, r6, lr}
 80055b6:	4e0d      	ldr	r6, [pc, #52]	; (80055ec <__libc_init_array+0x38>)
 80055b8:	4c0d      	ldr	r4, [pc, #52]	; (80055f0 <__libc_init_array+0x3c>)
 80055ba:	1ba4      	subs	r4, r4, r6
 80055bc:	10a4      	asrs	r4, r4, #2
 80055be:	2500      	movs	r5, #0
 80055c0:	42a5      	cmp	r5, r4
 80055c2:	d109      	bne.n	80055d8 <__libc_init_array+0x24>
 80055c4:	4e0b      	ldr	r6, [pc, #44]	; (80055f4 <__libc_init_array+0x40>)
 80055c6:	4c0c      	ldr	r4, [pc, #48]	; (80055f8 <__libc_init_array+0x44>)
 80055c8:	f000 fc58 	bl	8005e7c <_init>
 80055cc:	1ba4      	subs	r4, r4, r6
 80055ce:	10a4      	asrs	r4, r4, #2
 80055d0:	2500      	movs	r5, #0
 80055d2:	42a5      	cmp	r5, r4
 80055d4:	d105      	bne.n	80055e2 <__libc_init_array+0x2e>
 80055d6:	bd70      	pop	{r4, r5, r6, pc}
 80055d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055dc:	4798      	blx	r3
 80055de:	3501      	adds	r5, #1
 80055e0:	e7ee      	b.n	80055c0 <__libc_init_array+0xc>
 80055e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055e6:	4798      	blx	r3
 80055e8:	3501      	adds	r5, #1
 80055ea:	e7f2      	b.n	80055d2 <__libc_init_array+0x1e>
 80055ec:	08005ff8 	.word	0x08005ff8
 80055f0:	08005ff8 	.word	0x08005ff8
 80055f4:	08005ff8 	.word	0x08005ff8
 80055f8:	08005ffc 	.word	0x08005ffc

080055fc <memcmp>:
 80055fc:	b530      	push	{r4, r5, lr}
 80055fe:	2400      	movs	r4, #0
 8005600:	42a2      	cmp	r2, r4
 8005602:	d101      	bne.n	8005608 <memcmp+0xc>
 8005604:	2000      	movs	r0, #0
 8005606:	e007      	b.n	8005618 <memcmp+0x1c>
 8005608:	5d03      	ldrb	r3, [r0, r4]
 800560a:	3401      	adds	r4, #1
 800560c:	190d      	adds	r5, r1, r4
 800560e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005612:	42ab      	cmp	r3, r5
 8005614:	d0f4      	beq.n	8005600 <memcmp+0x4>
 8005616:	1b58      	subs	r0, r3, r5
 8005618:	bd30      	pop	{r4, r5, pc}

0800561a <memcpy>:
 800561a:	b510      	push	{r4, lr}
 800561c:	1e43      	subs	r3, r0, #1
 800561e:	440a      	add	r2, r1
 8005620:	4291      	cmp	r1, r2
 8005622:	d100      	bne.n	8005626 <memcpy+0xc>
 8005624:	bd10      	pop	{r4, pc}
 8005626:	f811 4b01 	ldrb.w	r4, [r1], #1
 800562a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800562e:	e7f7      	b.n	8005620 <memcpy+0x6>

08005630 <memset>:
 8005630:	4402      	add	r2, r0
 8005632:	4603      	mov	r3, r0
 8005634:	4293      	cmp	r3, r2
 8005636:	d100      	bne.n	800563a <memset+0xa>
 8005638:	4770      	bx	lr
 800563a:	f803 1b01 	strb.w	r1, [r3], #1
 800563e:	e7f9      	b.n	8005634 <memset+0x4>

08005640 <sniprintf>:
 8005640:	b40c      	push	{r2, r3}
 8005642:	b530      	push	{r4, r5, lr}
 8005644:	4b17      	ldr	r3, [pc, #92]	; (80056a4 <sniprintf+0x64>)
 8005646:	1e0c      	subs	r4, r1, #0
 8005648:	b09d      	sub	sp, #116	; 0x74
 800564a:	681d      	ldr	r5, [r3, #0]
 800564c:	da08      	bge.n	8005660 <sniprintf+0x20>
 800564e:	238b      	movs	r3, #139	; 0x8b
 8005650:	602b      	str	r3, [r5, #0]
 8005652:	f04f 30ff 	mov.w	r0, #4294967295
 8005656:	b01d      	add	sp, #116	; 0x74
 8005658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800565c:	b002      	add	sp, #8
 800565e:	4770      	bx	lr
 8005660:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005664:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005668:	bf14      	ite	ne
 800566a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800566e:	4623      	moveq	r3, r4
 8005670:	9304      	str	r3, [sp, #16]
 8005672:	9307      	str	r3, [sp, #28]
 8005674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005678:	9002      	str	r0, [sp, #8]
 800567a:	9006      	str	r0, [sp, #24]
 800567c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005680:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005682:	ab21      	add	r3, sp, #132	; 0x84
 8005684:	a902      	add	r1, sp, #8
 8005686:	4628      	mov	r0, r5
 8005688:	9301      	str	r3, [sp, #4]
 800568a:	f000 f867 	bl	800575c <_svfiprintf_r>
 800568e:	1c43      	adds	r3, r0, #1
 8005690:	bfbc      	itt	lt
 8005692:	238b      	movlt	r3, #139	; 0x8b
 8005694:	602b      	strlt	r3, [r5, #0]
 8005696:	2c00      	cmp	r4, #0
 8005698:	d0dd      	beq.n	8005656 <sniprintf+0x16>
 800569a:	9b02      	ldr	r3, [sp, #8]
 800569c:	2200      	movs	r2, #0
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	e7d9      	b.n	8005656 <sniprintf+0x16>
 80056a2:	bf00      	nop
 80056a4:	20000014 	.word	0x20000014

080056a8 <__ssputs_r>:
 80056a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056ac:	688e      	ldr	r6, [r1, #8]
 80056ae:	429e      	cmp	r6, r3
 80056b0:	4682      	mov	sl, r0
 80056b2:	460c      	mov	r4, r1
 80056b4:	4690      	mov	r8, r2
 80056b6:	4699      	mov	r9, r3
 80056b8:	d837      	bhi.n	800572a <__ssputs_r+0x82>
 80056ba:	898a      	ldrh	r2, [r1, #12]
 80056bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056c0:	d031      	beq.n	8005726 <__ssputs_r+0x7e>
 80056c2:	6825      	ldr	r5, [r4, #0]
 80056c4:	6909      	ldr	r1, [r1, #16]
 80056c6:	1a6f      	subs	r7, r5, r1
 80056c8:	6965      	ldr	r5, [r4, #20]
 80056ca:	2302      	movs	r3, #2
 80056cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80056d4:	f109 0301 	add.w	r3, r9, #1
 80056d8:	443b      	add	r3, r7
 80056da:	429d      	cmp	r5, r3
 80056dc:	bf38      	it	cc
 80056de:	461d      	movcc	r5, r3
 80056e0:	0553      	lsls	r3, r2, #21
 80056e2:	d530      	bpl.n	8005746 <__ssputs_r+0x9e>
 80056e4:	4629      	mov	r1, r5
 80056e6:	f000 fb21 	bl	8005d2c <_malloc_r>
 80056ea:	4606      	mov	r6, r0
 80056ec:	b950      	cbnz	r0, 8005704 <__ssputs_r+0x5c>
 80056ee:	230c      	movs	r3, #12
 80056f0:	f8ca 3000 	str.w	r3, [sl]
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056fa:	81a3      	strh	r3, [r4, #12]
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005704:	463a      	mov	r2, r7
 8005706:	6921      	ldr	r1, [r4, #16]
 8005708:	f7ff ff87 	bl	800561a <memcpy>
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005716:	81a3      	strh	r3, [r4, #12]
 8005718:	6126      	str	r6, [r4, #16]
 800571a:	6165      	str	r5, [r4, #20]
 800571c:	443e      	add	r6, r7
 800571e:	1bed      	subs	r5, r5, r7
 8005720:	6026      	str	r6, [r4, #0]
 8005722:	60a5      	str	r5, [r4, #8]
 8005724:	464e      	mov	r6, r9
 8005726:	454e      	cmp	r6, r9
 8005728:	d900      	bls.n	800572c <__ssputs_r+0x84>
 800572a:	464e      	mov	r6, r9
 800572c:	4632      	mov	r2, r6
 800572e:	4641      	mov	r1, r8
 8005730:	6820      	ldr	r0, [r4, #0]
 8005732:	f000 fa93 	bl	8005c5c <memmove>
 8005736:	68a3      	ldr	r3, [r4, #8]
 8005738:	1b9b      	subs	r3, r3, r6
 800573a:	60a3      	str	r3, [r4, #8]
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	441e      	add	r6, r3
 8005740:	6026      	str	r6, [r4, #0]
 8005742:	2000      	movs	r0, #0
 8005744:	e7dc      	b.n	8005700 <__ssputs_r+0x58>
 8005746:	462a      	mov	r2, r5
 8005748:	f000 fb4a 	bl	8005de0 <_realloc_r>
 800574c:	4606      	mov	r6, r0
 800574e:	2800      	cmp	r0, #0
 8005750:	d1e2      	bne.n	8005718 <__ssputs_r+0x70>
 8005752:	6921      	ldr	r1, [r4, #16]
 8005754:	4650      	mov	r0, sl
 8005756:	f000 fa9b 	bl	8005c90 <_free_r>
 800575a:	e7c8      	b.n	80056ee <__ssputs_r+0x46>

0800575c <_svfiprintf_r>:
 800575c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005760:	461d      	mov	r5, r3
 8005762:	898b      	ldrh	r3, [r1, #12]
 8005764:	061f      	lsls	r7, r3, #24
 8005766:	b09d      	sub	sp, #116	; 0x74
 8005768:	4680      	mov	r8, r0
 800576a:	460c      	mov	r4, r1
 800576c:	4616      	mov	r6, r2
 800576e:	d50f      	bpl.n	8005790 <_svfiprintf_r+0x34>
 8005770:	690b      	ldr	r3, [r1, #16]
 8005772:	b96b      	cbnz	r3, 8005790 <_svfiprintf_r+0x34>
 8005774:	2140      	movs	r1, #64	; 0x40
 8005776:	f000 fad9 	bl	8005d2c <_malloc_r>
 800577a:	6020      	str	r0, [r4, #0]
 800577c:	6120      	str	r0, [r4, #16]
 800577e:	b928      	cbnz	r0, 800578c <_svfiprintf_r+0x30>
 8005780:	230c      	movs	r3, #12
 8005782:	f8c8 3000 	str.w	r3, [r8]
 8005786:	f04f 30ff 	mov.w	r0, #4294967295
 800578a:	e0c8      	b.n	800591e <_svfiprintf_r+0x1c2>
 800578c:	2340      	movs	r3, #64	; 0x40
 800578e:	6163      	str	r3, [r4, #20]
 8005790:	2300      	movs	r3, #0
 8005792:	9309      	str	r3, [sp, #36]	; 0x24
 8005794:	2320      	movs	r3, #32
 8005796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800579a:	2330      	movs	r3, #48	; 0x30
 800579c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057a0:	9503      	str	r5, [sp, #12]
 80057a2:	f04f 0b01 	mov.w	fp, #1
 80057a6:	4637      	mov	r7, r6
 80057a8:	463d      	mov	r5, r7
 80057aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80057ae:	b10b      	cbz	r3, 80057b4 <_svfiprintf_r+0x58>
 80057b0:	2b25      	cmp	r3, #37	; 0x25
 80057b2:	d13e      	bne.n	8005832 <_svfiprintf_r+0xd6>
 80057b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80057b8:	d00b      	beq.n	80057d2 <_svfiprintf_r+0x76>
 80057ba:	4653      	mov	r3, sl
 80057bc:	4632      	mov	r2, r6
 80057be:	4621      	mov	r1, r4
 80057c0:	4640      	mov	r0, r8
 80057c2:	f7ff ff71 	bl	80056a8 <__ssputs_r>
 80057c6:	3001      	adds	r0, #1
 80057c8:	f000 80a4 	beq.w	8005914 <_svfiprintf_r+0x1b8>
 80057cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ce:	4453      	add	r3, sl
 80057d0:	9309      	str	r3, [sp, #36]	; 0x24
 80057d2:	783b      	ldrb	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 809d 	beq.w	8005914 <_svfiprintf_r+0x1b8>
 80057da:	2300      	movs	r3, #0
 80057dc:	f04f 32ff 	mov.w	r2, #4294967295
 80057e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057e4:	9304      	str	r3, [sp, #16]
 80057e6:	9307      	str	r3, [sp, #28]
 80057e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057ec:	931a      	str	r3, [sp, #104]	; 0x68
 80057ee:	462f      	mov	r7, r5
 80057f0:	2205      	movs	r2, #5
 80057f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80057f6:	4850      	ldr	r0, [pc, #320]	; (8005938 <_svfiprintf_r+0x1dc>)
 80057f8:	f7fa fd3a 	bl	8000270 <memchr>
 80057fc:	9b04      	ldr	r3, [sp, #16]
 80057fe:	b9d0      	cbnz	r0, 8005836 <_svfiprintf_r+0xda>
 8005800:	06d9      	lsls	r1, r3, #27
 8005802:	bf44      	itt	mi
 8005804:	2220      	movmi	r2, #32
 8005806:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800580a:	071a      	lsls	r2, r3, #28
 800580c:	bf44      	itt	mi
 800580e:	222b      	movmi	r2, #43	; 0x2b
 8005810:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005814:	782a      	ldrb	r2, [r5, #0]
 8005816:	2a2a      	cmp	r2, #42	; 0x2a
 8005818:	d015      	beq.n	8005846 <_svfiprintf_r+0xea>
 800581a:	9a07      	ldr	r2, [sp, #28]
 800581c:	462f      	mov	r7, r5
 800581e:	2000      	movs	r0, #0
 8005820:	250a      	movs	r5, #10
 8005822:	4639      	mov	r1, r7
 8005824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005828:	3b30      	subs	r3, #48	; 0x30
 800582a:	2b09      	cmp	r3, #9
 800582c:	d94d      	bls.n	80058ca <_svfiprintf_r+0x16e>
 800582e:	b1b8      	cbz	r0, 8005860 <_svfiprintf_r+0x104>
 8005830:	e00f      	b.n	8005852 <_svfiprintf_r+0xf6>
 8005832:	462f      	mov	r7, r5
 8005834:	e7b8      	b.n	80057a8 <_svfiprintf_r+0x4c>
 8005836:	4a40      	ldr	r2, [pc, #256]	; (8005938 <_svfiprintf_r+0x1dc>)
 8005838:	1a80      	subs	r0, r0, r2
 800583a:	fa0b f000 	lsl.w	r0, fp, r0
 800583e:	4318      	orrs	r0, r3
 8005840:	9004      	str	r0, [sp, #16]
 8005842:	463d      	mov	r5, r7
 8005844:	e7d3      	b.n	80057ee <_svfiprintf_r+0x92>
 8005846:	9a03      	ldr	r2, [sp, #12]
 8005848:	1d11      	adds	r1, r2, #4
 800584a:	6812      	ldr	r2, [r2, #0]
 800584c:	9103      	str	r1, [sp, #12]
 800584e:	2a00      	cmp	r2, #0
 8005850:	db01      	blt.n	8005856 <_svfiprintf_r+0xfa>
 8005852:	9207      	str	r2, [sp, #28]
 8005854:	e004      	b.n	8005860 <_svfiprintf_r+0x104>
 8005856:	4252      	negs	r2, r2
 8005858:	f043 0302 	orr.w	r3, r3, #2
 800585c:	9207      	str	r2, [sp, #28]
 800585e:	9304      	str	r3, [sp, #16]
 8005860:	783b      	ldrb	r3, [r7, #0]
 8005862:	2b2e      	cmp	r3, #46	; 0x2e
 8005864:	d10c      	bne.n	8005880 <_svfiprintf_r+0x124>
 8005866:	787b      	ldrb	r3, [r7, #1]
 8005868:	2b2a      	cmp	r3, #42	; 0x2a
 800586a:	d133      	bne.n	80058d4 <_svfiprintf_r+0x178>
 800586c:	9b03      	ldr	r3, [sp, #12]
 800586e:	1d1a      	adds	r2, r3, #4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	9203      	str	r2, [sp, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	bfb8      	it	lt
 8005878:	f04f 33ff 	movlt.w	r3, #4294967295
 800587c:	3702      	adds	r7, #2
 800587e:	9305      	str	r3, [sp, #20]
 8005880:	4d2e      	ldr	r5, [pc, #184]	; (800593c <_svfiprintf_r+0x1e0>)
 8005882:	7839      	ldrb	r1, [r7, #0]
 8005884:	2203      	movs	r2, #3
 8005886:	4628      	mov	r0, r5
 8005888:	f7fa fcf2 	bl	8000270 <memchr>
 800588c:	b138      	cbz	r0, 800589e <_svfiprintf_r+0x142>
 800588e:	2340      	movs	r3, #64	; 0x40
 8005890:	1b40      	subs	r0, r0, r5
 8005892:	fa03 f000 	lsl.w	r0, r3, r0
 8005896:	9b04      	ldr	r3, [sp, #16]
 8005898:	4303      	orrs	r3, r0
 800589a:	3701      	adds	r7, #1
 800589c:	9304      	str	r3, [sp, #16]
 800589e:	7839      	ldrb	r1, [r7, #0]
 80058a0:	4827      	ldr	r0, [pc, #156]	; (8005940 <_svfiprintf_r+0x1e4>)
 80058a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058a6:	2206      	movs	r2, #6
 80058a8:	1c7e      	adds	r6, r7, #1
 80058aa:	f7fa fce1 	bl	8000270 <memchr>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d038      	beq.n	8005924 <_svfiprintf_r+0x1c8>
 80058b2:	4b24      	ldr	r3, [pc, #144]	; (8005944 <_svfiprintf_r+0x1e8>)
 80058b4:	bb13      	cbnz	r3, 80058fc <_svfiprintf_r+0x1a0>
 80058b6:	9b03      	ldr	r3, [sp, #12]
 80058b8:	3307      	adds	r3, #7
 80058ba:	f023 0307 	bic.w	r3, r3, #7
 80058be:	3308      	adds	r3, #8
 80058c0:	9303      	str	r3, [sp, #12]
 80058c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c4:	444b      	add	r3, r9
 80058c6:	9309      	str	r3, [sp, #36]	; 0x24
 80058c8:	e76d      	b.n	80057a6 <_svfiprintf_r+0x4a>
 80058ca:	fb05 3202 	mla	r2, r5, r2, r3
 80058ce:	2001      	movs	r0, #1
 80058d0:	460f      	mov	r7, r1
 80058d2:	e7a6      	b.n	8005822 <_svfiprintf_r+0xc6>
 80058d4:	2300      	movs	r3, #0
 80058d6:	3701      	adds	r7, #1
 80058d8:	9305      	str	r3, [sp, #20]
 80058da:	4619      	mov	r1, r3
 80058dc:	250a      	movs	r5, #10
 80058de:	4638      	mov	r0, r7
 80058e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058e4:	3a30      	subs	r2, #48	; 0x30
 80058e6:	2a09      	cmp	r2, #9
 80058e8:	d903      	bls.n	80058f2 <_svfiprintf_r+0x196>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0c8      	beq.n	8005880 <_svfiprintf_r+0x124>
 80058ee:	9105      	str	r1, [sp, #20]
 80058f0:	e7c6      	b.n	8005880 <_svfiprintf_r+0x124>
 80058f2:	fb05 2101 	mla	r1, r5, r1, r2
 80058f6:	2301      	movs	r3, #1
 80058f8:	4607      	mov	r7, r0
 80058fa:	e7f0      	b.n	80058de <_svfiprintf_r+0x182>
 80058fc:	ab03      	add	r3, sp, #12
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	4622      	mov	r2, r4
 8005902:	4b11      	ldr	r3, [pc, #68]	; (8005948 <_svfiprintf_r+0x1ec>)
 8005904:	a904      	add	r1, sp, #16
 8005906:	4640      	mov	r0, r8
 8005908:	f3af 8000 	nop.w
 800590c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005910:	4681      	mov	r9, r0
 8005912:	d1d6      	bne.n	80058c2 <_svfiprintf_r+0x166>
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	065b      	lsls	r3, r3, #25
 8005918:	f53f af35 	bmi.w	8005786 <_svfiprintf_r+0x2a>
 800591c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800591e:	b01d      	add	sp, #116	; 0x74
 8005920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005924:	ab03      	add	r3, sp, #12
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	4622      	mov	r2, r4
 800592a:	4b07      	ldr	r3, [pc, #28]	; (8005948 <_svfiprintf_r+0x1ec>)
 800592c:	a904      	add	r1, sp, #16
 800592e:	4640      	mov	r0, r8
 8005930:	f000 f882 	bl	8005a38 <_printf_i>
 8005934:	e7ea      	b.n	800590c <_svfiprintf_r+0x1b0>
 8005936:	bf00      	nop
 8005938:	08005fba 	.word	0x08005fba
 800593c:	08005fc0 	.word	0x08005fc0
 8005940:	08005fc4 	.word	0x08005fc4
 8005944:	00000000 	.word	0x00000000
 8005948:	080056a9 	.word	0x080056a9

0800594c <_printf_common>:
 800594c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005950:	4691      	mov	r9, r2
 8005952:	461f      	mov	r7, r3
 8005954:	688a      	ldr	r2, [r1, #8]
 8005956:	690b      	ldr	r3, [r1, #16]
 8005958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800595c:	4293      	cmp	r3, r2
 800595e:	bfb8      	it	lt
 8005960:	4613      	movlt	r3, r2
 8005962:	f8c9 3000 	str.w	r3, [r9]
 8005966:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800596a:	4606      	mov	r6, r0
 800596c:	460c      	mov	r4, r1
 800596e:	b112      	cbz	r2, 8005976 <_printf_common+0x2a>
 8005970:	3301      	adds	r3, #1
 8005972:	f8c9 3000 	str.w	r3, [r9]
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	0699      	lsls	r1, r3, #26
 800597a:	bf42      	ittt	mi
 800597c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005980:	3302      	addmi	r3, #2
 8005982:	f8c9 3000 	strmi.w	r3, [r9]
 8005986:	6825      	ldr	r5, [r4, #0]
 8005988:	f015 0506 	ands.w	r5, r5, #6
 800598c:	d107      	bne.n	800599e <_printf_common+0x52>
 800598e:	f104 0a19 	add.w	sl, r4, #25
 8005992:	68e3      	ldr	r3, [r4, #12]
 8005994:	f8d9 2000 	ldr.w	r2, [r9]
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	42ab      	cmp	r3, r5
 800599c:	dc28      	bgt.n	80059f0 <_printf_common+0xa4>
 800599e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80059a2:	6822      	ldr	r2, [r4, #0]
 80059a4:	3300      	adds	r3, #0
 80059a6:	bf18      	it	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	0692      	lsls	r2, r2, #26
 80059ac:	d42d      	bmi.n	8005a0a <_printf_common+0xbe>
 80059ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059b2:	4639      	mov	r1, r7
 80059b4:	4630      	mov	r0, r6
 80059b6:	47c0      	blx	r8
 80059b8:	3001      	adds	r0, #1
 80059ba:	d020      	beq.n	80059fe <_printf_common+0xb2>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	68e5      	ldr	r5, [r4, #12]
 80059c0:	f8d9 2000 	ldr.w	r2, [r9]
 80059c4:	f003 0306 	and.w	r3, r3, #6
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	bf08      	it	eq
 80059cc:	1aad      	subeq	r5, r5, r2
 80059ce:	68a3      	ldr	r3, [r4, #8]
 80059d0:	6922      	ldr	r2, [r4, #16]
 80059d2:	bf0c      	ite	eq
 80059d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059d8:	2500      	movne	r5, #0
 80059da:	4293      	cmp	r3, r2
 80059dc:	bfc4      	itt	gt
 80059de:	1a9b      	subgt	r3, r3, r2
 80059e0:	18ed      	addgt	r5, r5, r3
 80059e2:	f04f 0900 	mov.w	r9, #0
 80059e6:	341a      	adds	r4, #26
 80059e8:	454d      	cmp	r5, r9
 80059ea:	d11a      	bne.n	8005a22 <_printf_common+0xd6>
 80059ec:	2000      	movs	r0, #0
 80059ee:	e008      	b.n	8005a02 <_printf_common+0xb6>
 80059f0:	2301      	movs	r3, #1
 80059f2:	4652      	mov	r2, sl
 80059f4:	4639      	mov	r1, r7
 80059f6:	4630      	mov	r0, r6
 80059f8:	47c0      	blx	r8
 80059fa:	3001      	adds	r0, #1
 80059fc:	d103      	bne.n	8005a06 <_printf_common+0xba>
 80059fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a06:	3501      	adds	r5, #1
 8005a08:	e7c3      	b.n	8005992 <_printf_common+0x46>
 8005a0a:	18e1      	adds	r1, r4, r3
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	2030      	movs	r0, #48	; 0x30
 8005a10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a14:	4422      	add	r2, r4
 8005a16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a1e:	3302      	adds	r3, #2
 8005a20:	e7c5      	b.n	80059ae <_printf_common+0x62>
 8005a22:	2301      	movs	r3, #1
 8005a24:	4622      	mov	r2, r4
 8005a26:	4639      	mov	r1, r7
 8005a28:	4630      	mov	r0, r6
 8005a2a:	47c0      	blx	r8
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d0e6      	beq.n	80059fe <_printf_common+0xb2>
 8005a30:	f109 0901 	add.w	r9, r9, #1
 8005a34:	e7d8      	b.n	80059e8 <_printf_common+0x9c>
	...

08005a38 <_printf_i>:
 8005a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005a40:	460c      	mov	r4, r1
 8005a42:	7e09      	ldrb	r1, [r1, #24]
 8005a44:	b085      	sub	sp, #20
 8005a46:	296e      	cmp	r1, #110	; 0x6e
 8005a48:	4617      	mov	r7, r2
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	4698      	mov	r8, r3
 8005a4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a50:	f000 80b3 	beq.w	8005bba <_printf_i+0x182>
 8005a54:	d822      	bhi.n	8005a9c <_printf_i+0x64>
 8005a56:	2963      	cmp	r1, #99	; 0x63
 8005a58:	d036      	beq.n	8005ac8 <_printf_i+0x90>
 8005a5a:	d80a      	bhi.n	8005a72 <_printf_i+0x3a>
 8005a5c:	2900      	cmp	r1, #0
 8005a5e:	f000 80b9 	beq.w	8005bd4 <_printf_i+0x19c>
 8005a62:	2958      	cmp	r1, #88	; 0x58
 8005a64:	f000 8083 	beq.w	8005b6e <_printf_i+0x136>
 8005a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005a70:	e032      	b.n	8005ad8 <_printf_i+0xa0>
 8005a72:	2964      	cmp	r1, #100	; 0x64
 8005a74:	d001      	beq.n	8005a7a <_printf_i+0x42>
 8005a76:	2969      	cmp	r1, #105	; 0x69
 8005a78:	d1f6      	bne.n	8005a68 <_printf_i+0x30>
 8005a7a:	6820      	ldr	r0, [r4, #0]
 8005a7c:	6813      	ldr	r3, [r2, #0]
 8005a7e:	0605      	lsls	r5, r0, #24
 8005a80:	f103 0104 	add.w	r1, r3, #4
 8005a84:	d52a      	bpl.n	8005adc <_printf_i+0xa4>
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6011      	str	r1, [r2, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	da03      	bge.n	8005a96 <_printf_i+0x5e>
 8005a8e:	222d      	movs	r2, #45	; 0x2d
 8005a90:	425b      	negs	r3, r3
 8005a92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005a96:	486f      	ldr	r0, [pc, #444]	; (8005c54 <_printf_i+0x21c>)
 8005a98:	220a      	movs	r2, #10
 8005a9a:	e039      	b.n	8005b10 <_printf_i+0xd8>
 8005a9c:	2973      	cmp	r1, #115	; 0x73
 8005a9e:	f000 809d 	beq.w	8005bdc <_printf_i+0x1a4>
 8005aa2:	d808      	bhi.n	8005ab6 <_printf_i+0x7e>
 8005aa4:	296f      	cmp	r1, #111	; 0x6f
 8005aa6:	d020      	beq.n	8005aea <_printf_i+0xb2>
 8005aa8:	2970      	cmp	r1, #112	; 0x70
 8005aaa:	d1dd      	bne.n	8005a68 <_printf_i+0x30>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	f043 0320 	orr.w	r3, r3, #32
 8005ab2:	6023      	str	r3, [r4, #0]
 8005ab4:	e003      	b.n	8005abe <_printf_i+0x86>
 8005ab6:	2975      	cmp	r1, #117	; 0x75
 8005ab8:	d017      	beq.n	8005aea <_printf_i+0xb2>
 8005aba:	2978      	cmp	r1, #120	; 0x78
 8005abc:	d1d4      	bne.n	8005a68 <_printf_i+0x30>
 8005abe:	2378      	movs	r3, #120	; 0x78
 8005ac0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ac4:	4864      	ldr	r0, [pc, #400]	; (8005c58 <_printf_i+0x220>)
 8005ac6:	e055      	b.n	8005b74 <_printf_i+0x13c>
 8005ac8:	6813      	ldr	r3, [r2, #0]
 8005aca:	1d19      	adds	r1, r3, #4
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6011      	str	r1, [r2, #0]
 8005ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ad4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e08c      	b.n	8005bf6 <_printf_i+0x1be>
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6011      	str	r1, [r2, #0]
 8005ae0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ae4:	bf18      	it	ne
 8005ae6:	b21b      	sxthne	r3, r3
 8005ae8:	e7cf      	b.n	8005a8a <_printf_i+0x52>
 8005aea:	6813      	ldr	r3, [r2, #0]
 8005aec:	6825      	ldr	r5, [r4, #0]
 8005aee:	1d18      	adds	r0, r3, #4
 8005af0:	6010      	str	r0, [r2, #0]
 8005af2:	0628      	lsls	r0, r5, #24
 8005af4:	d501      	bpl.n	8005afa <_printf_i+0xc2>
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	e002      	b.n	8005b00 <_printf_i+0xc8>
 8005afa:	0668      	lsls	r0, r5, #25
 8005afc:	d5fb      	bpl.n	8005af6 <_printf_i+0xbe>
 8005afe:	881b      	ldrh	r3, [r3, #0]
 8005b00:	4854      	ldr	r0, [pc, #336]	; (8005c54 <_printf_i+0x21c>)
 8005b02:	296f      	cmp	r1, #111	; 0x6f
 8005b04:	bf14      	ite	ne
 8005b06:	220a      	movne	r2, #10
 8005b08:	2208      	moveq	r2, #8
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b10:	6865      	ldr	r5, [r4, #4]
 8005b12:	60a5      	str	r5, [r4, #8]
 8005b14:	2d00      	cmp	r5, #0
 8005b16:	f2c0 8095 	blt.w	8005c44 <_printf_i+0x20c>
 8005b1a:	6821      	ldr	r1, [r4, #0]
 8005b1c:	f021 0104 	bic.w	r1, r1, #4
 8005b20:	6021      	str	r1, [r4, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d13d      	bne.n	8005ba2 <_printf_i+0x16a>
 8005b26:	2d00      	cmp	r5, #0
 8005b28:	f040 808e 	bne.w	8005c48 <_printf_i+0x210>
 8005b2c:	4665      	mov	r5, ip
 8005b2e:	2a08      	cmp	r2, #8
 8005b30:	d10b      	bne.n	8005b4a <_printf_i+0x112>
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	07db      	lsls	r3, r3, #31
 8005b36:	d508      	bpl.n	8005b4a <_printf_i+0x112>
 8005b38:	6923      	ldr	r3, [r4, #16]
 8005b3a:	6862      	ldr	r2, [r4, #4]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	bfde      	ittt	le
 8005b40:	2330      	movle	r3, #48	; 0x30
 8005b42:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b46:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b4a:	ebac 0305 	sub.w	r3, ip, r5
 8005b4e:	6123      	str	r3, [r4, #16]
 8005b50:	f8cd 8000 	str.w	r8, [sp]
 8005b54:	463b      	mov	r3, r7
 8005b56:	aa03      	add	r2, sp, #12
 8005b58:	4621      	mov	r1, r4
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f7ff fef6 	bl	800594c <_printf_common>
 8005b60:	3001      	adds	r0, #1
 8005b62:	d14d      	bne.n	8005c00 <_printf_i+0x1c8>
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	b005      	add	sp, #20
 8005b6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b6e:	4839      	ldr	r0, [pc, #228]	; (8005c54 <_printf_i+0x21c>)
 8005b70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005b74:	6813      	ldr	r3, [r2, #0]
 8005b76:	6821      	ldr	r1, [r4, #0]
 8005b78:	1d1d      	adds	r5, r3, #4
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6015      	str	r5, [r2, #0]
 8005b7e:	060a      	lsls	r2, r1, #24
 8005b80:	d50b      	bpl.n	8005b9a <_printf_i+0x162>
 8005b82:	07ca      	lsls	r2, r1, #31
 8005b84:	bf44      	itt	mi
 8005b86:	f041 0120 	orrmi.w	r1, r1, #32
 8005b8a:	6021      	strmi	r1, [r4, #0]
 8005b8c:	b91b      	cbnz	r3, 8005b96 <_printf_i+0x15e>
 8005b8e:	6822      	ldr	r2, [r4, #0]
 8005b90:	f022 0220 	bic.w	r2, r2, #32
 8005b94:	6022      	str	r2, [r4, #0]
 8005b96:	2210      	movs	r2, #16
 8005b98:	e7b7      	b.n	8005b0a <_printf_i+0xd2>
 8005b9a:	064d      	lsls	r5, r1, #25
 8005b9c:	bf48      	it	mi
 8005b9e:	b29b      	uxthmi	r3, r3
 8005ba0:	e7ef      	b.n	8005b82 <_printf_i+0x14a>
 8005ba2:	4665      	mov	r5, ip
 8005ba4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ba8:	fb02 3311 	mls	r3, r2, r1, r3
 8005bac:	5cc3      	ldrb	r3, [r0, r3]
 8005bae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	2900      	cmp	r1, #0
 8005bb6:	d1f5      	bne.n	8005ba4 <_printf_i+0x16c>
 8005bb8:	e7b9      	b.n	8005b2e <_printf_i+0xf6>
 8005bba:	6813      	ldr	r3, [r2, #0]
 8005bbc:	6825      	ldr	r5, [r4, #0]
 8005bbe:	6961      	ldr	r1, [r4, #20]
 8005bc0:	1d18      	adds	r0, r3, #4
 8005bc2:	6010      	str	r0, [r2, #0]
 8005bc4:	0628      	lsls	r0, r5, #24
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	d501      	bpl.n	8005bce <_printf_i+0x196>
 8005bca:	6019      	str	r1, [r3, #0]
 8005bcc:	e002      	b.n	8005bd4 <_printf_i+0x19c>
 8005bce:	066a      	lsls	r2, r5, #25
 8005bd0:	d5fb      	bpl.n	8005bca <_printf_i+0x192>
 8005bd2:	8019      	strh	r1, [r3, #0]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	6123      	str	r3, [r4, #16]
 8005bd8:	4665      	mov	r5, ip
 8005bda:	e7b9      	b.n	8005b50 <_printf_i+0x118>
 8005bdc:	6813      	ldr	r3, [r2, #0]
 8005bde:	1d19      	adds	r1, r3, #4
 8005be0:	6011      	str	r1, [r2, #0]
 8005be2:	681d      	ldr	r5, [r3, #0]
 8005be4:	6862      	ldr	r2, [r4, #4]
 8005be6:	2100      	movs	r1, #0
 8005be8:	4628      	mov	r0, r5
 8005bea:	f7fa fb41 	bl	8000270 <memchr>
 8005bee:	b108      	cbz	r0, 8005bf4 <_printf_i+0x1bc>
 8005bf0:	1b40      	subs	r0, r0, r5
 8005bf2:	6060      	str	r0, [r4, #4]
 8005bf4:	6863      	ldr	r3, [r4, #4]
 8005bf6:	6123      	str	r3, [r4, #16]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bfe:	e7a7      	b.n	8005b50 <_printf_i+0x118>
 8005c00:	6923      	ldr	r3, [r4, #16]
 8005c02:	462a      	mov	r2, r5
 8005c04:	4639      	mov	r1, r7
 8005c06:	4630      	mov	r0, r6
 8005c08:	47c0      	blx	r8
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d0aa      	beq.n	8005b64 <_printf_i+0x12c>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	079b      	lsls	r3, r3, #30
 8005c12:	d413      	bmi.n	8005c3c <_printf_i+0x204>
 8005c14:	68e0      	ldr	r0, [r4, #12]
 8005c16:	9b03      	ldr	r3, [sp, #12]
 8005c18:	4298      	cmp	r0, r3
 8005c1a:	bfb8      	it	lt
 8005c1c:	4618      	movlt	r0, r3
 8005c1e:	e7a3      	b.n	8005b68 <_printf_i+0x130>
 8005c20:	2301      	movs	r3, #1
 8005c22:	464a      	mov	r2, r9
 8005c24:	4639      	mov	r1, r7
 8005c26:	4630      	mov	r0, r6
 8005c28:	47c0      	blx	r8
 8005c2a:	3001      	adds	r0, #1
 8005c2c:	d09a      	beq.n	8005b64 <_printf_i+0x12c>
 8005c2e:	3501      	adds	r5, #1
 8005c30:	68e3      	ldr	r3, [r4, #12]
 8005c32:	9a03      	ldr	r2, [sp, #12]
 8005c34:	1a9b      	subs	r3, r3, r2
 8005c36:	42ab      	cmp	r3, r5
 8005c38:	dcf2      	bgt.n	8005c20 <_printf_i+0x1e8>
 8005c3a:	e7eb      	b.n	8005c14 <_printf_i+0x1dc>
 8005c3c:	2500      	movs	r5, #0
 8005c3e:	f104 0919 	add.w	r9, r4, #25
 8005c42:	e7f5      	b.n	8005c30 <_printf_i+0x1f8>
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1ac      	bne.n	8005ba2 <_printf_i+0x16a>
 8005c48:	7803      	ldrb	r3, [r0, #0]
 8005c4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c52:	e76c      	b.n	8005b2e <_printf_i+0xf6>
 8005c54:	08005fcb 	.word	0x08005fcb
 8005c58:	08005fdc 	.word	0x08005fdc

08005c5c <memmove>:
 8005c5c:	4288      	cmp	r0, r1
 8005c5e:	b510      	push	{r4, lr}
 8005c60:	eb01 0302 	add.w	r3, r1, r2
 8005c64:	d807      	bhi.n	8005c76 <memmove+0x1a>
 8005c66:	1e42      	subs	r2, r0, #1
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d00a      	beq.n	8005c82 <memmove+0x26>
 8005c6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c70:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005c74:	e7f8      	b.n	8005c68 <memmove+0xc>
 8005c76:	4283      	cmp	r3, r0
 8005c78:	d9f5      	bls.n	8005c66 <memmove+0xa>
 8005c7a:	1881      	adds	r1, r0, r2
 8005c7c:	1ad2      	subs	r2, r2, r3
 8005c7e:	42d3      	cmn	r3, r2
 8005c80:	d100      	bne.n	8005c84 <memmove+0x28>
 8005c82:	bd10      	pop	{r4, pc}
 8005c84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005c8c:	e7f7      	b.n	8005c7e <memmove+0x22>
	...

08005c90 <_free_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	4605      	mov	r5, r0
 8005c94:	2900      	cmp	r1, #0
 8005c96:	d045      	beq.n	8005d24 <_free_r+0x94>
 8005c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c9c:	1f0c      	subs	r4, r1, #4
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bfb8      	it	lt
 8005ca2:	18e4      	addlt	r4, r4, r3
 8005ca4:	f000 f8d2 	bl	8005e4c <__malloc_lock>
 8005ca8:	4a1f      	ldr	r2, [pc, #124]	; (8005d28 <_free_r+0x98>)
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	4610      	mov	r0, r2
 8005cae:	b933      	cbnz	r3, 8005cbe <_free_r+0x2e>
 8005cb0:	6063      	str	r3, [r4, #4]
 8005cb2:	6014      	str	r4, [r2, #0]
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cba:	f000 b8c8 	b.w	8005e4e <__malloc_unlock>
 8005cbe:	42a3      	cmp	r3, r4
 8005cc0:	d90c      	bls.n	8005cdc <_free_r+0x4c>
 8005cc2:	6821      	ldr	r1, [r4, #0]
 8005cc4:	1862      	adds	r2, r4, r1
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	bf04      	itt	eq
 8005cca:	681a      	ldreq	r2, [r3, #0]
 8005ccc:	685b      	ldreq	r3, [r3, #4]
 8005cce:	6063      	str	r3, [r4, #4]
 8005cd0:	bf04      	itt	eq
 8005cd2:	1852      	addeq	r2, r2, r1
 8005cd4:	6022      	streq	r2, [r4, #0]
 8005cd6:	6004      	str	r4, [r0, #0]
 8005cd8:	e7ec      	b.n	8005cb4 <_free_r+0x24>
 8005cda:	4613      	mov	r3, r2
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	b10a      	cbz	r2, 8005ce4 <_free_r+0x54>
 8005ce0:	42a2      	cmp	r2, r4
 8005ce2:	d9fa      	bls.n	8005cda <_free_r+0x4a>
 8005ce4:	6819      	ldr	r1, [r3, #0]
 8005ce6:	1858      	adds	r0, r3, r1
 8005ce8:	42a0      	cmp	r0, r4
 8005cea:	d10b      	bne.n	8005d04 <_free_r+0x74>
 8005cec:	6820      	ldr	r0, [r4, #0]
 8005cee:	4401      	add	r1, r0
 8005cf0:	1858      	adds	r0, r3, r1
 8005cf2:	4282      	cmp	r2, r0
 8005cf4:	6019      	str	r1, [r3, #0]
 8005cf6:	d1dd      	bne.n	8005cb4 <_free_r+0x24>
 8005cf8:	6810      	ldr	r0, [r2, #0]
 8005cfa:	6852      	ldr	r2, [r2, #4]
 8005cfc:	605a      	str	r2, [r3, #4]
 8005cfe:	4401      	add	r1, r0
 8005d00:	6019      	str	r1, [r3, #0]
 8005d02:	e7d7      	b.n	8005cb4 <_free_r+0x24>
 8005d04:	d902      	bls.n	8005d0c <_free_r+0x7c>
 8005d06:	230c      	movs	r3, #12
 8005d08:	602b      	str	r3, [r5, #0]
 8005d0a:	e7d3      	b.n	8005cb4 <_free_r+0x24>
 8005d0c:	6820      	ldr	r0, [r4, #0]
 8005d0e:	1821      	adds	r1, r4, r0
 8005d10:	428a      	cmp	r2, r1
 8005d12:	bf04      	itt	eq
 8005d14:	6811      	ldreq	r1, [r2, #0]
 8005d16:	6852      	ldreq	r2, [r2, #4]
 8005d18:	6062      	str	r2, [r4, #4]
 8005d1a:	bf04      	itt	eq
 8005d1c:	1809      	addeq	r1, r1, r0
 8005d1e:	6021      	streq	r1, [r4, #0]
 8005d20:	605c      	str	r4, [r3, #4]
 8005d22:	e7c7      	b.n	8005cb4 <_free_r+0x24>
 8005d24:	bd38      	pop	{r3, r4, r5, pc}
 8005d26:	bf00      	nop
 8005d28:	20013394 	.word	0x20013394

08005d2c <_malloc_r>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	1ccd      	adds	r5, r1, #3
 8005d30:	f025 0503 	bic.w	r5, r5, #3
 8005d34:	3508      	adds	r5, #8
 8005d36:	2d0c      	cmp	r5, #12
 8005d38:	bf38      	it	cc
 8005d3a:	250c      	movcc	r5, #12
 8005d3c:	2d00      	cmp	r5, #0
 8005d3e:	4606      	mov	r6, r0
 8005d40:	db01      	blt.n	8005d46 <_malloc_r+0x1a>
 8005d42:	42a9      	cmp	r1, r5
 8005d44:	d903      	bls.n	8005d4e <_malloc_r+0x22>
 8005d46:	230c      	movs	r3, #12
 8005d48:	6033      	str	r3, [r6, #0]
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	bd70      	pop	{r4, r5, r6, pc}
 8005d4e:	f000 f87d 	bl	8005e4c <__malloc_lock>
 8005d52:	4a21      	ldr	r2, [pc, #132]	; (8005dd8 <_malloc_r+0xac>)
 8005d54:	6814      	ldr	r4, [r2, #0]
 8005d56:	4621      	mov	r1, r4
 8005d58:	b991      	cbnz	r1, 8005d80 <_malloc_r+0x54>
 8005d5a:	4c20      	ldr	r4, [pc, #128]	; (8005ddc <_malloc_r+0xb0>)
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	b91b      	cbnz	r3, 8005d68 <_malloc_r+0x3c>
 8005d60:	4630      	mov	r0, r6
 8005d62:	f000 f863 	bl	8005e2c <_sbrk_r>
 8005d66:	6020      	str	r0, [r4, #0]
 8005d68:	4629      	mov	r1, r5
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f000 f85e 	bl	8005e2c <_sbrk_r>
 8005d70:	1c43      	adds	r3, r0, #1
 8005d72:	d124      	bne.n	8005dbe <_malloc_r+0x92>
 8005d74:	230c      	movs	r3, #12
 8005d76:	6033      	str	r3, [r6, #0]
 8005d78:	4630      	mov	r0, r6
 8005d7a:	f000 f868 	bl	8005e4e <__malloc_unlock>
 8005d7e:	e7e4      	b.n	8005d4a <_malloc_r+0x1e>
 8005d80:	680b      	ldr	r3, [r1, #0]
 8005d82:	1b5b      	subs	r3, r3, r5
 8005d84:	d418      	bmi.n	8005db8 <_malloc_r+0x8c>
 8005d86:	2b0b      	cmp	r3, #11
 8005d88:	d90f      	bls.n	8005daa <_malloc_r+0x7e>
 8005d8a:	600b      	str	r3, [r1, #0]
 8005d8c:	50cd      	str	r5, [r1, r3]
 8005d8e:	18cc      	adds	r4, r1, r3
 8005d90:	4630      	mov	r0, r6
 8005d92:	f000 f85c 	bl	8005e4e <__malloc_unlock>
 8005d96:	f104 000b 	add.w	r0, r4, #11
 8005d9a:	1d23      	adds	r3, r4, #4
 8005d9c:	f020 0007 	bic.w	r0, r0, #7
 8005da0:	1ac3      	subs	r3, r0, r3
 8005da2:	d0d3      	beq.n	8005d4c <_malloc_r+0x20>
 8005da4:	425a      	negs	r2, r3
 8005da6:	50e2      	str	r2, [r4, r3]
 8005da8:	e7d0      	b.n	8005d4c <_malloc_r+0x20>
 8005daa:	428c      	cmp	r4, r1
 8005dac:	684b      	ldr	r3, [r1, #4]
 8005dae:	bf16      	itet	ne
 8005db0:	6063      	strne	r3, [r4, #4]
 8005db2:	6013      	streq	r3, [r2, #0]
 8005db4:	460c      	movne	r4, r1
 8005db6:	e7eb      	b.n	8005d90 <_malloc_r+0x64>
 8005db8:	460c      	mov	r4, r1
 8005dba:	6849      	ldr	r1, [r1, #4]
 8005dbc:	e7cc      	b.n	8005d58 <_malloc_r+0x2c>
 8005dbe:	1cc4      	adds	r4, r0, #3
 8005dc0:	f024 0403 	bic.w	r4, r4, #3
 8005dc4:	42a0      	cmp	r0, r4
 8005dc6:	d005      	beq.n	8005dd4 <_malloc_r+0xa8>
 8005dc8:	1a21      	subs	r1, r4, r0
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f000 f82e 	bl	8005e2c <_sbrk_r>
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d0cf      	beq.n	8005d74 <_malloc_r+0x48>
 8005dd4:	6025      	str	r5, [r4, #0]
 8005dd6:	e7db      	b.n	8005d90 <_malloc_r+0x64>
 8005dd8:	20013394 	.word	0x20013394
 8005ddc:	20013398 	.word	0x20013398

08005de0 <_realloc_r>:
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de2:	4607      	mov	r7, r0
 8005de4:	4614      	mov	r4, r2
 8005de6:	460e      	mov	r6, r1
 8005de8:	b921      	cbnz	r1, 8005df4 <_realloc_r+0x14>
 8005dea:	4611      	mov	r1, r2
 8005dec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005df0:	f7ff bf9c 	b.w	8005d2c <_malloc_r>
 8005df4:	b922      	cbnz	r2, 8005e00 <_realloc_r+0x20>
 8005df6:	f7ff ff4b 	bl	8005c90 <_free_r>
 8005dfa:	4625      	mov	r5, r4
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e00:	f000 f826 	bl	8005e50 <_malloc_usable_size_r>
 8005e04:	42a0      	cmp	r0, r4
 8005e06:	d20f      	bcs.n	8005e28 <_realloc_r+0x48>
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	f7ff ff8e 	bl	8005d2c <_malloc_r>
 8005e10:	4605      	mov	r5, r0
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d0f2      	beq.n	8005dfc <_realloc_r+0x1c>
 8005e16:	4631      	mov	r1, r6
 8005e18:	4622      	mov	r2, r4
 8005e1a:	f7ff fbfe 	bl	800561a <memcpy>
 8005e1e:	4631      	mov	r1, r6
 8005e20:	4638      	mov	r0, r7
 8005e22:	f7ff ff35 	bl	8005c90 <_free_r>
 8005e26:	e7e9      	b.n	8005dfc <_realloc_r+0x1c>
 8005e28:	4635      	mov	r5, r6
 8005e2a:	e7e7      	b.n	8005dfc <_realloc_r+0x1c>

08005e2c <_sbrk_r>:
 8005e2c:	b538      	push	{r3, r4, r5, lr}
 8005e2e:	4c06      	ldr	r4, [pc, #24]	; (8005e48 <_sbrk_r+0x1c>)
 8005e30:	2300      	movs	r3, #0
 8005e32:	4605      	mov	r5, r0
 8005e34:	4608      	mov	r0, r1
 8005e36:	6023      	str	r3, [r4, #0]
 8005e38:	f000 f812 	bl	8005e60 <_sbrk>
 8005e3c:	1c43      	adds	r3, r0, #1
 8005e3e:	d102      	bne.n	8005e46 <_sbrk_r+0x1a>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	b103      	cbz	r3, 8005e46 <_sbrk_r+0x1a>
 8005e44:	602b      	str	r3, [r5, #0]
 8005e46:	bd38      	pop	{r3, r4, r5, pc}
 8005e48:	200134a0 	.word	0x200134a0

08005e4c <__malloc_lock>:
 8005e4c:	4770      	bx	lr

08005e4e <__malloc_unlock>:
 8005e4e:	4770      	bx	lr

08005e50 <_malloc_usable_size_r>:
 8005e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e54:	1f18      	subs	r0, r3, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	bfbc      	itt	lt
 8005e5a:	580b      	ldrlt	r3, [r1, r0]
 8005e5c:	18c0      	addlt	r0, r0, r3
 8005e5e:	4770      	bx	lr

08005e60 <_sbrk>:
 8005e60:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <_sbrk+0x14>)
 8005e62:	6819      	ldr	r1, [r3, #0]
 8005e64:	4602      	mov	r2, r0
 8005e66:	b909      	cbnz	r1, 8005e6c <_sbrk+0xc>
 8005e68:	4903      	ldr	r1, [pc, #12]	; (8005e78 <_sbrk+0x18>)
 8005e6a:	6019      	str	r1, [r3, #0]
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	4402      	add	r2, r0
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	4770      	bx	lr
 8005e74:	2001339c 	.word	0x2001339c
 8005e78:	200134a8 	.word	0x200134a8

08005e7c <_init>:
 8005e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7e:	bf00      	nop
 8005e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e82:	bc08      	pop	{r3}
 8005e84:	469e      	mov	lr, r3
 8005e86:	4770      	bx	lr

08005e88 <_fini>:
 8005e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8a:	bf00      	nop
 8005e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e8e:	bc08      	pop	{r3}
 8005e90:	469e      	mov	lr, r3
 8005e92:	4770      	bx	lr
