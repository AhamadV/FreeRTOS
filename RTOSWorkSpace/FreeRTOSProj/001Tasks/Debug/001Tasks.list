
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d38  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08004ec8  08004ec8  00014ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fdc  08004fdc  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004fdc  08004fdc  00014fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fe4  08004fe4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe4  08004fe4  00014fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013414  20000078  08005064  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001348c  08005064  0002348c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c23  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000296f  00000000  00000000  00034ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010c0  00000000  00000000  00037640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f68  00000000  00000000  00038700  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002338c  00000000  00000000  00039668  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd54  00000000  00000000  0005c9f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5113  00000000  00000000  0006a748  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013f85b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048e0  00000000  00000000  0013f8d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004eb0 	.word	0x08004eb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08004eb0 	.word	0x08004eb0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200133e0 	.word	0x200133e0
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fb47 	bl	8000ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f84b 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8b3 	bl	8000788 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000622:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <main+0x88>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <main+0x88>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]

  //SEGGER_SYSVIEW_Conf();

 // SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	4b18      	ldr	r3, [pc, #96]	; (800069c <main+0x8c>)
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	4918      	ldr	r1, [pc, #96]	; (80006a0 <main+0x90>)
 800063e:	4819      	ldr	r0, [pc, #100]	; (80006a4 <main+0x94>)
 8000640:	f001 fd43 	bl	80020ca <xTaskCreate>
 8000644:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d009      	beq.n	8000660 <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000650:	f383 8811 	msr	BASEPRI, r3
 8000654:	f3bf 8f6f 	isb	sy
 8000658:	f3bf 8f4f 	dsb	sy
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	e7fe      	b.n	800065e <main+0x4e>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	2302      	movs	r3, #2
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <main+0x98>)
 800066a:	22c8      	movs	r2, #200	; 0xc8
 800066c:	490f      	ldr	r1, [pc, #60]	; (80006ac <main+0x9c>)
 800066e:	4810      	ldr	r0, [pc, #64]	; (80006b0 <main+0xa0>)
 8000670:	f001 fd2b 	bl	80020ca <xTaskCreate>
 8000674:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d009      	beq.n	8000690 <main+0x80>
 800067c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000680:	f383 8811 	msr	BASEPRI, r3
 8000684:	f3bf 8f6f 	isb	sy
 8000688:	f3bf 8f4f 	dsb	sy
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	e7fe      	b.n	800068e <main+0x7e>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000690:	f001 fe7e 	bl	8002390 <vTaskStartScheduler>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x84>
 8000696:	bf00      	nop
 8000698:	e0001000 	.word	0xe0001000
 800069c:	08004ec8 	.word	0x08004ec8
 80006a0:	08004ee0 	.word	0x08004ee0
 80006a4:	08000a49 	.word	0x08000a49
 80006a8:	08004ee8 	.word	0x08004ee8
 80006ac:	08004f00 	.word	0x08004f00
 80006b0:	08000a79 	.word	0x08000a79

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 ffce 	bl	8004664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b28      	ldr	r3, [pc, #160]	; (8000780 <SystemClock_Config+0xcc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a27      	ldr	r2, [pc, #156]	; (8000780 <SystemClock_Config+0xcc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b25      	ldr	r3, [pc, #148]	; (8000780 <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <SystemClock_Config+0xd0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <SystemClock_Config+0xd0>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000728:	23a8      	movs	r3, #168	; 0xa8
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000730:	2307      	movs	r3, #7
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fd8d 	bl	8001258 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000744:	f000 f9c2 	bl	8000acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2105      	movs	r1, #5
 8000766:	4618      	mov	r0, r3
 8000768:	f000 ffe6 	bl	8001738 <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000772:	f000 f9ab 	bl	8000acc <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	; 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	; 0x30
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	4ba1      	ldr	r3, [pc, #644]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4aa0      	ldr	r2, [pc, #640]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b9e      	ldr	r3, [pc, #632]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0310 	and.w	r3, r3, #16
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	4b9a      	ldr	r3, [pc, #616]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a99      	ldr	r2, [pc, #612]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b97      	ldr	r3, [pc, #604]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b93      	ldr	r3, [pc, #588]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a92      	ldr	r2, [pc, #584]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b90      	ldr	r3, [pc, #576]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b8c      	ldr	r3, [pc, #560]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a8b      	ldr	r2, [pc, #556]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b89      	ldr	r3, [pc, #548]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b85      	ldr	r3, [pc, #532]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a84      	ldr	r2, [pc, #528]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b82      	ldr	r3, [pc, #520]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b7e      	ldr	r3, [pc, #504]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a7d      	ldr	r2, [pc, #500]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b7b      	ldr	r3, [pc, #492]	; (8000a28 <MX_GPIO_Init+0x2a0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2108      	movs	r1, #8
 800084a:	4878      	ldr	r0, [pc, #480]	; (8000a2c <MX_GPIO_Init+0x2a4>)
 800084c:	f000 fcea 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2101      	movs	r1, #1
 8000854:	4876      	ldr	r0, [pc, #472]	; (8000a30 <MX_GPIO_Init+0x2a8>)
 8000856:	f000 fce5 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800085a:	2200      	movs	r2, #0
 800085c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000860:	4874      	ldr	r0, [pc, #464]	; (8000a34 <MX_GPIO_Init+0x2ac>)
 8000862:	f000 fcdf 	bl	8001224 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	486b      	ldr	r0, [pc, #428]	; (8000a2c <MX_GPIO_Init+0x2a4>)
 800087e:	f000 fb37 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000882:	2301      	movs	r3, #1
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4865      	ldr	r0, [pc, #404]	; (8000a30 <MX_GPIO_Init+0x2a8>)
 800089a:	f000 fb29 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800089e:	2308      	movs	r3, #8
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ae:	2305      	movs	r3, #5
 80008b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	485d      	ldr	r0, [pc, #372]	; (8000a30 <MX_GPIO_Init+0x2a8>)
 80008ba:	f000 fb19 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	4b5d      	ldr	r3, [pc, #372]	; (8000a38 <MX_GPIO_Init+0x2b0>)
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	485a      	ldr	r0, [pc, #360]	; (8000a3c <MX_GPIO_Init+0x2b4>)
 80008d2:	f000 fb0d 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008d6:	2310      	movs	r3, #16
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e6:	2306      	movs	r3, #6
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4852      	ldr	r0, [pc, #328]	; (8000a3c <MX_GPIO_Init+0x2b4>)
 80008f2:	f000 fafd 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008f6:	23e0      	movs	r3, #224	; 0xe0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000906:	2305      	movs	r3, #5
 8000908:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	484a      	ldr	r0, [pc, #296]	; (8000a3c <MX_GPIO_Init+0x2b4>)
 8000912:	f000 faed 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000916:	2304      	movs	r3, #4
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 031c 	add.w	r3, r7, #28
 8000926:	4619      	mov	r1, r3
 8000928:	4845      	ldr	r0, [pc, #276]	; (8000a40 <MX_GPIO_Init+0x2b8>)
 800092a:	f000 fae1 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800092e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000934:	2302      	movs	r3, #2
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000940:	2305      	movs	r3, #5
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	483d      	ldr	r0, [pc, #244]	; (8000a40 <MX_GPIO_Init+0x2b8>)
 800094c:	f000 fad0 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000950:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000954:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4832      	ldr	r0, [pc, #200]	; (8000a34 <MX_GPIO_Init+0x2ac>)
 800096a:	f000 fac1 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800096e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000974:	2302      	movs	r3, #2
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000980:	2306      	movs	r3, #6
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4829      	ldr	r0, [pc, #164]	; (8000a30 <MX_GPIO_Init+0x2a8>)
 800098c:	f000 fab0 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000996:	2300      	movs	r3, #0
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4825      	ldr	r0, [pc, #148]	; (8000a3c <MX_GPIO_Init+0x2b4>)
 80009a6:	f000 faa3 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009bc:	230a      	movs	r3, #10
 80009be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	481d      	ldr	r0, [pc, #116]	; (8000a3c <MX_GPIO_Init+0x2b4>)
 80009c8:	f000 fa92 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009cc:	2320      	movs	r3, #32
 80009ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4815      	ldr	r0, [pc, #84]	; (8000a34 <MX_GPIO_Init+0x2ac>)
 80009e0:	f000 fa86 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009e4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f6:	2304      	movs	r3, #4
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	480f      	ldr	r0, [pc, #60]	; (8000a40 <MX_GPIO_Init+0x2b8>)
 8000a02:	f000 fa75 	bl	8000ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_GPIO_Init+0x2bc>)
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_GPIO_Init+0x2a4>)
 8000a1a:	f000 fa69 	bl	8000ef0 <HAL_GPIO_Init>

}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	; 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40020800 	.word	0x40020800
 8000a34:	40020c00 	.word	0x40020c00
 8000a38:	10110000 	.word	0x10110000
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	40020400 	.word	0x40020400
 8000a44:	10120000 	.word	0x10120000

08000a48 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b09c      	sub	sp, #112	; 0x70
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a50:	f107 000c 	add.w	r0, r7, #12
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <task1_handler+0x28>)
 8000a58:	2164      	movs	r1, #100	; 0x64
 8000a5a:	f003 fe0b 	bl	8004674 <sniprintf>
		//SEGGER_SYSVIEW_PrintfTarget(msg);
		taskYIELD();
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <task1_handler+0x2c>)
 8000a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	f3bf 8f4f 	dsb	sy
 8000a6a:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a6e:	e7ef      	b.n	8000a50 <task1_handler+0x8>
 8000a70:	08004f08 	.word	0x08004f08
 8000a74:	e000ed04 	.word	0xe000ed04

08000a78 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b09c      	sub	sp, #112	; 0x70
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a80:	f107 000c 	add.w	r0, r7, #12
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <task2_handler+0x28>)
 8000a88:	2164      	movs	r1, #100	; 0x64
 8000a8a:	f003 fdf3 	bl	8004674 <sniprintf>
		//SEGGER_SYSVIEW_PrintfTarget(msg);
		taskYIELD();
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <task2_handler+0x2c>)
 8000a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	f3bf 8f4f 	dsb	sy
 8000a9a:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a9e:	e7ef      	b.n	8000a80 <task2_handler+0x8>
 8000aa0:	08004f08 	.word	0x08004f08
 8000aa4:	e000ed04 	.word	0xe000ed04

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aba:	f000 f917 	bl	8000cec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40001000 	.word	0x40001000

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
	...

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <HAL_MspInit+0x4c>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b1a:	f002 f841 	bl	8002ba0 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	; 0x30
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2036      	movs	r0, #54	; 0x36
 8000b42:	f000 f9ab 	bl	8000e9c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000b46:	2036      	movs	r0, #54	; 0x36
 8000b48:	f000 f9c4 	bl	8000ed4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000b56:	f043 0310 	orr.w	r3, r3, #16
 8000b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_InitTick+0xa4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f003 0310 	and.w	r3, r3, #16
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b68:	f107 0210 	add.w	r2, r7, #16
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 ffbe 	bl	8001af4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b78:	f000 ffa8 	bl	8001acc <HAL_RCC_GetPCLK1Freq>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <HAL_InitTick+0xa8>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	0c9b      	lsrs	r3, r3, #18
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <HAL_InitTick+0xac>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <HAL_InitTick+0xb0>)
 8000b94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_InitTick+0xac>)
 8000b98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b9c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <HAL_InitTick+0xac>)
 8000ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <HAL_InitTick+0xac>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_InitTick+0xac>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bb0:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <HAL_InitTick+0xac>)
 8000bb2:	f000 ffd1 	bl	8001b58 <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d104      	bne.n	8000bc6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bbc:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <HAL_InitTick+0xac>)
 8000bbe:	f001 f800 	bl	8001bc2 <HAL_TIM_Base_Start_IT>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3730      	adds	r7, #48	; 0x30
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	431bde83 	.word	0x431bde83
 8000bd8:	2001339c 	.word	0x2001339c
 8000bdc:	40001000 	.word	0x40001000

08000be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <TIM6_DAC_IRQHandler+0x10>)
 8000c1a:	f000 fff6 	bl	8001c0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2001339c 	.word	0x2001339c

08000c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <SystemInit+0x28>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <SystemInit+0x28>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SystemInit+0x28>)
 8000c3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c42:	609a      	str	r2, [r3, #8]
#endif
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c5a:	e003      	b.n	8000c64 <LoopCopyDataInit>

08000c5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c62:	3104      	adds	r1, #4

08000c64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c6c:	d3f6      	bcc.n	8000c5c <CopyDataInit>
  ldr  r2, =_sbss
 8000c6e:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c70:	e002      	b.n	8000c78 <LoopFillZerobss>

08000c72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c74:	f842 3b04 	str.w	r3, [r2], #4

08000c78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c7c:	d3f9      	bcc.n	8000c72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c7e:	f7ff ffd3 	bl	8000c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c82:	f003 fcb1 	bl	80045e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c86:	f7ff fcc3 	bl	8000610 <main>
  bx  lr    
 8000c8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c90:	08004fec 	.word	0x08004fec
  ldr  r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c98:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000c9c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000ca0:	2001348c 	.word	0x2001348c

08000ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca4:	e7fe      	b.n	8000ca4 <ADC_IRQHandler>
	...

08000ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cac:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_Init+0x40>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <HAL_Init+0x40>)
 8000cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_Init+0x40>)
 8000cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <HAL_Init+0x40>)
 8000cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 f8d8 	bl	8000e86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff ff28 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff fefe 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023c00 	.word	0x40023c00

08000cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_IncTick+0x20>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_IncTick+0x24>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_IncTick+0x24>)
 8000cfe:	6013      	str	r3, [r2, #0]
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	200133dc 	.word	0x200133dc

08000d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return uwTick;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_GetTick+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	200133dc 	.word	0x200133dc

08000d2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d5e:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <__NVIC_SetPriorityGrouping+0x44>)
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	60d3      	str	r3, [r2, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <__NVIC_GetPriorityGrouping+0x18>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	0a1b      	lsrs	r3, r3, #8
 8000d7e:	f003 0307 	and.w	r3, r3, #7
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	db0b      	blt.n	8000dba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <__NVIC_EnableIRQ+0x38>)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	095b      	lsrs	r3, r3, #5
 8000db0:	2001      	movs	r0, #1
 8000db2:	fa00 f202 	lsl.w	r2, r0, r2
 8000db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000e100 	.word	0xe000e100

08000dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	db0a      	blt.n	8000df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	490c      	ldr	r1, [pc, #48]	; (8000e18 <__NVIC_SetPriority+0x4c>)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	0112      	lsls	r2, r2, #4
 8000dec:	b2d2      	uxtb	r2, r2
 8000dee:	440b      	add	r3, r1
 8000df0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000df4:	e00a      	b.n	8000e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4908      	ldr	r1, [pc, #32]	; (8000e1c <__NVIC_SetPriority+0x50>)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b04      	subs	r3, #4
 8000e04:	0112      	lsls	r2, r2, #4
 8000e06:	b2d2      	uxtb	r2, r2
 8000e08:	440b      	add	r3, r1
 8000e0a:	761a      	strb	r2, [r3, #24]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000e100 	.word	0xe000e100
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b089      	sub	sp, #36	; 0x24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f1c3 0307 	rsb	r3, r3, #7
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4
 8000e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	3304      	adds	r3, #4
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	d902      	bls.n	8000e50 <NVIC_EncodePriority+0x30>
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3b03      	subs	r3, #3
 8000e4e:	e000      	b.n	8000e52 <NVIC_EncodePriority+0x32>
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	f04f 32ff 	mov.w	r2, #4294967295
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43da      	mvns	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	401a      	ands	r2, r3
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43d9      	mvns	r1, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	4313      	orrs	r3, r2
         );
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ff4c 	bl	8000d2c <__NVIC_SetPriorityGrouping>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
 8000ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eae:	f7ff ff61 	bl	8000d74 <__NVIC_GetPriorityGrouping>
 8000eb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	68b9      	ldr	r1, [r7, #8]
 8000eb8:	6978      	ldr	r0, [r7, #20]
 8000eba:	f7ff ffb1 	bl	8000e20 <NVIC_EncodePriority>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec4:	4611      	mov	r1, r2
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff80 	bl	8000dcc <__NVIC_SetPriority>
}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff54 	bl	8000d90 <__NVIC_EnableIRQ>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	e16b      	b.n	80011e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	f040 815a 	bne.w	80011de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d00b      	beq.n	8000f4a <HAL_GPIO_Init+0x5a>
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f3e:	2b11      	cmp	r3, #17
 8000f40:	d003      	beq.n	8000f4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d130      	bne.n	8000fac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f80:	2201      	movs	r2, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	f003 0201 	and.w	r2, r3, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0xfc>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b12      	cmp	r3, #18
 8000fea:	d123      	bne.n	8001034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	220f      	movs	r2, #15
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	691a      	ldr	r2, [r3, #16]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	69b9      	ldr	r1, [r7, #24]
 8001030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0203 	and.w	r2, r3, #3
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80b4 	beq.w	80011de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <HAL_GPIO_Init+0x308>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	4a5e      	ldr	r2, [pc, #376]	; (80011f8 <HAL_GPIO_Init+0x308>)
 8001080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001084:	6453      	str	r3, [r2, #68]	; 0x44
 8001086:	4b5c      	ldr	r3, [pc, #368]	; (80011f8 <HAL_GPIO_Init+0x308>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001092:	4a5a      	ldr	r2, [pc, #360]	; (80011fc <HAL_GPIO_Init+0x30c>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a51      	ldr	r2, [pc, #324]	; (8001200 <HAL_GPIO_Init+0x310>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d02b      	beq.n	8001116 <HAL_GPIO_Init+0x226>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a50      	ldr	r2, [pc, #320]	; (8001204 <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d025      	beq.n	8001112 <HAL_GPIO_Init+0x222>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4f      	ldr	r2, [pc, #316]	; (8001208 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d01f      	beq.n	800110e <HAL_GPIO_Init+0x21e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4e      	ldr	r2, [pc, #312]	; (800120c <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d019      	beq.n	800110a <HAL_GPIO_Init+0x21a>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4d      	ldr	r2, [pc, #308]	; (8001210 <HAL_GPIO_Init+0x320>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d013      	beq.n	8001106 <HAL_GPIO_Init+0x216>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4c      	ldr	r2, [pc, #304]	; (8001214 <HAL_GPIO_Init+0x324>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d00d      	beq.n	8001102 <HAL_GPIO_Init+0x212>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4b      	ldr	r2, [pc, #300]	; (8001218 <HAL_GPIO_Init+0x328>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x20e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4a      	ldr	r2, [pc, #296]	; (800121c <HAL_GPIO_Init+0x32c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_GPIO_Init+0x20a>
 80010f6:	2307      	movs	r3, #7
 80010f8:	e00e      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fa:	2308      	movs	r3, #8
 80010fc:	e00c      	b.n	8001118 <HAL_GPIO_Init+0x228>
 80010fe:	2306      	movs	r3, #6
 8001100:	e00a      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001102:	2305      	movs	r3, #5
 8001104:	e008      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001106:	2304      	movs	r3, #4
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110a:	2303      	movs	r3, #3
 800110c:	e004      	b.n	8001118 <HAL_GPIO_Init+0x228>
 800110e:	2302      	movs	r3, #2
 8001110:	e002      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <HAL_GPIO_Init+0x228>
 8001116:	2300      	movs	r3, #0
 8001118:	69fa      	ldr	r2, [r7, #28]
 800111a:	f002 0203 	and.w	r2, r2, #3
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	4093      	lsls	r3, r2
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001128:	4934      	ldr	r1, [pc, #208]	; (80011fc <HAL_GPIO_Init+0x30c>)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	089b      	lsrs	r3, r3, #2
 800112e:	3302      	adds	r3, #2
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <HAL_GPIO_Init+0x330>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	43db      	mvns	r3, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4013      	ands	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800115a:	4a31      	ldr	r2, [pc, #196]	; (8001220 <HAL_GPIO_Init+0x330>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001160:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <HAL_GPIO_Init+0x330>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001184:	4a26      	ldr	r2, [pc, #152]	; (8001220 <HAL_GPIO_Init+0x330>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118a:	4b25      	ldr	r3, [pc, #148]	; (8001220 <HAL_GPIO_Init+0x330>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <HAL_GPIO_Init+0x330>)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <HAL_GPIO_Init+0x330>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011d8:	4a11      	ldr	r2, [pc, #68]	; (8001220 <HAL_GPIO_Init+0x330>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61fb      	str	r3, [r7, #28]
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	f67f ae90 	bls.w	8000f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011ec:	bf00      	nop
 80011ee:	3724      	adds	r7, #36	; 0x24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40021400 	.word	0x40021400
 8001218:	40021800 	.word	0x40021800
 800121c:	40021c00 	.word	0x40021c00
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001240:	e003      	b.n	800124a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	619a      	str	r2, [r3, #24]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e25b      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b00      	cmp	r3, #0
 8001274:	d075      	beq.n	8001362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001276:	4ba3      	ldr	r3, [pc, #652]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
 800127e:	2b04      	cmp	r3, #4
 8001280:	d00c      	beq.n	800129c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001282:	4ba0      	ldr	r3, [pc, #640]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800128a:	2b08      	cmp	r3, #8
 800128c:	d112      	bne.n	80012b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800128e:	4b9d      	ldr	r3, [pc, #628]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800129a:	d10b      	bne.n	80012b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	4b99      	ldr	r3, [pc, #612]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d05b      	beq.n	8001360 <HAL_RCC_OscConfig+0x108>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d157      	bne.n	8001360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e236      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012bc:	d106      	bne.n	80012cc <HAL_RCC_OscConfig+0x74>
 80012be:	4b91      	ldr	r3, [pc, #580]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a90      	ldr	r2, [pc, #576]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e01d      	b.n	8001308 <HAL_RCC_OscConfig+0xb0>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d4:	d10c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x98>
 80012d6:	4b8b      	ldr	r3, [pc, #556]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a8a      	ldr	r2, [pc, #552]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	4b88      	ldr	r3, [pc, #544]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a87      	ldr	r2, [pc, #540]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e00b      	b.n	8001308 <HAL_RCC_OscConfig+0xb0>
 80012f0:	4b84      	ldr	r3, [pc, #528]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a83      	ldr	r2, [pc, #524]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b81      	ldr	r3, [pc, #516]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a80      	ldr	r2, [pc, #512]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 8001302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d013      	beq.n	8001338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fd00 	bl	8000d14 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001318:	f7ff fcfc 	bl	8000d14 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e1fb      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132a:	4b76      	ldr	r3, [pc, #472]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0xc0>
 8001336:	e014      	b.n	8001362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fcec 	bl	8000d14 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001340:	f7ff fce8 	bl	8000d14 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b64      	cmp	r3, #100	; 0x64
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1e7      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001352:	4b6c      	ldr	r3, [pc, #432]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0xe8>
 800135e:	e000      	b.n	8001362 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d063      	beq.n	8001436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136e:	4b65      	ldr	r3, [pc, #404]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00b      	beq.n	8001392 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137a:	4b62      	ldr	r3, [pc, #392]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001382:	2b08      	cmp	r3, #8
 8001384:	d11c      	bne.n	80013c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001386:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d116      	bne.n	80013c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001392:	4b5c      	ldr	r3, [pc, #368]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d005      	beq.n	80013aa <HAL_RCC_OscConfig+0x152>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d001      	beq.n	80013aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e1bb      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	4b56      	ldr	r3, [pc, #344]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4952      	ldr	r1, [pc, #328]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013be:	e03a      	b.n	8001436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d020      	beq.n	800140a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c8:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <HAL_RCC_OscConfig+0x2b0>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ce:	f7ff fca1 	bl	8000d14 <HAL_GetTick>
 80013d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d6:	f7ff fc9d 	bl	8000d14 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	693b      	ldr	r3, [r7, #16]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e19c      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013e8:	4b46      	ldr	r3, [pc, #280]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0f0      	beq.n	80013d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f4:	4b43      	ldr	r3, [pc, #268]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4940      	ldr	r1, [pc, #256]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
 8001408:	e015      	b.n	8001436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140a:	4b3f      	ldr	r3, [pc, #252]	; (8001508 <HAL_RCC_OscConfig+0x2b0>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fc80 	bl	8000d14 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001418:	f7ff fc7c 	bl	8000d14 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e17b      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142a:	4b36      	ldr	r3, [pc, #216]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f0      	bne.n	8001418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b00      	cmp	r3, #0
 8001440:	d030      	beq.n	80014a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d016      	beq.n	8001478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144a:	4b30      	ldr	r3, [pc, #192]	; (800150c <HAL_RCC_OscConfig+0x2b4>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001450:	f7ff fc60 	bl	8000d14 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001458:	f7ff fc5c 	bl	8000d14 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e15b      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146a:	4b26      	ldr	r3, [pc, #152]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 800146c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x200>
 8001476:	e015      	b.n	80014a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x2b4>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147e:	f7ff fc49 	bl	8000d14 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001486:	f7ff fc45 	bl	8000d14 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e144      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 800149a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 80a0 	beq.w	80015f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10f      	bne.n	80014e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_RCC_OscConfig+0x2ac>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_RCC_OscConfig+0x2b8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d121      	bne.n	8001532 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_RCC_OscConfig+0x2b8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a07      	ldr	r2, [pc, #28]	; (8001510 <HAL_RCC_OscConfig+0x2b8>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fc0b 	bl	8000d14 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	e011      	b.n	8001526 <HAL_RCC_OscConfig+0x2ce>
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	42470000 	.word	0x42470000
 800150c:	42470e80 	.word	0x42470e80
 8001510:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001514:	f7ff fbfe 	bl	8000d14 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e0fd      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001526:	4b81      	ldr	r3, [pc, #516]	; (800172c <HAL_RCC_OscConfig+0x4d4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d106      	bne.n	8001548 <HAL_RCC_OscConfig+0x2f0>
 800153a:	4b7d      	ldr	r3, [pc, #500]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153e:	4a7c      	ldr	r2, [pc, #496]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6713      	str	r3, [r2, #112]	; 0x70
 8001546:	e01c      	b.n	8001582 <HAL_RCC_OscConfig+0x32a>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b05      	cmp	r3, #5
 800154e:	d10c      	bne.n	800156a <HAL_RCC_OscConfig+0x312>
 8001550:	4b77      	ldr	r3, [pc, #476]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a76      	ldr	r2, [pc, #472]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 8001556:	f043 0304 	orr.w	r3, r3, #4
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
 800155c:	4b74      	ldr	r3, [pc, #464]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	4a73      	ldr	r2, [pc, #460]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6713      	str	r3, [r2, #112]	; 0x70
 8001568:	e00b      	b.n	8001582 <HAL_RCC_OscConfig+0x32a>
 800156a:	4b71      	ldr	r3, [pc, #452]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 800156c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156e:	4a70      	ldr	r2, [pc, #448]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6713      	str	r3, [r2, #112]	; 0x70
 8001576:	4b6e      	ldr	r3, [pc, #440]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 8001578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157a:	4a6d      	ldr	r2, [pc, #436]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d015      	beq.n	80015b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff fbc3 	bl	8000d14 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001590:	e00a      	b.n	80015a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001592:	f7ff fbbf 	bl	8000d14 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e0bc      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a8:	4b61      	ldr	r3, [pc, #388]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0ee      	beq.n	8001592 <HAL_RCC_OscConfig+0x33a>
 80015b4:	e014      	b.n	80015e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b6:	f7ff fbad 	bl	8000d14 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015bc:	e00a      	b.n	80015d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff fba9 	bl	8000d14 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e0a6      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d4:	4b56      	ldr	r3, [pc, #344]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1ee      	bne.n	80015be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e0:	7dfb      	ldrb	r3, [r7, #23]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d105      	bne.n	80015f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015e6:	4b52      	ldr	r3, [pc, #328]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a51      	ldr	r2, [pc, #324]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 80015ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8092 	beq.w	8001720 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015fc:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b08      	cmp	r3, #8
 8001606:	d05c      	beq.n	80016c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d141      	bne.n	8001694 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001610:	4b48      	ldr	r3, [pc, #288]	; (8001734 <HAL_RCC_OscConfig+0x4dc>)
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001616:	f7ff fb7d 	bl	8000d14 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161e:	f7ff fb79 	bl	8000d14 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e078      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001630:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69da      	ldr	r2, [r3, #28]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164a:	019b      	lsls	r3, r3, #6
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	3b01      	subs	r3, #1
 8001656:	041b      	lsls	r3, r3, #16
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	061b      	lsls	r3, r3, #24
 8001660:	4933      	ldr	r1, [pc, #204]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 8001662:	4313      	orrs	r3, r2
 8001664:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001666:	4b33      	ldr	r3, [pc, #204]	; (8001734 <HAL_RCC_OscConfig+0x4dc>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fb52 	bl	8000d14 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001674:	f7ff fb4e 	bl	8000d14 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e04d      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001686:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x41c>
 8001692:	e045      	b.n	8001720 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b27      	ldr	r3, [pc, #156]	; (8001734 <HAL_RCC_OscConfig+0x4dc>)
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff fb3b 	bl	8000d14 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff fb37 	bl	8000d14 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e036      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b4:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f0      	bne.n	80016a2 <HAL_RCC_OscConfig+0x44a>
 80016c0:	e02e      	b.n	8001720 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e029      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_RCC_OscConfig+0x4d8>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d11c      	bne.n	800171c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d115      	bne.n	800171c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016f6:	4013      	ands	r3, r2
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d10d      	bne.n	800171c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d106      	bne.n	800171c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40007000 	.word	0x40007000
 8001730:	40023800 	.word	0x40023800
 8001734:	42470060 	.word	0x42470060

08001738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e0cc      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 030f 	and.w	r3, r3, #15
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d90c      	bls.n	8001774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	4b65      	ldr	r3, [pc, #404]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001762:	4b63      	ldr	r3, [pc, #396]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d001      	beq.n	8001774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0b8      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d020      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800178c:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001796:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b0:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	494d      	ldr	r1, [pc, #308]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d044      	beq.n	8001858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d119      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e07f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d003      	beq.n	80017f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	2b03      	cmp	r3, #3
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f6:	4b3f      	ldr	r3, [pc, #252]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d109      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e06f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001806:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e067      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001816:	4b37      	ldr	r3, [pc, #220]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f023 0203 	bic.w	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4934      	ldr	r1, [pc, #208]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	4313      	orrs	r3, r2
 8001826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001828:	f7ff fa74 	bl	8000d14 <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182e:	e00a      	b.n	8001846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001830:	f7ff fa70 	bl	8000d14 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e04f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 020c 	and.w	r2, r3, #12
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	429a      	cmp	r2, r3
 8001856:	d1eb      	bne.n	8001830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001858:	4b25      	ldr	r3, [pc, #148]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 030f 	and.w	r3, r3, #15
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d20c      	bcs.n	8001880 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e032      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4916      	ldr	r1, [pc, #88]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	490e      	ldr	r1, [pc, #56]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018be:	f000 f821 	bl	8001904 <HAL_RCC_GetSysClockFreq>
 80018c2:	4601      	mov	r1, r0
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	5cd3      	ldrb	r3, [r2, r3]
 80018d2:	fa21 f303 	lsr.w	r3, r1, r3
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f924 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023c00 	.word	0x40023c00
 80018f4:	40023800 	.word	0x40023800
 80018f8:	08004f84 	.word	0x08004f84
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	2300      	movs	r3, #0
 8001914:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800191a:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b04      	cmp	r3, #4
 8001924:	d007      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0x32>
 8001926:	2b08      	cmp	r3, #8
 8001928:	d008      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x38>
 800192a:	2b00      	cmp	r3, #0
 800192c:	f040 80b4 	bne.w	8001a98 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4b5e      	ldr	r3, [pc, #376]	; (8001aac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001932:	60bb      	str	r3, [r7, #8]
       break;
 8001934:	e0b3      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001936:	4b5e      	ldr	r3, [pc, #376]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001938:	60bb      	str	r3, [r7, #8]
      break;
 800193a:	e0b0      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800193c:	4b5a      	ldr	r3, [pc, #360]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001944:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001946:	4b58      	ldr	r3, [pc, #352]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d04a      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001952:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	f04f 0400 	mov.w	r4, #0
 800195c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001960:	f04f 0200 	mov.w	r2, #0
 8001964:	ea03 0501 	and.w	r5, r3, r1
 8001968:	ea04 0602 	and.w	r6, r4, r2
 800196c:	4629      	mov	r1, r5
 800196e:	4632      	mov	r2, r6
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	f04f 0400 	mov.w	r4, #0
 8001978:	0154      	lsls	r4, r2, #5
 800197a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800197e:	014b      	lsls	r3, r1, #5
 8001980:	4619      	mov	r1, r3
 8001982:	4622      	mov	r2, r4
 8001984:	1b49      	subs	r1, r1, r5
 8001986:	eb62 0206 	sbc.w	r2, r2, r6
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	f04f 0400 	mov.w	r4, #0
 8001992:	0194      	lsls	r4, r2, #6
 8001994:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001998:	018b      	lsls	r3, r1, #6
 800199a:	1a5b      	subs	r3, r3, r1
 800199c:	eb64 0402 	sbc.w	r4, r4, r2
 80019a0:	f04f 0100 	mov.w	r1, #0
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	00e2      	lsls	r2, r4, #3
 80019aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019ae:	00d9      	lsls	r1, r3, #3
 80019b0:	460b      	mov	r3, r1
 80019b2:	4614      	mov	r4, r2
 80019b4:	195b      	adds	r3, r3, r5
 80019b6:	eb44 0406 	adc.w	r4, r4, r6
 80019ba:	f04f 0100 	mov.w	r1, #0
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	0262      	lsls	r2, r4, #9
 80019c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80019c8:	0259      	lsls	r1, r3, #9
 80019ca:	460b      	mov	r3, r1
 80019cc:	4614      	mov	r4, r2
 80019ce:	4618      	mov	r0, r3
 80019d0:	4621      	mov	r1, r4
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f04f 0400 	mov.w	r4, #0
 80019d8:	461a      	mov	r2, r3
 80019da:	4623      	mov	r3, r4
 80019dc:	f7fe fc98 	bl	8000310 <__aeabi_uldivmod>
 80019e0:	4603      	mov	r3, r0
 80019e2:	460c      	mov	r4, r1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	e049      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e8:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	099b      	lsrs	r3, r3, #6
 80019ee:	f04f 0400 	mov.w	r4, #0
 80019f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019f6:	f04f 0200 	mov.w	r2, #0
 80019fa:	ea03 0501 	and.w	r5, r3, r1
 80019fe:	ea04 0602 	and.w	r6, r4, r2
 8001a02:	4629      	mov	r1, r5
 8001a04:	4632      	mov	r2, r6
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	f04f 0400 	mov.w	r4, #0
 8001a0e:	0154      	lsls	r4, r2, #5
 8001a10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a14:	014b      	lsls	r3, r1, #5
 8001a16:	4619      	mov	r1, r3
 8001a18:	4622      	mov	r2, r4
 8001a1a:	1b49      	subs	r1, r1, r5
 8001a1c:	eb62 0206 	sbc.w	r2, r2, r6
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	f04f 0400 	mov.w	r4, #0
 8001a28:	0194      	lsls	r4, r2, #6
 8001a2a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a2e:	018b      	lsls	r3, r1, #6
 8001a30:	1a5b      	subs	r3, r3, r1
 8001a32:	eb64 0402 	sbc.w	r4, r4, r2
 8001a36:	f04f 0100 	mov.w	r1, #0
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	00e2      	lsls	r2, r4, #3
 8001a40:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a44:	00d9      	lsls	r1, r3, #3
 8001a46:	460b      	mov	r3, r1
 8001a48:	4614      	mov	r4, r2
 8001a4a:	195b      	adds	r3, r3, r5
 8001a4c:	eb44 0406 	adc.w	r4, r4, r6
 8001a50:	f04f 0100 	mov.w	r1, #0
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	02a2      	lsls	r2, r4, #10
 8001a5a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a5e:	0299      	lsls	r1, r3, #10
 8001a60:	460b      	mov	r3, r1
 8001a62:	4614      	mov	r4, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	4621      	mov	r1, r4
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f04f 0400 	mov.w	r4, #0
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4623      	mov	r3, r4
 8001a72:	f7fe fc4d 	bl	8000310 <__aeabi_uldivmod>
 8001a76:	4603      	mov	r3, r0
 8001a78:	460c      	mov	r4, r1
 8001a7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	0c1b      	lsrs	r3, r3, #16
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	3301      	adds	r3, #1
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a94:	60bb      	str	r3, [r7, #8]
      break;
 8001a96:	e002      	b.n	8001a9e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a9a:	60bb      	str	r3, [r7, #8]
      break;
 8001a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	00f42400 	.word	0x00f42400
 8001ab0:	007a1200 	.word	0x007a1200

08001ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ab8:	4b03      	ldr	r3, [pc, #12]	; (8001ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aba:	681b      	ldr	r3, [r3, #0]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000000 	.word	0x20000000

08001acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ad0:	f7ff fff0 	bl	8001ab4 <HAL_RCC_GetHCLKFreq>
 8001ad4:	4601      	mov	r1, r0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	0a9b      	lsrs	r3, r3, #10
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae2:	5cd3      	ldrb	r3, [r2, r3]
 8001ae4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	08004f94 	.word	0x08004f94

08001af4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	220f      	movs	r2, #15
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_RCC_GetClockConfig+0x5c>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <HAL_RCC_GetClockConfig+0x5c>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_RCC_GetClockConfig+0x5c>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_RCC_GetClockConfig+0x60>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 020f 	and.w	r2, r3, #15
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	601a      	str	r2, [r3, #0]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e01d      	b.n	8001ba6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f815 	bl	8001bae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3304      	adds	r3, #4
 8001b94:	4619      	mov	r1, r3
 8001b96:	4610      	mov	r0, r2
 8001b98:	f000 f968 	bl	8001e6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b085      	sub	sp, #20
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68da      	ldr	r2, [r3, #12]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b06      	cmp	r3, #6
 8001bea:	d007      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f003 0302 	and.w	r3, r3, #2
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d122      	bne.n	8001c66 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d11b      	bne.n	8001c66 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f06f 0202 	mvn.w	r2, #2
 8001c36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f8ee 	bl	8001e2e <HAL_TIM_IC_CaptureCallback>
 8001c52:	e005      	b.n	8001c60 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 f8e0 	bl	8001e1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8f1 	bl	8001e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d122      	bne.n	8001cba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	d11b      	bne.n	8001cba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f06f 0204 	mvn.w	r2, #4
 8001c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f8c4 	bl	8001e2e <HAL_TIM_IC_CaptureCallback>
 8001ca6:	e005      	b.n	8001cb4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f8b6 	bl	8001e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8c7 	bl	8001e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d122      	bne.n	8001d0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d11b      	bne.n	8001d0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f06f 0208 	mvn.w	r2, #8
 8001cde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2204      	movs	r2, #4
 8001ce4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f89a 	bl	8001e2e <HAL_TIM_IC_CaptureCallback>
 8001cfa:	e005      	b.n	8001d08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f88c 	bl	8001e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f89d 	bl	8001e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	f003 0310 	and.w	r3, r3, #16
 8001d18:	2b10      	cmp	r3, #16
 8001d1a:	d122      	bne.n	8001d62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d11b      	bne.n	8001d62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f06f 0210 	mvn.w	r2, #16
 8001d32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2208      	movs	r2, #8
 8001d38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d003      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 f870 	bl	8001e2e <HAL_TIM_IC_CaptureCallback>
 8001d4e:	e005      	b.n	8001d5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f862 	bl	8001e1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f873 	bl	8001e42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d10e      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f06f 0201 	mvn.w	r2, #1
 8001d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7fe fe8d 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d98:	2b80      	cmp	r3, #128	; 0x80
 8001d9a:	d10e      	bne.n	8001dba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da6:	2b80      	cmp	r3, #128	; 0x80
 8001da8:	d107      	bne.n	8001dba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f903 	bl	8001fc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc4:	2b40      	cmp	r3, #64	; 0x40
 8001dc6:	d10e      	bne.n	8001de6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd2:	2b40      	cmp	r3, #64	; 0x40
 8001dd4:	d107      	bne.n	8001de6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f838 	bl	8001e56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b20      	cmp	r3, #32
 8001df2:	d10e      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	d107      	bne.n	8001e12 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f06f 0220 	mvn.w	r2, #32
 8001e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 f8cd 	bl	8001fac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a40      	ldr	r2, [pc, #256]	; (8001f80 <TIM_Base_SetConfig+0x114>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d013      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8a:	d00f      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a3d      	ldr	r2, [pc, #244]	; (8001f84 <TIM_Base_SetConfig+0x118>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d00b      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a3c      	ldr	r2, [pc, #240]	; (8001f88 <TIM_Base_SetConfig+0x11c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d007      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a3b      	ldr	r2, [pc, #236]	; (8001f8c <TIM_Base_SetConfig+0x120>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d003      	beq.n	8001eac <TIM_Base_SetConfig+0x40>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a3a      	ldr	r2, [pc, #232]	; (8001f90 <TIM_Base_SetConfig+0x124>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d108      	bne.n	8001ebe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a2f      	ldr	r2, [pc, #188]	; (8001f80 <TIM_Base_SetConfig+0x114>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d02b      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ecc:	d027      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a2c      	ldr	r2, [pc, #176]	; (8001f84 <TIM_Base_SetConfig+0x118>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d023      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a2b      	ldr	r2, [pc, #172]	; (8001f88 <TIM_Base_SetConfig+0x11c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01f      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a2a      	ldr	r2, [pc, #168]	; (8001f8c <TIM_Base_SetConfig+0x120>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d01b      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a29      	ldr	r2, [pc, #164]	; (8001f90 <TIM_Base_SetConfig+0x124>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d017      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a28      	ldr	r2, [pc, #160]	; (8001f94 <TIM_Base_SetConfig+0x128>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d013      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a27      	ldr	r2, [pc, #156]	; (8001f98 <TIM_Base_SetConfig+0x12c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00f      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a26      	ldr	r2, [pc, #152]	; (8001f9c <TIM_Base_SetConfig+0x130>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00b      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a25      	ldr	r2, [pc, #148]	; (8001fa0 <TIM_Base_SetConfig+0x134>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <TIM_Base_SetConfig+0x138>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d003      	beq.n	8001f1e <TIM_Base_SetConfig+0xb2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a23      	ldr	r2, [pc, #140]	; (8001fa8 <TIM_Base_SetConfig+0x13c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d108      	bne.n	8001f30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <TIM_Base_SetConfig+0x114>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d003      	beq.n	8001f64 <TIM_Base_SetConfig+0xf8>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <TIM_Base_SetConfig+0x124>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d103      	bne.n	8001f6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	615a      	str	r2, [r3, #20]
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40010000 	.word	0x40010000
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40000800 	.word	0x40000800
 8001f8c:	40000c00 	.word	0x40000c00
 8001f90:	40010400 	.word	0x40010400
 8001f94:	40014000 	.word	0x40014000
 8001f98:	40014400 	.word	0x40014400
 8001f9c:	40014800 	.word	0x40014800
 8001fa0:	40001800 	.word	0x40001800
 8001fa4:	40001c00 	.word	0x40001c00
 8001fa8:	40002000 	.word	0x40002000

08001fac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f103 0208 	add.w	r2, r3, #8
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f103 0208 	add.w	r2, r3, #8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f103 0208 	add.w	r2, r3, #8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800202e:	b480      	push	{r7}
 8002030:	b085      	sub	sp, #20
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	601a      	str	r2, [r3, #0]
}
 800206a:	bf00      	nop
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6892      	ldr	r2, [r2, #8]
 800208c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6852      	ldr	r2, [r2, #4]
 8002096:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d103      	bne.n	80020aa <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	1e5a      	subs	r2, r3, #1
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3714      	adds	r7, #20
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b08c      	sub	sp, #48	; 0x30
 80020ce:	af04      	add	r7, sp, #16
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	603b      	str	r3, [r7, #0]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 feba 	bl	8002e58 <pvPortMalloc>
 80020e4:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00e      	beq.n	800210a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80020ec:	2058      	movs	r0, #88	; 0x58
 80020ee:	f000 feb3 	bl	8002e58 <pvPortMalloc>
 80020f2:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002100:	e005      	b.n	800210e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002102:	6978      	ldr	r0, [r7, #20]
 8002104:	f000 ff84 	bl	8003010 <vPortFree>
 8002108:	e001      	b.n	800210e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d013      	beq.n	800213c <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	2300      	movs	r3, #0
 8002118:	9303      	str	r3, [sp, #12]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	9302      	str	r3, [sp, #8]
 800211e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f80e 	bl	800214c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002130:	69f8      	ldr	r0, [r7, #28]
 8002132:	f000 f8a1 	bl	8002278 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002136:	2301      	movs	r3, #1
 8002138:	61bb      	str	r3, [r7, #24]
 800213a:	e002      	b.n	8002142 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800213c:	f04f 33ff 	mov.w	r3, #4294967295
 8002140:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002142:	69bb      	ldr	r3, [r7, #24]
    }
 8002144:	4618      	mov	r0, r3
 8002146:	3720      	adds	r7, #32
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800215a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800215c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	461a      	mov	r2, r3
 8002164:	21a5      	movs	r1, #165	; 0xa5
 8002166:	f002 fa7d 	bl	8004664 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002174:	3b01      	subs	r3, #1
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f023 0307 	bic.w	r3, r3, #7
 8002182:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <prvInitialiseNewTask+0x56>
 800218e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002192:	f383 8811 	msr	BASEPRI, r3
 8002196:	f3bf 8f6f 	isb	sy
 800219a:	f3bf 8f4f 	dsb	sy
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	e7fe      	b.n	80021a0 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d01f      	beq.n	80021e8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	e012      	b.n	80021d4 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	4413      	add	r3, r2
 80021b4:	7819      	ldrb	r1, [r3, #0]
 80021b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	4413      	add	r3, r2
 80021bc:	3334      	adds	r3, #52	; 0x34
 80021be:	460a      	mov	r2, r1
 80021c0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	4413      	add	r3, r2
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d006      	beq.n	80021dc <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	3301      	adds	r3, #1
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	2b09      	cmp	r3, #9
 80021d8:	d9e9      	bls.n	80021ae <prvInitialiseNewTask+0x62>
 80021da:	e000      	b.n	80021de <prvInitialiseNewTask+0x92>
            {
                break;
 80021dc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021e6:	e003      	b.n	80021f0 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d901      	bls.n	80021fa <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021f6:	2304      	movs	r3, #4
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80021fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021fe:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002204:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	2200      	movs	r2, #0
 800220a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	3304      	adds	r3, #4
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff feff 	bl	8002014 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	3318      	adds	r3, #24
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fefa 	bl	8002014 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002224:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	f1c3 0205 	rsb	r2, r3, #5
 800222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002238:	3350      	adds	r3, #80	; 0x50
 800223a:	2204      	movs	r2, #4
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f002 fa10 	bl	8004664 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	3354      	adds	r3, #84	; 0x54
 8002248:	2201      	movs	r2, #1
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f002 fa09 	bl	8004664 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	68f9      	ldr	r1, [r7, #12]
 8002256:	69b8      	ldr	r0, [r7, #24]
 8002258:	f000 fb76 	bl	8002948 <pxPortInitialiseStack>
 800225c:	4602      	mov	r2, r0
 800225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002260:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800226c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800226e:	bf00      	nop
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af02      	add	r7, sp, #8
 800227e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002280:	f000 fd08 	bl	8002c94 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002284:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <prvAddNewTaskToReadyList+0xfc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	4a3a      	ldr	r2, [pc, #232]	; (8002374 <prvAddNewTaskToReadyList+0xfc>)
 800228c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800228e:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <prvAddNewTaskToReadyList+0x100>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002296:	4a38      	ldr	r2, [pc, #224]	; (8002378 <prvAddNewTaskToReadyList+0x100>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800229c:	4b35      	ldr	r3, [pc, #212]	; (8002374 <prvAddNewTaskToReadyList+0xfc>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d110      	bne.n	80022c6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80022a4:	f000 fab8 	bl	8002818 <prvInitialiseTaskLists>
 80022a8:	e00d      	b.n	80022c6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80022aa:	4b34      	ldr	r3, [pc, #208]	; (800237c <prvAddNewTaskToReadyList+0x104>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022b2:	4b31      	ldr	r3, [pc, #196]	; (8002378 <prvAddNewTaskToReadyList+0x100>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	429a      	cmp	r2, r3
 80022be:	d802      	bhi.n	80022c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80022c0:	4a2d      	ldr	r2, [pc, #180]	; (8002378 <prvAddNewTaskToReadyList+0x100>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80022c6:	4b2e      	ldr	r3, [pc, #184]	; (8002380 <prvAddNewTaskToReadyList+0x108>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	4a2c      	ldr	r2, [pc, #176]	; (8002380 <prvAddNewTaskToReadyList+0x108>)
 80022ce:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <prvAddNewTaskToReadyList+0x108>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d016      	beq.n	800230c <prvAddNewTaskToReadyList+0x94>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f001 ff83 	bl	80041ec <SEGGER_SYSVIEW_OnTaskCreate>
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	461d      	mov	r5, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	461c      	mov	r4, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	1ae3      	subs	r3, r4, r3
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	462b      	mov	r3, r5
 8002308:	f000 ff9e 	bl	8003248 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4618      	mov	r0, r3
 8002310:	f001 fff0 	bl	80042f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002318:	2201      	movs	r2, #1
 800231a:	409a      	lsls	r2, r3
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <prvAddNewTaskToReadyList+0x10c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4313      	orrs	r3, r2
 8002322:	4a18      	ldr	r2, [pc, #96]	; (8002384 <prvAddNewTaskToReadyList+0x10c>)
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4a15      	ldr	r2, [pc, #84]	; (8002388 <prvAddNewTaskToReadyList+0x110>)
 8002334:	441a      	add	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3304      	adds	r3, #4
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f7ff fe76 	bl	800202e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002342:	f000 fcd5 	bl	8002cf0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002346:	4b0d      	ldr	r3, [pc, #52]	; (800237c <prvAddNewTaskToReadyList+0x104>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00e      	beq.n	800236c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <prvAddNewTaskToReadyList+0x100>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	429a      	cmp	r2, r3
 800235a:	d207      	bcs.n	800236c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <prvAddNewTaskToReadyList+0x114>)
 800235e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	f3bf 8f4f 	dsb	sy
 8002368:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bdb0      	pop	{r4, r5, r7, pc}
 8002374:	2000016c 	.word	0x2000016c
 8002378:	20000094 	.word	0x20000094
 800237c:	20000178 	.word	0x20000178
 8002380:	20000188 	.word	0x20000188
 8002384:	20000174 	.word	0x20000174
 8002388:	20000098 	.word	0x20000098
 800238c:	e000ed04 	.word	0xe000ed04

08002390 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002396:	4b23      	ldr	r3, [pc, #140]	; (8002424 <vTaskStartScheduler+0x94>)
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	2300      	movs	r3, #0
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2300      	movs	r3, #0
 80023a0:	2282      	movs	r2, #130	; 0x82
 80023a2:	4921      	ldr	r1, [pc, #132]	; (8002428 <vTaskStartScheduler+0x98>)
 80023a4:	4821      	ldr	r0, [pc, #132]	; (800242c <vTaskStartScheduler+0x9c>)
 80023a6:	f7ff fe90 	bl	80020ca <xTaskCreate>
 80023aa:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d123      	bne.n	80023fa <vTaskStartScheduler+0x6a>
 80023b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b6:	f383 8811 	msr	BASEPRI, r3
 80023ba:	f3bf 8f6f 	isb	sy
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <vTaskStartScheduler+0xa0>)
 80023c6:	f04f 32ff 	mov.w	r2, #4294967295
 80023ca:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80023cc:	4b19      	ldr	r3, [pc, #100]	; (8002434 <vTaskStartScheduler+0xa4>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80023d2:	4b19      	ldr	r3, [pc, #100]	; (8002438 <vTaskStartScheduler+0xa8>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <vTaskStartScheduler+0xac>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <vTaskStartScheduler+0x94>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d102      	bne.n	80023ea <vTaskStartScheduler+0x5a>
 80023e4:	f001 fee6 	bl	80041b4 <SEGGER_SYSVIEW_OnIdle>
 80023e8:	e004      	b.n	80023f4 <vTaskStartScheduler+0x64>
 80023ea:	4b14      	ldr	r3, [pc, #80]	; (800243c <vTaskStartScheduler+0xac>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f001 ff3e 	bl	8004270 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80023f4:	f000 fb36 	bl	8002a64 <xPortStartScheduler>
 80023f8:	e00d      	b.n	8002416 <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002400:	d109      	bne.n	8002416 <vTaskStartScheduler+0x86>
 8002402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002406:	f383 8811 	msr	BASEPRI, r3
 800240a:	f3bf 8f6f 	isb	sy
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	e7fe      	b.n	8002414 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <vTaskStartScheduler+0xb0>)
 8002418:	681b      	ldr	r3, [r3, #0]
}
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000190 	.word	0x20000190
 8002428:	08004f0c 	.word	0x08004f0c
 800242c:	080027e9 	.word	0x080027e9
 8002430:	2000018c 	.word	0x2000018c
 8002434:	20000178 	.word	0x20000178
 8002438:	20000170 	.word	0x20000170
 800243c:	20000094 	.word	0x20000094
 8002440:	2000000c 	.word	0x2000000c

08002444 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <vTaskSuspendAll+0x18>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	3301      	adds	r3, #1
 800244e:	4a03      	ldr	r2, [pc, #12]	; (800245c <vTaskSuspendAll+0x18>)
 8002450:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002452:	bf00      	nop
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	20000194 	.word	0x20000194

08002460 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800246e:	4b43      	ldr	r3, [pc, #268]	; (800257c <xTaskResumeAll+0x11c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <xTaskResumeAll+0x2a>
 8002476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800247a:	f383 8811 	msr	BASEPRI, r3
 800247e:	f3bf 8f6f 	isb	sy
 8002482:	f3bf 8f4f 	dsb	sy
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	e7fe      	b.n	8002488 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800248a:	f000 fc03 	bl	8002c94 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800248e:	4b3b      	ldr	r3, [pc, #236]	; (800257c <xTaskResumeAll+0x11c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3b01      	subs	r3, #1
 8002494:	4a39      	ldr	r2, [pc, #228]	; (800257c <xTaskResumeAll+0x11c>)
 8002496:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002498:	4b38      	ldr	r3, [pc, #224]	; (800257c <xTaskResumeAll+0x11c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d165      	bne.n	800256c <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024a0:	4b37      	ldr	r3, [pc, #220]	; (8002580 <xTaskResumeAll+0x120>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d061      	beq.n	800256c <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024a8:	e032      	b.n	8002510 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024aa:	4b36      	ldr	r3, [pc, #216]	; (8002584 <xTaskResumeAll+0x124>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	3318      	adds	r3, #24
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fddd 	bl	8002076 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3304      	adds	r3, #4
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fdd8 	bl	8002076 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f001 ff13 	bl	80042f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	2201      	movs	r2, #1
 80024d4:	409a      	lsls	r2, r3
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <xTaskResumeAll+0x128>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	4a2a      	ldr	r2, [pc, #168]	; (8002588 <xTaskResumeAll+0x128>)
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4a27      	ldr	r2, [pc, #156]	; (800258c <xTaskResumeAll+0x12c>)
 80024ee:	441a      	add	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f7ff fd99 	bl	800202e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002500:	4b23      	ldr	r3, [pc, #140]	; (8002590 <xTaskResumeAll+0x130>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <xTaskResumeAll+0x134>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002510:	4b1c      	ldr	r3, [pc, #112]	; (8002584 <xTaskResumeAll+0x124>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1c8      	bne.n	80024aa <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800251e:	f000 f9f7 	bl	8002910 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <xTaskResumeAll+0x138>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d010      	beq.n	8002550 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800252e:	f000 f837 	bl	80025a0 <xTaskIncrementTick>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8002538:	4b16      	ldr	r3, [pc, #88]	; (8002594 <xTaskResumeAll+0x134>)
 800253a:	2201      	movs	r2, #1
 800253c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3b01      	subs	r3, #1
 8002542:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f1      	bne.n	800252e <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <xTaskResumeAll+0x138>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002550:	4b10      	ldr	r3, [pc, #64]	; (8002594 <xTaskResumeAll+0x134>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d009      	beq.n	800256c <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002558:	2301      	movs	r3, #1
 800255a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800255c:	4b0f      	ldr	r3, [pc, #60]	; (800259c <xTaskResumeAll+0x13c>)
 800255e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800256c:	f000 fbc0 	bl	8002cf0 <vPortExitCritical>

    return xAlreadyYielded;
 8002570:	68bb      	ldr	r3, [r7, #8]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000194 	.word	0x20000194
 8002580:	2000016c 	.word	0x2000016c
 8002584:	2000012c 	.word	0x2000012c
 8002588:	20000174 	.word	0x20000174
 800258c:	20000098 	.word	0x20000098
 8002590:	20000094 	.word	0x20000094
 8002594:	20000180 	.word	0x20000180
 8002598:	2000017c 	.word	0x2000017c
 800259c:	e000ed04 	.word	0xe000ed04

080025a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025aa:	4b50      	ldr	r3, [pc, #320]	; (80026ec <xTaskIncrementTick+0x14c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 8091 	bne.w	80026d6 <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025b4:	4b4e      	ldr	r3, [pc, #312]	; (80026f0 <xTaskIncrementTick+0x150>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80025bc:	4a4c      	ldr	r2, [pc, #304]	; (80026f0 <xTaskIncrementTick+0x150>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d11f      	bne.n	8002608 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80025c8:	4b4a      	ldr	r3, [pc, #296]	; (80026f4 <xTaskIncrementTick+0x154>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d009      	beq.n	80025e6 <xTaskIncrementTick+0x46>
 80025d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d6:	f383 8811 	msr	BASEPRI, r3
 80025da:	f3bf 8f6f 	isb	sy
 80025de:	f3bf 8f4f 	dsb	sy
 80025e2:	603b      	str	r3, [r7, #0]
 80025e4:	e7fe      	b.n	80025e4 <xTaskIncrementTick+0x44>
 80025e6:	4b43      	ldr	r3, [pc, #268]	; (80026f4 <xTaskIncrementTick+0x154>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	4b42      	ldr	r3, [pc, #264]	; (80026f8 <xTaskIncrementTick+0x158>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a40      	ldr	r2, [pc, #256]	; (80026f4 <xTaskIncrementTick+0x154>)
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4a40      	ldr	r2, [pc, #256]	; (80026f8 <xTaskIncrementTick+0x158>)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b40      	ldr	r3, [pc, #256]	; (80026fc <xTaskIncrementTick+0x15c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	4a3e      	ldr	r2, [pc, #248]	; (80026fc <xTaskIncrementTick+0x15c>)
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	f000 f984 	bl	8002910 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002608:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <xTaskIncrementTick+0x160>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	429a      	cmp	r2, r3
 8002610:	d34c      	bcc.n	80026ac <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002612:	4b38      	ldr	r3, [pc, #224]	; (80026f4 <xTaskIncrementTick+0x154>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d104      	bne.n	8002626 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800261c:	4b38      	ldr	r3, [pc, #224]	; (8002700 <xTaskIncrementTick+0x160>)
 800261e:	f04f 32ff 	mov.w	r2, #4294967295
 8002622:	601a      	str	r2, [r3, #0]
                    break;
 8002624:	e042      	b.n	80026ac <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002626:	4b33      	ldr	r3, [pc, #204]	; (80026f4 <xTaskIncrementTick+0x154>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	429a      	cmp	r2, r3
 800263c:	d203      	bcs.n	8002646 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800263e:	4a30      	ldr	r2, [pc, #192]	; (8002700 <xTaskIncrementTick+0x160>)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002644:	e032      	b.n	80026ac <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	3304      	adds	r3, #4
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fd13 	bl	8002076 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	2b00      	cmp	r3, #0
 8002656:	d004      	beq.n	8002662 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	3318      	adds	r3, #24
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff fd0a 	bl	8002076 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	4618      	mov	r0, r3
 8002666:	f001 fe45 	bl	80042f4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266e:	2201      	movs	r2, #1
 8002670:	409a      	lsls	r2, r3
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <xTaskIncrementTick+0x164>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4313      	orrs	r3, r2
 8002678:	4a22      	ldr	r2, [pc, #136]	; (8002704 <xTaskIncrementTick+0x164>)
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <xTaskIncrementTick+0x168>)
 800268a:	441a      	add	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	3304      	adds	r3, #4
 8002690:	4619      	mov	r1, r3
 8002692:	4610      	mov	r0, r2
 8002694:	f7ff fccb 	bl	800202e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <xTaskIncrementTick+0x16c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d3b5      	bcc.n	8002612 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80026a6:	2301      	movs	r3, #1
 80026a8:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026aa:	e7b2      	b.n	8002612 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <xTaskIncrementTick+0x16c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026b2:	4915      	ldr	r1, [pc, #84]	; (8002708 <xTaskIncrementTick+0x168>)
 80026b4:	4613      	mov	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d901      	bls.n	80026c8 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 80026c4:	2301      	movs	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80026c8:	4b11      	ldr	r3, [pc, #68]	; (8002710 <xTaskIncrementTick+0x170>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d007      	beq.n	80026e0 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 80026d0:	2301      	movs	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	e004      	b.n	80026e0 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <xTaskIncrementTick+0x174>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	3301      	adds	r3, #1
 80026dc:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <xTaskIncrementTick+0x174>)
 80026de:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80026e0:	697b      	ldr	r3, [r7, #20]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000194 	.word	0x20000194
 80026f0:	20000170 	.word	0x20000170
 80026f4:	20000124 	.word	0x20000124
 80026f8:	20000128 	.word	0x20000128
 80026fc:	20000184 	.word	0x20000184
 8002700:	2000018c 	.word	0x2000018c
 8002704:	20000174 	.word	0x20000174
 8002708:	20000098 	.word	0x20000098
 800270c:	20000094 	.word	0x20000094
 8002710:	20000180 	.word	0x20000180
 8002714:	2000017c 	.word	0x2000017c

08002718 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800271e:	4b2c      	ldr	r3, [pc, #176]	; (80027d0 <vTaskSwitchContext+0xb8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002726:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <vTaskSwitchContext+0xbc>)
 8002728:	2201      	movs	r2, #1
 800272a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800272c:	e04c      	b.n	80027c8 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <vTaskSwitchContext+0xbc>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002734:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <vTaskSwitchContext+0xc0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	fab3 f383 	clz	r3, r3
 8002740:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002742:	7afb      	ldrb	r3, [r7, #11]
 8002744:	f1c3 031f 	rsb	r3, r3, #31
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	4924      	ldr	r1, [pc, #144]	; (80027dc <vTaskSwitchContext+0xc4>)
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <vTaskSwitchContext+0x5a>
        __asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	e7fe      	b.n	8002770 <vTaskSwitchContext+0x58>
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4a17      	ldr	r2, [pc, #92]	; (80027dc <vTaskSwitchContext+0xc4>)
 800277e:	4413      	add	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	3308      	adds	r3, #8
 8002794:	429a      	cmp	r2, r3
 8002796:	d104      	bne.n	80027a2 <vTaskSwitchContext+0x8a>
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a0d      	ldr	r2, [pc, #52]	; (80027e0 <vTaskSwitchContext+0xc8>)
 80027aa:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <vTaskSwitchContext+0xc8>)
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <vTaskSwitchContext+0xcc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d102      	bne.n	80027be <vTaskSwitchContext+0xa6>
 80027b8:	f001 fcfc 	bl	80041b4 <SEGGER_SYSVIEW_OnIdle>
}
 80027bc:	e004      	b.n	80027c8 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <vTaskSwitchContext+0xc8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 fd54 	bl	8004270 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80027c8:	bf00      	nop
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20000194 	.word	0x20000194
 80027d4:	20000180 	.word	0x20000180
 80027d8:	20000174 	.word	0x20000174
 80027dc:	20000098 	.word	0x20000098
 80027e0:	20000094 	.word	0x20000094
 80027e4:	20000190 	.word	0x20000190

080027e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80027f0:	f000 f852 	bl	8002898 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <prvIdleTask+0x28>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d9f9      	bls.n	80027f0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <prvIdleTask+0x2c>)
 80027fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f3bf 8f4f 	dsb	sy
 8002808:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800280c:	e7f0      	b.n	80027f0 <prvIdleTask+0x8>
 800280e:	bf00      	nop
 8002810:	20000098 	.word	0x20000098
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	e00c      	b.n	800283e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <prvInitialiseTaskLists+0x60>)
 8002830:	4413      	add	r3, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fbce 	bl	8001fd4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3301      	adds	r3, #1
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b04      	cmp	r3, #4
 8002842:	d9ef      	bls.n	8002824 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002844:	480d      	ldr	r0, [pc, #52]	; (800287c <prvInitialiseTaskLists+0x64>)
 8002846:	f7ff fbc5 	bl	8001fd4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800284a:	480d      	ldr	r0, [pc, #52]	; (8002880 <prvInitialiseTaskLists+0x68>)
 800284c:	f7ff fbc2 	bl	8001fd4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002850:	480c      	ldr	r0, [pc, #48]	; (8002884 <prvInitialiseTaskLists+0x6c>)
 8002852:	f7ff fbbf 	bl	8001fd4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002856:	480c      	ldr	r0, [pc, #48]	; (8002888 <prvInitialiseTaskLists+0x70>)
 8002858:	f7ff fbbc 	bl	8001fd4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800285c:	480b      	ldr	r0, [pc, #44]	; (800288c <prvInitialiseTaskLists+0x74>)
 800285e:	f7ff fbb9 	bl	8001fd4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <prvInitialiseTaskLists+0x78>)
 8002864:	4a05      	ldr	r2, [pc, #20]	; (800287c <prvInitialiseTaskLists+0x64>)
 8002866:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <prvInitialiseTaskLists+0x7c>)
 800286a:	4a05      	ldr	r2, [pc, #20]	; (8002880 <prvInitialiseTaskLists+0x68>)
 800286c:	601a      	str	r2, [r3, #0]
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000098 	.word	0x20000098
 800287c:	200000fc 	.word	0x200000fc
 8002880:	20000110 	.word	0x20000110
 8002884:	2000012c 	.word	0x2000012c
 8002888:	20000140 	.word	0x20000140
 800288c:	20000158 	.word	0x20000158
 8002890:	20000124 	.word	0x20000124
 8002894:	20000128 	.word	0x20000128

08002898 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800289e:	e019      	b.n	80028d4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80028a0:	f000 f9f8 	bl	8002c94 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <prvCheckTasksWaitingTermination+0x4c>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fbe0 	bl	8002076 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <prvCheckTasksWaitingTermination+0x50>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <prvCheckTasksWaitingTermination+0x50>)
 80028be:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80028c0:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <prvCheckTasksWaitingTermination+0x54>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	4a09      	ldr	r2, [pc, #36]	; (80028ec <prvCheckTasksWaitingTermination+0x54>)
 80028c8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80028ca:	f000 fa11 	bl	8002cf0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f80e 	bl	80028f0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <prvCheckTasksWaitingTermination+0x54>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e1      	bne.n	80028a0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20000140 	.word	0x20000140
 80028e8:	2000016c 	.word	0x2000016c
 80028ec:	20000154 	.word	0x20000154

080028f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 fb87 	bl	8003010 <vPortFree>
                vPortFree( pxTCB );
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fb84 	bl	8003010 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002914:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <prvResetNextTaskUnblockTime+0x30>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d104      	bne.n	8002928 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <prvResetNextTaskUnblockTime+0x34>)
 8002920:	f04f 32ff 	mov.w	r2, #4294967295
 8002924:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002926:	e005      	b.n	8002934 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <prvResetNextTaskUnblockTime+0x30>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <prvResetNextTaskUnblockTime+0x34>)
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20000124 	.word	0x20000124
 8002944:	2000018c 	.word	0x2000018c

08002948 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3b04      	subs	r3, #4
 8002958:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002960:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3b04      	subs	r3, #4
 8002966:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f023 0201 	bic.w	r2, r3, #1
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	3b04      	subs	r3, #4
 8002976:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002978:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <pxPortInitialiseStack+0x64>)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3b14      	subs	r3, #20
 8002982:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3b04      	subs	r3, #4
 800298e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f06f 0202 	mvn.w	r2, #2
 8002996:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	3b20      	subs	r3, #32
 800299c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800299e:	68fb      	ldr	r3, [r7, #12]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	080029b1 	.word	0x080029b1

080029b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <prvTaskExitError+0x50>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c2:	d009      	beq.n	80029d8 <prvTaskExitError+0x28>
 80029c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c8:	f383 8811 	msr	BASEPRI, r3
 80029cc:	f3bf 8f6f 	isb	sy
 80029d0:	f3bf 8f4f 	dsb	sy
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	e7fe      	b.n	80029d6 <prvTaskExitError+0x26>
 80029d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80029ea:	bf00      	nop
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0fc      	beq.n	80029ec <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	20000010 	.word	0x20000010
	...

08002a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <pxCurrentTCBConst2>)
 8002a12:	6819      	ldr	r1, [r3, #0]
 8002a14:	6808      	ldr	r0, [r1, #0]
 8002a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1a:	f380 8809 	msr	PSP, r0
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f04f 0000 	mov.w	r0, #0
 8002a26:	f380 8811 	msr	BASEPRI, r0
 8002a2a:	4770      	bx	lr
 8002a2c:	f3af 8000 	nop.w

08002a30 <pxCurrentTCBConst2>:
 8002a30:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop

08002a38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002a38:	4808      	ldr	r0, [pc, #32]	; (8002a5c <prvPortStartFirstTask+0x24>)
 8002a3a:	6800      	ldr	r0, [r0, #0]
 8002a3c:	6800      	ldr	r0, [r0, #0]
 8002a3e:	f380 8808 	msr	MSP, r0
 8002a42:	f04f 0000 	mov.w	r0, #0
 8002a46:	f380 8814 	msr	CONTROL, r0
 8002a4a:	b662      	cpsie	i
 8002a4c:	b661      	cpsie	f
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	df00      	svc	0
 8002a58:	bf00      	nop
 8002a5a:	0000      	.short	0x0000
 8002a5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop

08002a64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002a6a:	4b44      	ldr	r3, [pc, #272]	; (8002b7c <xPortStartScheduler+0x118>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a44      	ldr	r2, [pc, #272]	; (8002b80 <xPortStartScheduler+0x11c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d109      	bne.n	8002a88 <xPortStartScheduler+0x24>
 8002a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	e7fe      	b.n	8002a86 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002a88:	4b3c      	ldr	r3, [pc, #240]	; (8002b7c <xPortStartScheduler+0x118>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a3d      	ldr	r2, [pc, #244]	; (8002b84 <xPortStartScheduler+0x120>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d109      	bne.n	8002aa6 <xPortStartScheduler+0x42>
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e7fe      	b.n	8002aa4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002aa6:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <xPortStartScheduler+0x124>)
 8002aa8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	22ff      	movs	r2, #255	; 0xff
 8002ab6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <xPortStartScheduler+0x128>)
 8002acc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ace:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <xPortStartScheduler+0x12c>)
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ad4:	e009      	b.n	8002aea <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8002ad6:	4b2e      	ldr	r3, [pc, #184]	; (8002b90 <xPortStartScheduler+0x12c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	4a2c      	ldr	r2, [pc, #176]	; (8002b90 <xPortStartScheduler+0x12c>)
 8002ade:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af2:	2b80      	cmp	r3, #128	; 0x80
 8002af4:	d0ef      	beq.n	8002ad6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002af6:	4b26      	ldr	r3, [pc, #152]	; (8002b90 <xPortStartScheduler+0x12c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f1c3 0307 	rsb	r3, r3, #7
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d009      	beq.n	8002b16 <xPortStartScheduler+0xb2>
 8002b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b06:	f383 8811 	msr	BASEPRI, r3
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	e7fe      	b.n	8002b14 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <xPortStartScheduler+0x12c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <xPortStartScheduler+0x12c>)
 8002b1e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b20:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <xPortStartScheduler+0x12c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b28:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <xPortStartScheduler+0x12c>)
 8002b2a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002b34:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <xPortStartScheduler+0x130>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a16      	ldr	r2, [pc, #88]	; (8002b94 <xPortStartScheduler+0x130>)
 8002b3a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b3e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <xPortStartScheduler+0x130>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a13      	ldr	r2, [pc, #76]	; (8002b94 <xPortStartScheduler+0x130>)
 8002b46:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002b4a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002b4c:	f000 f954 	bl	8002df8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <xPortStartScheduler+0x134>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002b56:	f000 f973 	bl	8002e40 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <xPortStartScheduler+0x138>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a0f      	ldr	r2, [pc, #60]	; (8002b9c <xPortStartScheduler+0x138>)
 8002b60:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002b64:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002b66:	f7ff ff67 	bl	8002a38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002b6a:	f7ff fdd5 	bl	8002718 <vTaskSwitchContext>
    prvTaskExitError();
 8002b6e:	f7ff ff1f 	bl	80029b0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	e000ed00 	.word	0xe000ed00
 8002b80:	410fc271 	.word	0x410fc271
 8002b84:	410fc270 	.word	0x410fc270
 8002b88:	e000e400 	.word	0xe000e400
 8002b8c:	20000198 	.word	0x20000198
 8002b90:	2000019c 	.word	0x2000019c
 8002b94:	e000ed20 	.word	0xe000ed20
 8002b98:	20000010 	.word	0x20000010
 8002b9c:	e000ef34 	.word	0xe000ef34

08002ba0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002ba6:	4b35      	ldr	r3, [pc, #212]	; (8002c7c <vInitPrioGroupValue+0xdc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a35      	ldr	r2, [pc, #212]	; (8002c80 <vInitPrioGroupValue+0xe0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d109      	bne.n	8002bc4 <vInitPrioGroupValue+0x24>
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	e7fe      	b.n	8002bc2 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002bc4:	4b2d      	ldr	r3, [pc, #180]	; (8002c7c <vInitPrioGroupValue+0xdc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2e      	ldr	r2, [pc, #184]	; (8002c84 <vInitPrioGroupValue+0xe4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d109      	bne.n	8002be2 <vInitPrioGroupValue+0x42>
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e7fe      	b.n	8002be0 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002be2:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <vInitPrioGroupValue+0xe8>)
 8002be4:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	22ff      	movs	r2, #255	; 0xff
 8002bf2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	4b21      	ldr	r3, [pc, #132]	; (8002c8c <vInitPrioGroupValue+0xec>)
 8002c08:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c0a:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <vInitPrioGroupValue+0xf0>)
 8002c0c:	2207      	movs	r2, #7
 8002c0e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c10:	e009      	b.n	8002c26 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8002c12:	4b1f      	ldr	r3, [pc, #124]	; (8002c90 <vInitPrioGroupValue+0xf0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	4a1d      	ldr	r2, [pc, #116]	; (8002c90 <vInitPrioGroupValue+0xf0>)
 8002c1a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c2e:	2b80      	cmp	r3, #128	; 0x80
 8002c30:	d0ef      	beq.n	8002c12 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c32:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <vInitPrioGroupValue+0xf0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f1c3 0307 	rsb	r3, r3, #7
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d009      	beq.n	8002c52 <vInitPrioGroupValue+0xb2>
 8002c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c42:	f383 8811 	msr	BASEPRI, r3
 8002c46:	f3bf 8f6f 	isb	sy
 8002c4a:	f3bf 8f4f 	dsb	sy
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	e7fe      	b.n	8002c50 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c52:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <vInitPrioGroupValue+0xf0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	4a0d      	ldr	r2, [pc, #52]	; (8002c90 <vInitPrioGroupValue+0xf0>)
 8002c5a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <vInitPrioGroupValue+0xf0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c64:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <vInitPrioGroupValue+0xf0>)
 8002c66:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002c70:	bf00      	nop
 8002c72:	371c      	adds	r7, #28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000ed00 	.word	0xe000ed00
 8002c80:	410fc271 	.word	0x410fc271
 8002c84:	410fc270 	.word	0x410fc270
 8002c88:	e000e400 	.word	0xe000e400
 8002c8c:	20000198 	.word	0x20000198
 8002c90:	2000019c 	.word	0x2000019c

08002c94 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9e:	f383 8811 	msr	BASEPRI, r3
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002cac:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <vPortEnterCritical+0x54>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	4a0d      	ldr	r2, [pc, #52]	; (8002ce8 <vPortEnterCritical+0x54>)
 8002cb4:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002cb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <vPortEnterCritical+0x54>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d10e      	bne.n	8002cdc <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <vPortEnterCritical+0x58>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d009      	beq.n	8002cdc <vPortEnterCritical+0x48>
 8002cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	e7fe      	b.n	8002cda <vPortEnterCritical+0x46>
    }
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	20000010 	.word	0x20000010
 8002cec:	e000ed04 	.word	0xe000ed04

08002cf0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <vPortExitCritical+0x4c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <vPortExitCritical+0x22>
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	e7fe      	b.n	8002d10 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8002d12:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <vPortExitCritical+0x4c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <vPortExitCritical+0x4c>)
 8002d1a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002d1c:	4b07      	ldr	r3, [pc, #28]	; (8002d3c <vPortExitCritical+0x4c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d104      	bne.n	8002d2e <vPortExitCritical+0x3e>
 8002d24:	2300      	movs	r3, #0
 8002d26:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000010 	.word	0x20000010

08002d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002d40:	f3ef 8009 	mrs	r0, PSP
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <pxCurrentTCBConst>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	f01e 0f10 	tst.w	lr, #16
 8002d50:	bf08      	it	eq
 8002d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d5a:	6010      	str	r0, [r2, #0]
 8002d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002d64:	f380 8811 	msr	BASEPRI, r0
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f7ff fcd2 	bl	8002718 <vTaskSwitchContext>
 8002d74:	f04f 0000 	mov.w	r0, #0
 8002d78:	f380 8811 	msr	BASEPRI, r0
 8002d7c:	bc09      	pop	{r0, r3}
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	6808      	ldr	r0, [r1, #0]
 8002d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d86:	f01e 0f10 	tst.w	lr, #16
 8002d8a:	bf08      	it	eq
 8002d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002d90:	f380 8809 	msr	PSP, r0
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	f3af 8000 	nop.w

08002da0 <pxCurrentTCBConst>:
 8002da0:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop

08002da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
        __asm volatile
 8002dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db2:	f383 8811 	msr	BASEPRI, r3
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	f3bf 8f4f 	dsb	sy
 8002dbe:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002dc0:	f001 f97e 	bl	80040c0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002dc4:	f7ff fbec 	bl	80025a0 <xTaskIncrementTick>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002dce:	f001 f9d5 	bl	800417c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <SysTick_Handler+0x4c>)
 8002dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e001      	b.n	8002de0 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 8002ddc:	f001 f9b2 	bl	8004144 <SEGGER_SYSVIEW_RecordExitISR>
 8002de0:	2300      	movs	r3, #0
 8002de2:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	e000ed04 	.word	0xe000ed04

08002df8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <vPortSetupTimerInterrupt+0x34>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e02:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <vPortSetupTimerInterrupt+0x38>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <vPortSetupTimerInterrupt+0x3c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <vPortSetupTimerInterrupt+0x40>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	099b      	lsrs	r3, r3, #6
 8002e14:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <vPortSetupTimerInterrupt+0x44>)
 8002e16:	3b01      	subs	r3, #1
 8002e18:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <vPortSetupTimerInterrupt+0x34>)
 8002e1c:	2207      	movs	r2, #7
 8002e1e:	601a      	str	r2, [r3, #0]
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000e010 	.word	0xe000e010
 8002e30:	e000e018 	.word	0xe000e018
 8002e34:	20000000 	.word	0x20000000
 8002e38:	10624dd3 	.word	0x10624dd3
 8002e3c:	e000e014 	.word	0xe000e014

08002e40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002e40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002e50 <vPortEnableVFP+0x10>
 8002e44:	6801      	ldr	r1, [r0, #0]
 8002e46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e4a:	6001      	str	r1, [r0, #0]
 8002e4c:	4770      	bx	lr
 8002e4e:	0000      	.short	0x0000
 8002e50:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop

08002e58 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002e64:	f7ff faee 	bl	8002444 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002e68:	4b63      	ldr	r3, [pc, #396]	; (8002ff8 <pvPortMalloc+0x1a0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002e70:	f000 f92e 	bl	80030d0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e74:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <pvPortMalloc+0x1a4>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f040 80a5 	bne.w	8002fcc <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d02c      	beq.n	8002ee2 <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002e88:	2208      	movs	r2, #8
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d226      	bcs.n	8002ee2 <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8002e94:	2208      	movs	r2, #8
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d020      	beq.n	8002ee8 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f023 0307 	bic.w	r3, r3, #7
 8002eac:	3308      	adds	r3, #8
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d213      	bcs.n	8002edc <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f023 0307 	bic.w	r3, r3, #7
 8002eba:	3308      	adds	r3, #8
 8002ebc:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00f      	beq.n	8002ee8 <pvPortMalloc+0x90>
        __asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	617b      	str	r3, [r7, #20]
 8002eda:	e7fe      	b.n	8002eda <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ee0:	e002      	b.n	8002ee8 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
 8002ee6:	e000      	b.n	8002eea <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ee8:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d06d      	beq.n	8002fcc <pvPortMalloc+0x174>
 8002ef0:	4b43      	ldr	r3, [pc, #268]	; (8003000 <pvPortMalloc+0x1a8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d868      	bhi.n	8002fcc <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002efa:	4b42      	ldr	r3, [pc, #264]	; (8003004 <pvPortMalloc+0x1ac>)
 8002efc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002efe:	4b41      	ldr	r3, [pc, #260]	; (8003004 <pvPortMalloc+0x1ac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f04:	e004      	b.n	8002f10 <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d903      	bls.n	8002f22 <pvPortMalloc+0xca>
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f1      	bne.n	8002f06 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002f22:	4b35      	ldr	r3, [pc, #212]	; (8002ff8 <pvPortMalloc+0x1a0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d04f      	beq.n	8002fcc <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2208      	movs	r2, #8
 8002f32:	4413      	add	r3, r2
 8002f34:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	1ad2      	subs	r2, r2, r3
 8002f46:	2308      	movs	r3, #8
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d91e      	bls.n	8002f8c <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4413      	add	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d009      	beq.n	8002f74 <pvPortMalloc+0x11c>
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	e7fe      	b.n	8002f72 <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1ad2      	subs	r2, r2, r3
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f86:	69b8      	ldr	r0, [r7, #24]
 8002f88:	f000 f904 	bl	8003194 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f8c:	4b1c      	ldr	r3, [pc, #112]	; (8003000 <pvPortMalloc+0x1a8>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	4a1a      	ldr	r2, [pc, #104]	; (8003000 <pvPortMalloc+0x1a8>)
 8002f98:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f9a:	4b19      	ldr	r3, [pc, #100]	; (8003000 <pvPortMalloc+0x1a8>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <pvPortMalloc+0x1b0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d203      	bcs.n	8002fae <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002fa6:	4b16      	ldr	r3, [pc, #88]	; (8003000 <pvPortMalloc+0x1a8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a17      	ldr	r2, [pc, #92]	; (8003008 <pvPortMalloc+0x1b0>)
 8002fac:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <pvPortMalloc+0x1a4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <pvPortMalloc+0x1b4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	4a10      	ldr	r2, [pc, #64]	; (800300c <pvPortMalloc+0x1b4>)
 8002fca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002fcc:	f7ff fa48 	bl	8002460 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d009      	beq.n	8002fee <pvPortMalloc+0x196>
 8002fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	e7fe      	b.n	8002fec <pvPortMalloc+0x194>
    return pvReturn;
 8002fee:	69fb      	ldr	r3, [r7, #28]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3728      	adds	r7, #40	; 0x28
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20012da8 	.word	0x20012da8
 8002ffc:	20012dbc 	.word	0x20012dbc
 8003000:	20012dac 	.word	0x20012dac
 8003004:	20012da0 	.word	0x20012da0
 8003008:	20012db0 	.word	0x20012db0
 800300c:	20012db4 	.word	0x20012db4

08003010 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d04b      	beq.n	80030ba <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003022:	2308      	movs	r3, #8
 8003024:	425b      	negs	r3, r3
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4413      	add	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <vPortFree+0xb4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <vPortFree+0x42>
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	e7fe      	b.n	8003050 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <vPortFree+0x5e>
 800305a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	e7fe      	b.n	800306c <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <vPortFree+0xb4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01e      	beq.n	80030ba <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d11a      	bne.n	80030ba <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <vPortFree+0xb4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	43db      	mvns	r3, r3
 800308e:	401a      	ands	r2, r3
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003094:	f7ff f9d6 	bl	8002444 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <vPortFree+0xb8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4413      	add	r3, r2
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <vPortFree+0xb8>)
 80030a4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80030a6:	6938      	ldr	r0, [r7, #16]
 80030a8:	f000 f874 	bl	8003194 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80030ac:	4b07      	ldr	r3, [pc, #28]	; (80030cc <vPortFree+0xbc>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3301      	adds	r3, #1
 80030b2:	4a06      	ldr	r2, [pc, #24]	; (80030cc <vPortFree+0xbc>)
 80030b4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80030b6:	f7ff f9d3 	bl	8002460 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80030ba:	bf00      	nop
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20012dbc 	.word	0x20012dbc
 80030c8:	20012dac 	.word	0x20012dac
 80030cc:	20012db8 	.word	0x20012db8

080030d0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80030d6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80030da:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80030dc:	4b27      	ldr	r3, [pc, #156]	; (800317c <prvHeapInit+0xac>)
 80030de:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3307      	adds	r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0307 	bic.w	r3, r3, #7
 80030f6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	4a1f      	ldr	r2, [pc, #124]	; (800317c <prvHeapInit+0xac>)
 8003100:	4413      	add	r3, r2
 8003102:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003108:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <prvHeapInit+0xb0>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <prvHeapInit+0xb0>)
 8003110:	2200      	movs	r2, #0
 8003112:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	4413      	add	r3, r2
 800311a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800311c:	2208      	movs	r2, #8
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0307 	bic.w	r3, r3, #7
 800312a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a15      	ldr	r2, [pc, #84]	; (8003184 <prvHeapInit+0xb4>)
 8003130:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <prvHeapInit+0xb4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2200      	movs	r2, #0
 8003138:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <prvHeapInit+0xb4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	1ad2      	subs	r2, r2, r3
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <prvHeapInit+0xb4>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <prvHeapInit+0xb8>)
 800315e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4a09      	ldr	r2, [pc, #36]	; (800318c <prvHeapInit+0xbc>)
 8003166:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <prvHeapInit+0xc0>)
 800316a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800316e:	601a      	str	r2, [r3, #0]
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	200001a0 	.word	0x200001a0
 8003180:	20012da0 	.word	0x20012da0
 8003184:	20012da8 	.word	0x20012da8
 8003188:	20012db0 	.word	0x20012db0
 800318c:	20012dac 	.word	0x20012dac
 8003190:	20012dbc 	.word	0x20012dbc

08003194 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800319c:	4b28      	ldr	r3, [pc, #160]	; (8003240 <prvInsertBlockIntoFreeList+0xac>)
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	e002      	b.n	80031a8 <prvInsertBlockIntoFreeList+0x14>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d8f7      	bhi.n	80031a2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	4413      	add	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d108      	bne.n	80031d6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	441a      	add	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	441a      	add	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d118      	bne.n	800321c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <prvInsertBlockIntoFreeList+0xb0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d00d      	beq.n	8003212 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	441a      	add	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	e008      	b.n	8003224 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003212:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <prvInsertBlockIntoFreeList+0xb0>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e003      	b.n	8003224 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	429a      	cmp	r2, r3
 800322a:	d002      	beq.n	8003232 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20012da0 	.word	0x20012da0
 8003244:	20012da8 	.word	0x20012da8

08003248 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003256:	2205      	movs	r2, #5
 8003258:	492b      	ldr	r1, [pc, #172]	; (8003308 <SYSVIEW_AddTask+0xc0>)
 800325a:	68b8      	ldr	r0, [r7, #8]
 800325c:	f001 f9e8 	bl	8004630 <memcmp>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d04b      	beq.n	80032fe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003266:	4b29      	ldr	r3, [pc, #164]	; (800330c <SYSVIEW_AddTask+0xc4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b07      	cmp	r3, #7
 800326c:	d903      	bls.n	8003276 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800326e:	4828      	ldr	r0, [pc, #160]	; (8003310 <SYSVIEW_AddTask+0xc8>)
 8003270:	f001 f95e 	bl	8004530 <SEGGER_SYSVIEW_Warn>
    return;
 8003274:	e044      	b.n	8003300 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003276:	4b25      	ldr	r3, [pc, #148]	; (800330c <SYSVIEW_AddTask+0xc4>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	4926      	ldr	r1, [pc, #152]	; (8003314 <SYSVIEW_AddTask+0xcc>)
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <SYSVIEW_AddTask+0xc4>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4921      	ldr	r1, [pc, #132]	; (8003314 <SYSVIEW_AddTask+0xcc>)
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3304      	adds	r3, #4
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80032a0:	4b1a      	ldr	r3, [pc, #104]	; (800330c <SYSVIEW_AddTask+0xc4>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	491b      	ldr	r1, [pc, #108]	; (8003314 <SYSVIEW_AddTask+0xcc>)
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	3308      	adds	r3, #8
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80032b6:	4b15      	ldr	r3, [pc, #84]	; (800330c <SYSVIEW_AddTask+0xc4>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	4916      	ldr	r1, [pc, #88]	; (8003314 <SYSVIEW_AddTask+0xcc>)
 80032bc:	4613      	mov	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	330c      	adds	r3, #12
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80032cc:	4b0f      	ldr	r3, [pc, #60]	; (800330c <SYSVIEW_AddTask+0xc4>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4910      	ldr	r1, [pc, #64]	; (8003314 <SYSVIEW_AddTask+0xcc>)
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	3310      	adds	r3, #16
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80032e2:	4b0a      	ldr	r3, [pc, #40]	; (800330c <SYSVIEW_AddTask+0xc4>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3301      	adds	r3, #1
 80032e8:	4a08      	ldr	r2, [pc, #32]	; (800330c <SYSVIEW_AddTask+0xc4>)
 80032ea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f80e 	bl	8003318 <SYSVIEW_SendTaskInfo>
 80032fc:	e000      	b.n	8003300 <SYSVIEW_AddTask+0xb8>
    return;
 80032fe:	bf00      	nop

}
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	08004f14 	.word	0x08004f14
 800330c:	20012e60 	.word	0x20012e60
 8003310:	08004f1c 	.word	0x08004f1c
 8003314:	20012dc0 	.word	0x20012dc0

08003318 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
 8003324:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003326:	f107 0314 	add.w	r3, r7, #20
 800332a:	2214      	movs	r2, #20
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f001 f998 	bl	8004664 <memset>
  TaskInfo.TaskID     = TaskID;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003346:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fd8f 	bl	8003e70 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003352:	bf00      	nop
 8003354:	3728      	adds	r7, #40	; 0x28
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8003362:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <USART2_IRQHandler+0x80>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d011      	beq.n	8003396 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <USART2_IRQHandler+0x84>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 030b 	and.w	r3, r3, #11
 8003380:	2b00      	cmp	r3, #0
 8003382:	d108      	bne.n	8003396 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003384:	4b17      	ldr	r3, [pc, #92]	; (80033e4 <USART2_IRQHandler+0x88>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d004      	beq.n	8003396 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 800338c:	4b15      	ldr	r3, [pc, #84]	; (80033e4 <USART2_IRQHandler+0x88>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	79fa      	ldrb	r2, [r7, #7]
 8003392:	4610      	mov	r0, r2
 8003394:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01a      	beq.n	80033d6 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <USART2_IRQHandler+0x8c>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d015      	beq.n	80033d4 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80033a8:	4b0f      	ldr	r3, [pc, #60]	; (80033e8 <USART2_IRQHandler+0x8c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	1dfa      	adds	r2, r7, #7
 80033ae:	4610      	mov	r0, r2
 80033b0:	4798      	blx	r3
 80033b2:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80033ba:	4b0c      	ldr	r3, [pc, #48]	; (80033ec <USART2_IRQHandler+0x90>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a0b      	ldr	r2, [pc, #44]	; (80033ec <USART2_IRQHandler+0x90>)
 80033c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e006      	b.n	80033d6 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <USART2_IRQHandler+0x80>)
 80033ca:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80033cc:	79fa      	ldrb	r2, [r7, #7]
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <USART2_IRQHandler+0x84>)
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	e000      	b.n	80033d6 <USART2_IRQHandler+0x7a>
      return;
 80033d4:	bf00      	nop
    }
  }
}
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40004400 	.word	0x40004400
 80033e0:	40004404 	.word	0x40004404
 80033e4:	20012e64 	.word	0x20012e64
 80033e8:	20012e68 	.word	0x20012e68
 80033ec:	4000440c 	.word	0x4000440c

080033f0 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80033f4:	4b05      	ldr	r3, [pc, #20]	; (800340c <HIF_UART_EnableTXEInterrupt+0x1c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a04      	ldr	r2, [pc, #16]	; (800340c <HIF_UART_EnableTXEInterrupt+0x1c>)
 80033fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	4000440c 	.word	0x4000440c

08003410 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003416:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <_DoInit+0x98>)
 8003418:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2203      	movs	r2, #3
 800341e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2203      	movs	r2, #3
 8003424:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a20      	ldr	r2, [pc, #128]	; (80034ac <_DoInit+0x9c>)
 800342a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <_DoInit+0xa0>)
 8003430:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003438:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a17      	ldr	r2, [pc, #92]	; (80034ac <_DoInit+0x9c>)
 8003450:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <_DoInit+0xa4>)
 8003456:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2210      	movs	r2, #16
 800345c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3307      	adds	r3, #7
 8003474:	4a10      	ldr	r2, [pc, #64]	; (80034b8 <_DoInit+0xa8>)
 8003476:	6810      	ldr	r0, [r2, #0]
 8003478:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800347a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a0e      	ldr	r2, [pc, #56]	; (80034bc <_DoInit+0xac>)
 8003482:	6810      	ldr	r0, [r2, #0]
 8003484:	6018      	str	r0, [r3, #0]
 8003486:	8891      	ldrh	r1, [r2, #4]
 8003488:	7992      	ldrb	r2, [r2, #6]
 800348a:	8099      	strh	r1, [r3, #4]
 800348c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800348e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003498:	f3bf 8f5f 	dmb	sy
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	200133e0 	.word	0x200133e0
 80034ac:	08004f6c 	.word	0x08004f6c
 80034b0:	20012e6c 	.word	0x20012e6c
 80034b4:	2001326c 	.word	0x2001326c
 80034b8:	08004f78 	.word	0x08004f78
 80034bc:	08004f7c 	.word	0x08004f7c

080034c0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08c      	sub	sp, #48	; 0x30
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80034cc:	4b3e      	ldr	r3, [pc, #248]	; (80035c8 <SEGGER_RTT_ReadNoLock+0x108>)
 80034ce:	623b      	str	r3, [r7, #32]
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <SEGGER_RTT_ReadNoLock+0x1e>
 80034da:	f7ff ff99 	bl	8003410 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	3360      	adds	r3, #96	; 0x60
 80034ea:	4a37      	ldr	r2, [pc, #220]	; (80035c8 <SEGGER_RTT_ReadNoLock+0x108>)
 80034ec:	4413      	add	r3, r2
 80034ee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003500:	2300      	movs	r3, #0
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	429a      	cmp	r2, r3
 800350a:	d92b      	bls.n	8003564 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003516:	697a      	ldr	r2, [r7, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4293      	cmp	r3, r2
 800351c:	bf28      	it	cs
 800351e:	4613      	movcs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	4413      	add	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	6939      	ldr	r1, [r7, #16]
 8003530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003532:	f001 f88c 	bl	800464e <memcpy>
    NumBytesRead += NumBytesRem;
 8003536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	4413      	add	r3, r2
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	4413      	add	r3, r2
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800354e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	4413      	add	r3, r2
 8003554:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800355c:	429a      	cmp	r2, r3
 800355e:	d101      	bne.n	8003564 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003560:	2300      	movs	r3, #0
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4293      	cmp	r3, r2
 8003572:	bf28      	it	cs
 8003574:	4613      	movcs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d019      	beq.n	80035b2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	4413      	add	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	6939      	ldr	r1, [r7, #16]
 800358c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800358e:	f001 f85e 	bl	800464e <memcpy>
    NumBytesRead += NumBytesRem;
 8003592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	4413      	add	r3, r2
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800359a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	4413      	add	r3, r2
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80035aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	4413      	add	r3, r2
 80035b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80035b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d002      	beq.n	80035be <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035bc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3730      	adds	r7, #48	; 0x30
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	200133e0 	.word	0x200133e0

080035cc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80035dc:	e002      	b.n	80035e4 <_EncodeStr+0x18>
    Len++;
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	3301      	adds	r3, #1
 80035e2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4413      	add	r3, r2
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f6      	bne.n	80035de <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d901      	bls.n	80035fc <_EncodeStr+0x30>
    Len = Limit;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2bfe      	cmp	r3, #254	; 0xfe
 8003600:	d806      	bhi.n	8003610 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	60fa      	str	r2, [r7, #12]
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	e011      	b.n	8003634 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	60fa      	str	r2, [r7, #12]
 8003616:	22ff      	movs	r2, #255	; 0xff
 8003618:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	60fa      	str	r2, [r7, #12]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	0a19      	lsrs	r1, r3, #8
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	60fa      	str	r2, [r7, #12]
 8003630:	b2ca      	uxtb	r2, r1
 8003632:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003638:	e00a      	b.n	8003650 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	1c53      	adds	r3, r2, #1
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1c59      	adds	r1, r3, #1
 8003644:	60f9      	str	r1, [r7, #12]
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	701a      	strb	r2, [r3, #0]
    n++;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	3301      	adds	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	429a      	cmp	r2, r3
 8003656:	d3f0      	bcc.n	800363a <_EncodeStr+0x6e>
  }
  return pPayload;
 8003658:	68fb      	ldr	r3, [r7, #12]
}
 800365a:	4618      	mov	r0, r3
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3304      	adds	r3, #4
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003686:	4b33      	ldr	r3, [pc, #204]	; (8003754 <_HandleIncomingPacket+0xd4>)
 8003688:	7e1b      	ldrb	r3, [r3, #24]
 800368a:	4618      	mov	r0, r3
 800368c:	1cfb      	adds	r3, r7, #3
 800368e:	2201      	movs	r2, #1
 8003690:	4619      	mov	r1, r3
 8003692:	f7ff ff15 	bl	80034c0 <SEGGER_RTT_ReadNoLock>
 8003696:	4603      	mov	r3, r0
 8003698:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	dd4d      	ble.n	800373c <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	2b05      	cmp	r3, #5
 80036a4:	d022      	beq.n	80036ec <_HandleIncomingPacket+0x6c>
 80036a6:	2b05      	cmp	r3, #5
 80036a8:	dc0b      	bgt.n	80036c2 <_HandleIncomingPacket+0x42>
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d015      	beq.n	80036da <_HandleIncomingPacket+0x5a>
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	dc02      	bgt.n	80036b8 <_HandleIncomingPacket+0x38>
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d00e      	beq.n	80036d4 <_HandleIncomingPacket+0x54>
 80036b6:	e034      	b.n	8003722 <_HandleIncomingPacket+0xa2>
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d011      	beq.n	80036e0 <_HandleIncomingPacket+0x60>
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d012      	beq.n	80036e6 <_HandleIncomingPacket+0x66>
 80036c0:	e02f      	b.n	8003722 <_HandleIncomingPacket+0xa2>
 80036c2:	2b07      	cmp	r3, #7
 80036c4:	d018      	beq.n	80036f8 <_HandleIncomingPacket+0x78>
 80036c6:	2b07      	cmp	r3, #7
 80036c8:	db13      	blt.n	80036f2 <_HandleIncomingPacket+0x72>
 80036ca:	2b7f      	cmp	r3, #127	; 0x7f
 80036cc:	d038      	beq.n	8003740 <_HandleIncomingPacket+0xc0>
 80036ce:	2b80      	cmp	r3, #128	; 0x80
 80036d0:	d015      	beq.n	80036fe <_HandleIncomingPacket+0x7e>
 80036d2:	e026      	b.n	8003722 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80036d4:	f000 fa50 	bl	8003b78 <SEGGER_SYSVIEW_Start>
      break;
 80036d8:	e037      	b.n	800374a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80036da:	f000 fb09 	bl	8003cf0 <SEGGER_SYSVIEW_Stop>
      break;
 80036de:	e034      	b.n	800374a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80036e0:	f000 fcbe 	bl	8004060 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80036e4:	e031      	b.n	800374a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80036e6:	f000 fca7 	bl	8004038 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80036ea:	e02e      	b.n	800374a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80036ec:	f000 fb26 	bl	8003d3c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80036f0:	e02b      	b.n	800374a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80036f2:	f000 fedf 	bl	80044b4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80036f6:	e028      	b.n	800374a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80036f8:	f000 febe 	bl	8004478 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80036fc:	e025      	b.n	800374a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <_HandleIncomingPacket+0xd4>)
 8003700:	7e1b      	ldrb	r3, [r3, #24]
 8003702:	4618      	mov	r0, r3
 8003704:	1cfb      	adds	r3, r7, #3
 8003706:	2201      	movs	r2, #1
 8003708:	4619      	mov	r1, r3
 800370a:	f7ff fed9 	bl	80034c0 <SEGGER_RTT_ReadNoLock>
 800370e:	4603      	mov	r3, r0
 8003710:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	dd15      	ble.n	8003744 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fe2c 	bl	8004378 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003720:	e010      	b.n	8003744 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	b25b      	sxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	da0e      	bge.n	8003748 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <_HandleIncomingPacket+0xd4>)
 800372c:	7e1b      	ldrb	r3, [r3, #24]
 800372e:	4618      	mov	r0, r3
 8003730:	1cfb      	adds	r3, r7, #3
 8003732:	2201      	movs	r2, #1
 8003734:	4619      	mov	r1, r3
 8003736:	f7ff fec3 	bl	80034c0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800373a:	e005      	b.n	8003748 <_HandleIncomingPacket+0xc8>
    }
  }
 800373c:	bf00      	nop
 800373e:	e004      	b.n	800374a <_HandleIncomingPacket+0xca>
      break;
 8003740:	bf00      	nop
 8003742:	e002      	b.n	800374a <_HandleIncomingPacket+0xca>
      break;
 8003744:	bf00      	nop
 8003746:	e000      	b.n	800374a <_HandleIncomingPacket+0xca>
      break;
 8003748:	bf00      	nop
}
 800374a:	bf00      	nop
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	2001327c 	.word	0x2001327c

08003758 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003758:	b580      	push	{r7, lr}
 800375a:	b08c      	sub	sp, #48	; 0x30
 800375c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800375e:	2301      	movs	r3, #1
 8003760:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003762:	1d3b      	adds	r3, r7, #4
 8003764:	3301      	adds	r3, #1
 8003766:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800376c:	4b32      	ldr	r3, [pc, #200]	; (8003838 <_TrySendOverflowPacket+0xe0>)
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	62bb      	str	r3, [r7, #40]	; 0x28
 8003772:	e00b      	b.n	800378c <_TrySendOverflowPacket+0x34>
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	b2da      	uxtb	r2, r3
 8003778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377a:	1c59      	adds	r1, r3, #1
 800377c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800377e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003788:	09db      	lsrs	r3, r3, #7
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28
 800378c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378e:	2b7f      	cmp	r3, #127	; 0x7f
 8003790:	d8f0      	bhi.n	8003774 <_TrySendOverflowPacket+0x1c>
 8003792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80037a2:	4b26      	ldr	r3, [pc, #152]	; (800383c <_TrySendOverflowPacket+0xe4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80037a8:	4b23      	ldr	r3, [pc, #140]	; (8003838 <_TrySendOverflowPacket+0xe0>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	623b      	str	r3, [r7, #32]
 80037ba:	e00b      	b.n	80037d4 <_TrySendOverflowPacket+0x7c>
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	1c59      	adds	r1, r3, #1
 80037c4:	6279      	str	r1, [r7, #36]	; 0x24
 80037c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	09db      	lsrs	r3, r3, #7
 80037d2:	623b      	str	r3, [r7, #32]
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	2b7f      	cmp	r3, #127	; 0x7f
 80037d8:	d8f0      	bhi.n	80037bc <_TrySendOverflowPacket+0x64>
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	627a      	str	r2, [r7, #36]	; 0x24
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80037ea:	4b13      	ldr	r3, [pc, #76]	; (8003838 <_TrySendOverflowPacket+0xe0>)
 80037ec:	785b      	ldrb	r3, [r3, #1]
 80037ee:	4618      	mov	r0, r3
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	1d3b      	adds	r3, r7, #4
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	1d3b      	adds	r3, r7, #4
 80037fa:	4619      	mov	r1, r3
 80037fc:	f7fc fce8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003800:	4603      	mov	r3, r0
 8003802:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8003804:	f7ff fdf4 	bl	80033f0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <_TrySendOverflowPacket+0xe0>)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003814:	4b08      	ldr	r3, [pc, #32]	; (8003838 <_TrySendOverflowPacket+0xe0>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	3b01      	subs	r3, #1
 800381a:	b2da      	uxtb	r2, r3
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <_TrySendOverflowPacket+0xe0>)
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e004      	b.n	800382c <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <_TrySendOverflowPacket+0xe0>)
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	3301      	adds	r3, #1
 8003828:	4a03      	ldr	r2, [pc, #12]	; (8003838 <_TrySendOverflowPacket+0xe0>)
 800382a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800382c:	693b      	ldr	r3, [r7, #16]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3730      	adds	r7, #48	; 0x30
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	2001327c 	.word	0x2001327c
 800383c:	e0001004 	.word	0xe0001004

08003840 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800384c:	4b6d      	ldr	r3, [pc, #436]	; (8003a04 <_SendPacket+0x1c4>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d010      	beq.n	8003876 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003854:	4b6b      	ldr	r3, [pc, #428]	; (8003a04 <_SendPacket+0x1c4>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80a5 	beq.w	80039a8 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800385e:	4b69      	ldr	r3, [pc, #420]	; (8003a04 <_SendPacket+0x1c4>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d109      	bne.n	800387a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003866:	f7ff ff77 	bl	8003758 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800386a:	4b66      	ldr	r3, [pc, #408]	; (8003a04 <_SendPacket+0x1c4>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b01      	cmp	r3, #1
 8003870:	f040 809c 	bne.w	80039ac <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8003874:	e001      	b.n	800387a <_SendPacket+0x3a>
    goto Send;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <_SendPacket+0x3c>
Send:
 800387a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b1f      	cmp	r3, #31
 8003880:	d809      	bhi.n	8003896 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003882:	4b60      	ldr	r3, [pc, #384]	; (8003a04 <_SendPacket+0x1c4>)
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	f040 808d 	bne.w	80039b0 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b17      	cmp	r3, #23
 800389a:	d807      	bhi.n	80038ac <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3b01      	subs	r3, #1
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	b2da      	uxtb	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	e03d      	b.n	8003928 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	2b7f      	cmp	r3, #127	; 0x7f
 80038b8:	d912      	bls.n	80038e0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	09da      	lsrs	r2, r3, #7
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	3a01      	subs	r2, #1
 80038d2:	60fa      	str	r2, [r7, #12]
 80038d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e006      	b.n	80038ee <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	3b01      	subs	r3, #1
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b7f      	cmp	r3, #127	; 0x7f
 80038f2:	d912      	bls.n	800391a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	09da      	lsrs	r2, r3, #7
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	3a01      	subs	r2, #1
 800390c:	60fa      	str	r2, [r7, #12]
 800390e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	e006      	b.n	8003928 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	3b01      	subs	r3, #1
 800391e:	60fb      	str	r3, [r7, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	b2da      	uxtb	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003928:	4b37      	ldr	r3, [pc, #220]	; (8003a08 <_SendPacket+0x1c8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800392e:	4b35      	ldr	r3, [pc, #212]	; (8003a04 <_SendPacket+0x1c4>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	627b      	str	r3, [r7, #36]	; 0x24
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	623b      	str	r3, [r7, #32]
 8003940:	e00b      	b.n	800395a <_SendPacket+0x11a>
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	1c59      	adds	r1, r3, #1
 800394a:	6279      	str	r1, [r7, #36]	; 0x24
 800394c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	701a      	strb	r2, [r3, #0]
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	09db      	lsrs	r3, r3, #7
 8003958:	623b      	str	r3, [r7, #32]
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	2b7f      	cmp	r3, #127	; 0x7f
 800395e:	d8f0      	bhi.n	8003942 <_SendPacket+0x102>
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	627a      	str	r2, [r7, #36]	; 0x24
 8003966:	6a3a      	ldr	r2, [r7, #32]
 8003968:	b2d2      	uxtb	r2, r2
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8003970:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <_SendPacket+0x1c4>)
 8003972:	785b      	ldrb	r3, [r3, #1]
 8003974:	4618      	mov	r0, r3
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	461a      	mov	r2, r3
 800397e:	68f9      	ldr	r1, [r7, #12]
 8003980:	f7fc fc26 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003984:	4603      	mov	r3, r0
 8003986:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8003988:	f7ff fd32 	bl	80033f0 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003992:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <_SendPacket+0x1c4>)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	60d3      	str	r3, [r2, #12]
 8003998:	e00b      	b.n	80039b2 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800399a:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <_SendPacket+0x1c4>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	3301      	adds	r3, #1
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <_SendPacket+0x1c4>)
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e004      	b.n	80039b2 <_SendPacket+0x172>
    goto SendDone;
 80039a8:	bf00      	nop
 80039aa:	e002      	b.n	80039b2 <_SendPacket+0x172>
      goto SendDone;
 80039ac:	bf00      	nop
 80039ae:	e000      	b.n	80039b2 <_SendPacket+0x172>
      goto SendDone;
 80039b0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80039b2:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <_SendPacket+0x1c4>)
 80039b4:	7e1b      	ldrb	r3, [r3, #24]
 80039b6:	4619      	mov	r1, r3
 80039b8:	4a14      	ldr	r2, [pc, #80]	; (8003a0c <_SendPacket+0x1cc>)
 80039ba:	460b      	mov	r3, r1
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	440b      	add	r3, r1
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4413      	add	r3, r2
 80039c4:	336c      	adds	r3, #108	; 0x6c
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4b0e      	ldr	r3, [pc, #56]	; (8003a04 <_SendPacket+0x1c4>)
 80039ca:	7e1b      	ldrb	r3, [r3, #24]
 80039cc:	4618      	mov	r0, r3
 80039ce:	490f      	ldr	r1, [pc, #60]	; (8003a0c <_SendPacket+0x1cc>)
 80039d0:	4603      	mov	r3, r0
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4403      	add	r3, r0
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	440b      	add	r3, r1
 80039da:	3370      	adds	r3, #112	; 0x70
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d00b      	beq.n	80039fa <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <_SendPacket+0x1c4>)
 80039e4:	789b      	ldrb	r3, [r3, #2]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d107      	bne.n	80039fa <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80039ea:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <_SendPacket+0x1c4>)
 80039ec:	2201      	movs	r2, #1
 80039ee:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80039f0:	f7ff fe46 	bl	8003680 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <_SendPacket+0x1c4>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80039fa:	bf00      	nop
 80039fc:	3728      	adds	r7, #40	; 0x28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	2001327c 	.word	0x2001327c
 8003a08:	e0001004 	.word	0xe0001004
 8003a0c:	200133e0 	.word	0x200133e0

08003a10 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003a18:	f3ef 8311 	mrs	r3, BASEPRI
 8003a1c:	f04f 0120 	mov.w	r1, #32
 8003a20:	f381 8811 	msr	BASEPRI, r1
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	4808      	ldr	r0, [pc, #32]	; (8003a48 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003a28:	f7ff fe1d 	bl	8003666 <_PreparePacket>
 8003a2c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	68b8      	ldr	r0, [r7, #8]
 8003a34:	f7ff ff04 	bl	8003840 <_SendPacket>
  RECORD_END();
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f383 8811 	msr	BASEPRI, r3
}
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	200132ac 	.word	0x200132ac

08003a4c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003a56:	f3ef 8311 	mrs	r3, BASEPRI
 8003a5a:	f04f 0120 	mov.w	r1, #32
 8003a5e:	f381 8811 	msr	BASEPRI, r1
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	4816      	ldr	r0, [pc, #88]	; (8003ac0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003a66:	f7ff fdfe 	bl	8003666 <_PreparePacket>
 8003a6a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	61fb      	str	r3, [r7, #28]
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	e00b      	b.n	8003a92 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	1c59      	adds	r1, r3, #1
 8003a82:	61f9      	str	r1, [r7, #28]
 8003a84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	09db      	lsrs	r3, r3, #7
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b7f      	cmp	r3, #127	; 0x7f
 8003a96:	d8f0      	bhi.n	8003a7a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	61fa      	str	r2, [r7, #28]
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	701a      	strb	r2, [r3, #0]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68f9      	ldr	r1, [r7, #12]
 8003aac:	6938      	ldr	r0, [r7, #16]
 8003aae:	f7ff fec7 	bl	8003840 <_SendPacket>
  RECORD_END();
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f383 8811 	msr	BASEPRI, r3
}
 8003ab8:	bf00      	nop
 8003aba:	3720      	adds	r7, #32
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	200132ac 	.word	0x200132ac

08003ac4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08c      	sub	sp, #48	; 0x30
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003ad0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ad4:	f04f 0120 	mov.w	r1, #32
 8003ad8:	f381 8811 	msr	BASEPRI, r1
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	4825      	ldr	r0, [pc, #148]	; (8003b74 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003ae0:	f7ff fdc1 	bl	8003666 <_PreparePacket>
 8003ae4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af2:	e00b      	b.n	8003b0c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afa:	1c59      	adds	r1, r3, #1
 8003afc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	09db      	lsrs	r3, r3, #7
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b10:	d8f0      	bhi.n	8003af4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	623b      	str	r3, [r7, #32]
 8003b2a:	e00b      	b.n	8003b44 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	1c59      	adds	r1, r3, #1
 8003b34:	6279      	str	r1, [r7, #36]	; 0x24
 8003b36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	09db      	lsrs	r3, r3, #7
 8003b42:	623b      	str	r3, [r7, #32]
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	2b7f      	cmp	r3, #127	; 0x7f
 8003b48:	d8f0      	bhi.n	8003b2c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	627a      	str	r2, [r7, #36]	; 0x24
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	6979      	ldr	r1, [r7, #20]
 8003b5e:	69b8      	ldr	r0, [r7, #24]
 8003b60:	f7ff fe6e 	bl	8003840 <_SendPacket>
  RECORD_END();
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f383 8811 	msr	BASEPRI, r3
}
 8003b6a:	bf00      	nop
 8003b6c:	3730      	adds	r7, #48	; 0x30
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	200132ac 	.word	0x200132ac

08003b78 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08c      	sub	sp, #48	; 0x30
 8003b7c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003b7e:	4b59      	ldr	r3, [pc, #356]	; (8003ce4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003b84:	f3ef 8311 	mrs	r3, BASEPRI
 8003b88:	f04f 0120 	mov.w	r1, #32
 8003b8c:	f381 8811 	msr	BASEPRI, r1
 8003b90:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003b92:	4b54      	ldr	r3, [pc, #336]	; (8003ce4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b94:	785b      	ldrb	r3, [r3, #1]
 8003b96:	220a      	movs	r2, #10
 8003b98:	4953      	ldr	r1, [pc, #332]	; (8003ce8 <SEGGER_SYSVIEW_Start+0x170>)
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fc fb18 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8003ba6:	f7ff fc23 	bl	80033f0 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003baa:	200a      	movs	r0, #10
 8003bac:	f7ff ff30 	bl	8003a10 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003bb0:	f3ef 8311 	mrs	r3, BASEPRI
 8003bb4:	f04f 0120 	mov.w	r1, #32
 8003bb8:	f381 8811 	msr	BASEPRI, r1
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	484b      	ldr	r0, [pc, #300]	; (8003cec <SEGGER_SYSVIEW_Start+0x174>)
 8003bc0:	f7ff fd51 	bl	8003666 <_PreparePacket>
 8003bc4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bce:	4b45      	ldr	r3, [pc, #276]	; (8003ce4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd4:	e00b      	b.n	8003bee <SEGGER_SYSVIEW_Start+0x76>
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	1c59      	adds	r1, r3, #1
 8003bde:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003be0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bea:	09db      	lsrs	r3, r3, #7
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8003bf2:	d8f0      	bhi.n	8003bd6 <SEGGER_SYSVIEW_Start+0x5e>
 8003bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
 8003c08:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	623b      	str	r3, [r7, #32]
 8003c0e:	e00b      	b.n	8003c28 <SEGGER_SYSVIEW_Start+0xb0>
 8003c10:	6a3b      	ldr	r3, [r7, #32]
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	1c59      	adds	r1, r3, #1
 8003c18:	6279      	str	r1, [r7, #36]	; 0x24
 8003c1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	09db      	lsrs	r3, r3, #7
 8003c26:	623b      	str	r3, [r7, #32]
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c2c:	d8f0      	bhi.n	8003c10 <SEGGER_SYSVIEW_Start+0x98>
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	627a      	str	r2, [r7, #36]	; 0x24
 8003c34:	6a3a      	ldr	r2, [r7, #32]
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	e00b      	b.n	8003c62 <SEGGER_SYSVIEW_Start+0xea>
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	1c59      	adds	r1, r3, #1
 8003c52:	61f9      	str	r1, [r7, #28]
 8003c54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	701a      	strb	r2, [r3, #0]
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	09db      	lsrs	r3, r3, #7
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	2b7f      	cmp	r3, #127	; 0x7f
 8003c66:	d8f0      	bhi.n	8003c4a <SEGGER_SYSVIEW_Start+0xd2>
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	61fa      	str	r2, [r7, #28]
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	e00b      	b.n	8003c9a <SEGGER_SYSVIEW_Start+0x122>
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	1c59      	adds	r1, r3, #1
 8003c8a:	6179      	str	r1, [r7, #20]
 8003c8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	701a      	strb	r2, [r3, #0]
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	09db      	lsrs	r3, r3, #7
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b7f      	cmp	r3, #127	; 0x7f
 8003c9e:	d8f0      	bhi.n	8003c82 <SEGGER_SYSVIEW_Start+0x10a>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	617a      	str	r2, [r7, #20]
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003cb0:	2218      	movs	r2, #24
 8003cb2:	6839      	ldr	r1, [r7, #0]
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fdc3 	bl	8003840 <_SendPacket>
      RECORD_END();
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003cc0:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <SEGGER_SYSVIEW_Start+0x16c>)
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003cce:	f000 f9c7 	bl	8004060 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003cd2:	f000 f9b1 	bl	8004038 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003cd6:	f000 fbed 	bl	80044b4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003cda:	bf00      	nop
 8003cdc:	3730      	adds	r7, #48	; 0x30
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	2001327c 	.word	0x2001327c
 8003ce8:	08004f9c 	.word	0x08004f9c
 8003cec:	200132ac 	.word	0x200132ac

08003cf0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003cf6:	f3ef 8311 	mrs	r3, BASEPRI
 8003cfa:	f04f 0120 	mov.w	r1, #32
 8003cfe:	f381 8811 	msr	BASEPRI, r1
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	480b      	ldr	r0, [pc, #44]	; (8003d34 <SEGGER_SYSVIEW_Stop+0x44>)
 8003d06:	f7ff fcae 	bl	8003666 <_PreparePacket>
 8003d0a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <SEGGER_SYSVIEW_Stop+0x48>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003d14:	220b      	movs	r2, #11
 8003d16:	6839      	ldr	r1, [r7, #0]
 8003d18:	6838      	ldr	r0, [r7, #0]
 8003d1a:	f7ff fd91 	bl	8003840 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <SEGGER_SYSVIEW_Stop+0x48>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f383 8811 	msr	BASEPRI, r3
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	200132ac 	.word	0x200132ac
 8003d38:	2001327c 	.word	0x2001327c

08003d3c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	; 0x30
 8003d40:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d42:	f3ef 8311 	mrs	r3, BASEPRI
 8003d46:	f04f 0120 	mov.w	r1, #32
 8003d4a:	f381 8811 	msr	BASEPRI, r1
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	4845      	ldr	r0, [pc, #276]	; (8003e68 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003d52:	f7ff fc88 	bl	8003666 <_PreparePacket>
 8003d56:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d60:	4b42      	ldr	r3, [pc, #264]	; (8003e6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d66:	e00b      	b.n	8003d80 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	1c59      	adds	r1, r3, #1
 8003d70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	09db      	lsrs	r3, r3, #7
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	2b7f      	cmp	r3, #127	; 0x7f
 8003d84:	d8f0      	bhi.n	8003d68 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
 8003d9a:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	623b      	str	r3, [r7, #32]
 8003da0:	e00b      	b.n	8003dba <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	1c59      	adds	r1, r3, #1
 8003daa:	6279      	str	r1, [r7, #36]	; 0x24
 8003dac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	09db      	lsrs	r3, r3, #7
 8003db8:	623b      	str	r3, [r7, #32]
 8003dba:	6a3b      	ldr	r3, [r7, #32]
 8003dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8003dbe:	d8f0      	bhi.n	8003da2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	627a      	str	r2, [r7, #36]	; 0x24
 8003dc6:	6a3a      	ldr	r2, [r7, #32]
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	701a      	strb	r2, [r3, #0]
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	61fb      	str	r3, [r7, #28]
 8003dd4:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	e00b      	b.n	8003df4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	1c59      	adds	r1, r3, #1
 8003de4:	61f9      	str	r1, [r7, #28]
 8003de6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	09db      	lsrs	r3, r3, #7
 8003df2:	61bb      	str	r3, [r7, #24]
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b7f      	cmp	r3, #127	; 0x7f
 8003df8:	d8f0      	bhi.n	8003ddc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	61fa      	str	r2, [r7, #28]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	e00b      	b.n	8003e2c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	1c59      	adds	r1, r3, #1
 8003e1c:	6179      	str	r1, [r7, #20]
 8003e1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	09db      	lsrs	r3, r3, #7
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b7f      	cmp	r3, #127	; 0x7f
 8003e30:	d8f0      	bhi.n	8003e14 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	617a      	str	r2, [r7, #20]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	b2d2      	uxtb	r2, r2
 8003e3c:	701a      	strb	r2, [r3, #0]
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003e42:	2218      	movs	r2, #24
 8003e44:	6879      	ldr	r1, [r7, #4]
 8003e46:	68b8      	ldr	r0, [r7, #8]
 8003e48:	f7ff fcfa 	bl	8003840 <_SendPacket>
  RECORD_END();
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003e5a:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	4798      	blx	r3
  }
}
 8003e60:	bf00      	nop
 8003e62:	3730      	adds	r7, #48	; 0x30
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	200132ac 	.word	0x200132ac
 8003e6c:	2001327c 	.word	0x2001327c

08003e70 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b092      	sub	sp, #72	; 0x48
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003e78:	f3ef 8311 	mrs	r3, BASEPRI
 8003e7c:	f04f 0120 	mov.w	r1, #32
 8003e80:	f381 8811 	msr	BASEPRI, r1
 8003e84:	617b      	str	r3, [r7, #20]
 8003e86:	486a      	ldr	r0, [pc, #424]	; (8004030 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003e88:	f7ff fbed 	bl	8003666 <_PreparePacket>
 8003e8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	647b      	str	r3, [r7, #68]	; 0x44
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4b66      	ldr	r3, [pc, #408]	; (8004034 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea2:	e00b      	b.n	8003ebc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eaa:	1c59      	adds	r1, r3, #1
 8003eac:	6479      	str	r1, [r7, #68]	; 0x44
 8003eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eb8:	09db      	lsrs	r3, r3, #7
 8003eba:	643b      	str	r3, [r7, #64]	; 0x40
 8003ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8003ec0:	d8f0      	bhi.n	8003ea4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	647a      	str	r2, [r7, #68]	; 0x44
 8003ec8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
 8003ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003edc:	e00b      	b.n	8003ef6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee0:	b2da      	uxtb	r2, r3
 8003ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee4:	1c59      	adds	r1, r3, #1
 8003ee6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003ee8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	09db      	lsrs	r3, r3, #7
 8003ef4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8003efa:	d8f0      	bhi.n	8003ede <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	701a      	strb	r2, [r3, #0]
 8003f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	2220      	movs	r2, #32
 8003f12:	4619      	mov	r1, r3
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7ff fb59 	bl	80035cc <_EncodeStr>
 8003f1a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003f1c:	2209      	movs	r2, #9
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	6938      	ldr	r0, [r7, #16]
 8003f22:	f7ff fc8d 	bl	8003840 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b40      	ldr	r3, [pc, #256]	; (8004034 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	633b      	str	r3, [r7, #48]	; 0x30
 8003f3a:	e00b      	b.n	8003f54 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f42:	1c59      	adds	r1, r3, #1
 8003f44:	6379      	str	r1, [r7, #52]	; 0x34
 8003f46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f50:	09db      	lsrs	r3, r3, #7
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
 8003f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f56:	2b7f      	cmp	r3, #127	; 0x7f
 8003f58:	d8f0      	bhi.n	8003f3c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	637a      	str	r2, [r7, #52]	; 0x34
 8003f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f74:	e00b      	b.n	8003f8e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7c:	1c59      	adds	r1, r3, #1
 8003f7e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	09db      	lsrs	r3, r3, #7
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f90:	2b7f      	cmp	r3, #127	; 0x7f
 8003f92:	d8f0      	bhi.n	8003f76 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f9c:	b2d2      	uxtb	r2, r2
 8003f9e:	701a      	strb	r2, [r3, #0]
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	623b      	str	r3, [r7, #32]
 8003fae:	e00b      	b.n	8003fc8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	1c59      	adds	r1, r3, #1
 8003fb8:	6279      	str	r1, [r7, #36]	; 0x24
 8003fba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	09db      	lsrs	r3, r3, #7
 8003fc6:	623b      	str	r3, [r7, #32]
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	2b7f      	cmp	r3, #127	; 0x7f
 8003fcc:	d8f0      	bhi.n	8003fb0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	1c5a      	adds	r2, r3, #1
 8003fd2:	627a      	str	r2, [r7, #36]	; 0x24
 8003fd4:	6a3a      	ldr	r2, [r7, #32]
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	e00b      	b.n	8004000 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	61f9      	str	r1, [r7, #28]
 8003ff2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	09db      	lsrs	r3, r3, #7
 8003ffe:	61bb      	str	r3, [r7, #24]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b7f      	cmp	r3, #127	; 0x7f
 8004004:	d8f0      	bhi.n	8003fe8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	1c5a      	adds	r2, r3, #1
 800400a:	61fa      	str	r2, [r7, #28]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004016:	2215      	movs	r2, #21
 8004018:	68f9      	ldr	r1, [r7, #12]
 800401a:	6938      	ldr	r0, [r7, #16]
 800401c:	f7ff fc10 	bl	8003840 <_SendPacket>
  RECORD_END();
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f383 8811 	msr	BASEPRI, r3
}
 8004026:	bf00      	nop
 8004028:	3748      	adds	r7, #72	; 0x48
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	200132ac 	.word	0x200132ac
 8004034:	2001327c 	.word	0x2001327c

08004038 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800403c:	4b07      	ldr	r3, [pc, #28]	; (800405c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d008      	beq.n	8004056 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004044:	4b05      	ldr	r3, [pc, #20]	; (800405c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800404e:	4b03      	ldr	r3, [pc, #12]	; (800405c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4798      	blx	r3
  }
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	2001327c 	.word	0x2001327c

08004060 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004060:	b590      	push	{r4, r7, lr}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d019      	beq.n	80040a2 <SEGGER_SYSVIEW_RecordSystime+0x42>
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d014      	beq.n	80040a2 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004078:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800407a:	6a1b      	ldr	r3, [r3, #32]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4798      	blx	r3
 8004080:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004084:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004086:	e9d7 1200 	ldrd	r1, r2, [r7]
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	f04f 0400 	mov.w	r4, #0
 8004092:	0013      	movs	r3, r2
 8004094:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004096:	461a      	mov	r2, r3
 8004098:	4601      	mov	r1, r0
 800409a:	200d      	movs	r0, #13
 800409c:	f7ff fd12 	bl	8003ac4 <SEGGER_SYSVIEW_RecordU32x2>
 80040a0:	e005      	b.n	80040ae <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4619      	mov	r1, r3
 80040a8:	200c      	movs	r0, #12
 80040aa:	f7ff fccf 	bl	8003a4c <SEGGER_SYSVIEW_RecordU32>
  }
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd90      	pop	{r4, r7, pc}
 80040b6:	bf00      	nop
 80040b8:	2001327c 	.word	0x2001327c
 80040bc:	e0001004 	.word	0xe0001004

080040c0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80040c6:	f3ef 8311 	mrs	r3, BASEPRI
 80040ca:	f04f 0120 	mov.w	r1, #32
 80040ce:	f381 8811 	msr	BASEPRI, r1
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	4819      	ldr	r0, [pc, #100]	; (800413c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80040d6:	f7ff fac6 	bl	8003666 <_PreparePacket>
 80040da:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80040e0:	4b17      	ldr	r3, [pc, #92]	; (8004140 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	e00b      	b.n	800410c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	6179      	str	r1, [r7, #20]
 80040fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	09db      	lsrs	r3, r3, #7
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	2b7f      	cmp	r3, #127	; 0x7f
 8004110:	d8f0      	bhi.n	80040f4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	617a      	str	r2, [r7, #20]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004122:	2202      	movs	r2, #2
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	68b8      	ldr	r0, [r7, #8]
 8004128:	f7ff fb8a 	bl	8003840 <_SendPacket>
  RECORD_END();
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f383 8811 	msr	BASEPRI, r3
}
 8004132:	bf00      	nop
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	200132ac 	.word	0x200132ac
 8004140:	e000ed04 	.word	0xe000ed04

08004144 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800414a:	f3ef 8311 	mrs	r3, BASEPRI
 800414e:	f04f 0120 	mov.w	r1, #32
 8004152:	f381 8811 	msr	BASEPRI, r1
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	4807      	ldr	r0, [pc, #28]	; (8004178 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800415a:	f7ff fa84 	bl	8003666 <_PreparePacket>
 800415e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004160:	2203      	movs	r2, #3
 8004162:	6839      	ldr	r1, [r7, #0]
 8004164:	6838      	ldr	r0, [r7, #0]
 8004166:	f7ff fb6b 	bl	8003840 <_SendPacket>
  RECORD_END();
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f383 8811 	msr	BASEPRI, r3
}
 8004170:	bf00      	nop
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	200132ac 	.word	0x200132ac

0800417c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004182:	f3ef 8311 	mrs	r3, BASEPRI
 8004186:	f04f 0120 	mov.w	r1, #32
 800418a:	f381 8811 	msr	BASEPRI, r1
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	4807      	ldr	r0, [pc, #28]	; (80041b0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004192:	f7ff fa68 	bl	8003666 <_PreparePacket>
 8004196:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004198:	2212      	movs	r2, #18
 800419a:	6839      	ldr	r1, [r7, #0]
 800419c:	6838      	ldr	r0, [r7, #0]
 800419e:	f7ff fb4f 	bl	8003840 <_SendPacket>
  RECORD_END();
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f383 8811 	msr	BASEPRI, r3
}
 80041a8:	bf00      	nop
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	200132ac 	.word	0x200132ac

080041b4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80041ba:	f3ef 8311 	mrs	r3, BASEPRI
 80041be:	f04f 0120 	mov.w	r1, #32
 80041c2:	f381 8811 	msr	BASEPRI, r1
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	4807      	ldr	r0, [pc, #28]	; (80041e8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80041ca:	f7ff fa4c 	bl	8003666 <_PreparePacket>
 80041ce:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80041d0:	2211      	movs	r2, #17
 80041d2:	6839      	ldr	r1, [r7, #0]
 80041d4:	6838      	ldr	r0, [r7, #0]
 80041d6:	f7ff fb33 	bl	8003840 <_SendPacket>
  RECORD_END();
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f383 8811 	msr	BASEPRI, r3
}
 80041e0:	bf00      	nop
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	200132ac 	.word	0x200132ac

080041ec <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80041f4:	f3ef 8311 	mrs	r3, BASEPRI
 80041f8:	f04f 0120 	mov.w	r1, #32
 80041fc:	f381 8811 	msr	BASEPRI, r1
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	4819      	ldr	r0, [pc, #100]	; (8004268 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004204:	f7ff fa2f 	bl	8003666 <_PreparePacket>
 8004208:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800420e:	4b17      	ldr	r3, [pc, #92]	; (800426c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	61fb      	str	r3, [r7, #28]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	61bb      	str	r3, [r7, #24]
 8004220:	e00b      	b.n	800423a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	b2da      	uxtb	r2, r3
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	1c59      	adds	r1, r3, #1
 800422a:	61f9      	str	r1, [r7, #28]
 800422c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	09db      	lsrs	r3, r3, #7
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	2b7f      	cmp	r3, #127	; 0x7f
 800423e:	d8f0      	bhi.n	8004222 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	61fa      	str	r2, [r7, #28]
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004250:	2208      	movs	r2, #8
 8004252:	68f9      	ldr	r1, [r7, #12]
 8004254:	6938      	ldr	r0, [r7, #16]
 8004256:	f7ff faf3 	bl	8003840 <_SendPacket>
  RECORD_END();
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f383 8811 	msr	BASEPRI, r3
}
 8004260:	bf00      	nop
 8004262:	3720      	adds	r7, #32
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	200132ac 	.word	0x200132ac
 800426c:	2001327c 	.word	0x2001327c

08004270 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004278:	f3ef 8311 	mrs	r3, BASEPRI
 800427c:	f04f 0120 	mov.w	r1, #32
 8004280:	f381 8811 	msr	BASEPRI, r1
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	4819      	ldr	r0, [pc, #100]	; (80042ec <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004288:	f7ff f9ed 	bl	8003666 <_PreparePacket>
 800428c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004292:	4b17      	ldr	r3, [pc, #92]	; (80042f0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	61fb      	str	r3, [r7, #28]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	61bb      	str	r3, [r7, #24]
 80042a4:	e00b      	b.n	80042be <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	1c59      	adds	r1, r3, #1
 80042ae:	61f9      	str	r1, [r7, #28]
 80042b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	09db      	lsrs	r3, r3, #7
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b7f      	cmp	r3, #127	; 0x7f
 80042c2:	d8f0      	bhi.n	80042a6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	61fa      	str	r2, [r7, #28]
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80042d4:	2204      	movs	r2, #4
 80042d6:	68f9      	ldr	r1, [r7, #12]
 80042d8:	6938      	ldr	r0, [r7, #16]
 80042da:	f7ff fab1 	bl	8003840 <_SendPacket>
  RECORD_END();
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f383 8811 	msr	BASEPRI, r3
}
 80042e4:	bf00      	nop
 80042e6:	3720      	adds	r7, #32
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	200132ac 	.word	0x200132ac
 80042f0:	2001327c 	.word	0x2001327c

080042f4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004300:	f04f 0120 	mov.w	r1, #32
 8004304:	f381 8811 	msr	BASEPRI, r1
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	4819      	ldr	r0, [pc, #100]	; (8004370 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800430c:	f7ff f9ab 	bl	8003666 <_PreparePacket>
 8004310:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004316:	4b17      	ldr	r3, [pc, #92]	; (8004374 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	61bb      	str	r3, [r7, #24]
 8004328:	e00b      	b.n	8004342 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	1c59      	adds	r1, r3, #1
 8004332:	61f9      	str	r1, [r7, #28]
 8004334:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	701a      	strb	r2, [r3, #0]
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	09db      	lsrs	r3, r3, #7
 8004340:	61bb      	str	r3, [r7, #24]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b7f      	cmp	r3, #127	; 0x7f
 8004346:	d8f0      	bhi.n	800432a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	61fa      	str	r2, [r7, #28]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	b2d2      	uxtb	r2, r2
 8004352:	701a      	strb	r2, [r3, #0]
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004358:	2206      	movs	r2, #6
 800435a:	68f9      	ldr	r1, [r7, #12]
 800435c:	6938      	ldr	r0, [r7, #16]
 800435e:	f7ff fa6f 	bl	8003840 <_SendPacket>
  RECORD_END();
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f383 8811 	msr	BASEPRI, r3
}
 8004368:	bf00      	nop
 800436a:	3720      	adds	r7, #32
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	200132ac 	.word	0x200132ac
 8004374:	2001327c 	.word	0x2001327c

08004378 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b08c      	sub	sp, #48	; 0x30
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004382:	4b3b      	ldr	r3, [pc, #236]	; (8004470 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d06d      	beq.n	8004466 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800438a:	4b39      	ldr	r3, [pc, #228]	; (8004470 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004390:	2300      	movs	r3, #0
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
 8004394:	e008      	b.n	80043a8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800439c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d007      	beq.n	80043b2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	3301      	adds	r3, #1
 80043a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043a8:	79fb      	ldrb	r3, [r7, #7]
 80043aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d3f2      	bcc.n	8004396 <SEGGER_SYSVIEW_SendModule+0x1e>
 80043b0:	e000      	b.n	80043b4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80043b2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d055      	beq.n	8004466 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80043ba:	f3ef 8311 	mrs	r3, BASEPRI
 80043be:	f04f 0120 	mov.w	r1, #32
 80043c2:	f381 8811 	msr	BASEPRI, r1
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	482a      	ldr	r0, [pc, #168]	; (8004474 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80043ca:	f7ff f94c 	bl	8003666 <_PreparePacket>
 80043ce:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	623b      	str	r3, [r7, #32]
 80043dc:	e00b      	b.n	80043f6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	1c59      	adds	r1, r3, #1
 80043e6:	6279      	str	r1, [r7, #36]	; 0x24
 80043e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	09db      	lsrs	r3, r3, #7
 80043f4:	623b      	str	r3, [r7, #32]
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	2b7f      	cmp	r3, #127	; 0x7f
 80043fa:	d8f0      	bhi.n	80043de <SEGGER_SYSVIEW_SendModule+0x66>
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	1c5a      	adds	r2, r3, #1
 8004400:	627a      	str	r2, [r7, #36]	; 0x24
 8004402:	6a3a      	ldr	r2, [r7, #32]
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	61fb      	str	r3, [r7, #28]
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	e00b      	b.n	8004430 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	b2da      	uxtb	r2, r3
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	1c59      	adds	r1, r3, #1
 8004420:	61f9      	str	r1, [r7, #28]
 8004422:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	09db      	lsrs	r3, r3, #7
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	2b7f      	cmp	r3, #127	; 0x7f
 8004434:	d8f0      	bhi.n	8004418 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	61fa      	str	r2, [r7, #28]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	b2d2      	uxtb	r2, r2
 8004440:	701a      	strb	r2, [r3, #0]
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2280      	movs	r2, #128	; 0x80
 800444c:	4619      	mov	r1, r3
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f7ff f8bc 	bl	80035cc <_EncodeStr>
 8004454:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004456:	2216      	movs	r2, #22
 8004458:	68f9      	ldr	r1, [r7, #12]
 800445a:	6938      	ldr	r0, [r7, #16]
 800445c:	f7ff f9f0 	bl	8003840 <_SendPacket>
      RECORD_END();
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004466:	bf00      	nop
 8004468:	3730      	adds	r7, #48	; 0x30
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	200132a4 	.word	0x200132a4
 8004474:	200132ac 	.word	0x200132ac

08004478 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00f      	beq.n	80044a6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004486:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f2      	bne.n	800448c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	200132a4 	.word	0x200132a4

080044b4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80044ba:	f3ef 8311 	mrs	r3, BASEPRI
 80044be:	f04f 0120 	mov.w	r1, #32
 80044c2:	f381 8811 	msr	BASEPRI, r1
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	4817      	ldr	r0, [pc, #92]	; (8004528 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80044ca:	f7ff f8cc 	bl	8003666 <_PreparePacket>
 80044ce:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	4b14      	ldr	r3, [pc, #80]	; (800452c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	e00b      	b.n	80044f8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	1c59      	adds	r1, r3, #1
 80044e8:	6179      	str	r1, [r7, #20]
 80044ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	09db      	lsrs	r3, r3, #7
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	2b7f      	cmp	r3, #127	; 0x7f
 80044fc:	d8f0      	bhi.n	80044e0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	617a      	str	r2, [r7, #20]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800450e:	221b      	movs	r2, #27
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	68b8      	ldr	r0, [r7, #8]
 8004514:	f7ff f994 	bl	8003840 <_SendPacket>
  RECORD_END();
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f383 8811 	msr	BASEPRI, r3
}
 800451e:	bf00      	nop
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	200132ac 	.word	0x200132ac
 800452c:	200132a8 	.word	0x200132a8

08004530 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004538:	f3ef 8311 	mrs	r3, BASEPRI
 800453c:	f04f 0120 	mov.w	r1, #32
 8004540:	f381 8811 	msr	BASEPRI, r1
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	4827      	ldr	r0, [pc, #156]	; (80045e4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004548:	f7ff f88d 	bl	8003666 <_PreparePacket>
 800454c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800454e:	2280      	movs	r2, #128	; 0x80
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	6938      	ldr	r0, [r7, #16]
 8004554:	f7ff f83a 	bl	80035cc <_EncodeStr>
 8004558:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
 800455e:	2301      	movs	r3, #1
 8004560:	623b      	str	r3, [r7, #32]
 8004562:	e00b      	b.n	800457c <SEGGER_SYSVIEW_Warn+0x4c>
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	b2da      	uxtb	r2, r3
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	1c59      	adds	r1, r3, #1
 800456c:	6279      	str	r1, [r7, #36]	; 0x24
 800456e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	09db      	lsrs	r3, r3, #7
 800457a:	623b      	str	r3, [r7, #32]
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	2b7f      	cmp	r3, #127	; 0x7f
 8004580:	d8f0      	bhi.n	8004564 <SEGGER_SYSVIEW_Warn+0x34>
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	1c5a      	adds	r2, r3, #1
 8004586:	627a      	str	r2, [r7, #36]	; 0x24
 8004588:	6a3a      	ldr	r2, [r7, #32]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	e00b      	b.n	80045b4 <SEGGER_SYSVIEW_Warn+0x84>
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	1c59      	adds	r1, r3, #1
 80045a4:	61f9      	str	r1, [r7, #28]
 80045a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	09db      	lsrs	r3, r3, #7
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b7f      	cmp	r3, #127	; 0x7f
 80045b8:	d8f0      	bhi.n	800459c <SEGGER_SYSVIEW_Warn+0x6c>
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	61fa      	str	r2, [r7, #28]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80045ca:	221a      	movs	r2, #26
 80045cc:	68f9      	ldr	r1, [r7, #12]
 80045ce:	6938      	ldr	r0, [r7, #16]
 80045d0:	f7ff f936 	bl	8003840 <_SendPacket>
  RECORD_END();
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f383 8811 	msr	BASEPRI, r3
}
 80045da:	bf00      	nop
 80045dc:	3728      	adds	r7, #40	; 0x28
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	200132ac 	.word	0x200132ac

080045e8 <__libc_init_array>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	4e0d      	ldr	r6, [pc, #52]	; (8004620 <__libc_init_array+0x38>)
 80045ec:	4c0d      	ldr	r4, [pc, #52]	; (8004624 <__libc_init_array+0x3c>)
 80045ee:	1ba4      	subs	r4, r4, r6
 80045f0:	10a4      	asrs	r4, r4, #2
 80045f2:	2500      	movs	r5, #0
 80045f4:	42a5      	cmp	r5, r4
 80045f6:	d109      	bne.n	800460c <__libc_init_array+0x24>
 80045f8:	4e0b      	ldr	r6, [pc, #44]	; (8004628 <__libc_init_array+0x40>)
 80045fa:	4c0c      	ldr	r4, [pc, #48]	; (800462c <__libc_init_array+0x44>)
 80045fc:	f000 fc58 	bl	8004eb0 <_init>
 8004600:	1ba4      	subs	r4, r4, r6
 8004602:	10a4      	asrs	r4, r4, #2
 8004604:	2500      	movs	r5, #0
 8004606:	42a5      	cmp	r5, r4
 8004608:	d105      	bne.n	8004616 <__libc_init_array+0x2e>
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004610:	4798      	blx	r3
 8004612:	3501      	adds	r5, #1
 8004614:	e7ee      	b.n	80045f4 <__libc_init_array+0xc>
 8004616:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800461a:	4798      	blx	r3
 800461c:	3501      	adds	r5, #1
 800461e:	e7f2      	b.n	8004606 <__libc_init_array+0x1e>
 8004620:	08004fe4 	.word	0x08004fe4
 8004624:	08004fe4 	.word	0x08004fe4
 8004628:	08004fe4 	.word	0x08004fe4
 800462c:	08004fe8 	.word	0x08004fe8

08004630 <memcmp>:
 8004630:	b530      	push	{r4, r5, lr}
 8004632:	2400      	movs	r4, #0
 8004634:	42a2      	cmp	r2, r4
 8004636:	d101      	bne.n	800463c <memcmp+0xc>
 8004638:	2000      	movs	r0, #0
 800463a:	e007      	b.n	800464c <memcmp+0x1c>
 800463c:	5d03      	ldrb	r3, [r0, r4]
 800463e:	3401      	adds	r4, #1
 8004640:	190d      	adds	r5, r1, r4
 8004642:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004646:	42ab      	cmp	r3, r5
 8004648:	d0f4      	beq.n	8004634 <memcmp+0x4>
 800464a:	1b58      	subs	r0, r3, r5
 800464c:	bd30      	pop	{r4, r5, pc}

0800464e <memcpy>:
 800464e:	b510      	push	{r4, lr}
 8004650:	1e43      	subs	r3, r0, #1
 8004652:	440a      	add	r2, r1
 8004654:	4291      	cmp	r1, r2
 8004656:	d100      	bne.n	800465a <memcpy+0xc>
 8004658:	bd10      	pop	{r4, pc}
 800465a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800465e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004662:	e7f7      	b.n	8004654 <memcpy+0x6>

08004664 <memset>:
 8004664:	4402      	add	r2, r0
 8004666:	4603      	mov	r3, r0
 8004668:	4293      	cmp	r3, r2
 800466a:	d100      	bne.n	800466e <memset+0xa>
 800466c:	4770      	bx	lr
 800466e:	f803 1b01 	strb.w	r1, [r3], #1
 8004672:	e7f9      	b.n	8004668 <memset+0x4>

08004674 <sniprintf>:
 8004674:	b40c      	push	{r2, r3}
 8004676:	b530      	push	{r4, r5, lr}
 8004678:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <sniprintf+0x64>)
 800467a:	1e0c      	subs	r4, r1, #0
 800467c:	b09d      	sub	sp, #116	; 0x74
 800467e:	681d      	ldr	r5, [r3, #0]
 8004680:	da08      	bge.n	8004694 <sniprintf+0x20>
 8004682:	238b      	movs	r3, #139	; 0x8b
 8004684:	602b      	str	r3, [r5, #0]
 8004686:	f04f 30ff 	mov.w	r0, #4294967295
 800468a:	b01d      	add	sp, #116	; 0x74
 800468c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004690:	b002      	add	sp, #8
 8004692:	4770      	bx	lr
 8004694:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004698:	f8ad 3014 	strh.w	r3, [sp, #20]
 800469c:	bf14      	ite	ne
 800469e:	f104 33ff 	addne.w	r3, r4, #4294967295
 80046a2:	4623      	moveq	r3, r4
 80046a4:	9304      	str	r3, [sp, #16]
 80046a6:	9307      	str	r3, [sp, #28]
 80046a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046ac:	9002      	str	r0, [sp, #8]
 80046ae:	9006      	str	r0, [sp, #24]
 80046b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80046b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80046b6:	ab21      	add	r3, sp, #132	; 0x84
 80046b8:	a902      	add	r1, sp, #8
 80046ba:	4628      	mov	r0, r5
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	f000 f867 	bl	8004790 <_svfiprintf_r>
 80046c2:	1c43      	adds	r3, r0, #1
 80046c4:	bfbc      	itt	lt
 80046c6:	238b      	movlt	r3, #139	; 0x8b
 80046c8:	602b      	strlt	r3, [r5, #0]
 80046ca:	2c00      	cmp	r4, #0
 80046cc:	d0dd      	beq.n	800468a <sniprintf+0x16>
 80046ce:	9b02      	ldr	r3, [sp, #8]
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	e7d9      	b.n	800468a <sniprintf+0x16>
 80046d6:	bf00      	nop
 80046d8:	20000014 	.word	0x20000014

080046dc <__ssputs_r>:
 80046dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046e0:	688e      	ldr	r6, [r1, #8]
 80046e2:	429e      	cmp	r6, r3
 80046e4:	4682      	mov	sl, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	4690      	mov	r8, r2
 80046ea:	4699      	mov	r9, r3
 80046ec:	d837      	bhi.n	800475e <__ssputs_r+0x82>
 80046ee:	898a      	ldrh	r2, [r1, #12]
 80046f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046f4:	d031      	beq.n	800475a <__ssputs_r+0x7e>
 80046f6:	6825      	ldr	r5, [r4, #0]
 80046f8:	6909      	ldr	r1, [r1, #16]
 80046fa:	1a6f      	subs	r7, r5, r1
 80046fc:	6965      	ldr	r5, [r4, #20]
 80046fe:	2302      	movs	r3, #2
 8004700:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004704:	fb95 f5f3 	sdiv	r5, r5, r3
 8004708:	f109 0301 	add.w	r3, r9, #1
 800470c:	443b      	add	r3, r7
 800470e:	429d      	cmp	r5, r3
 8004710:	bf38      	it	cc
 8004712:	461d      	movcc	r5, r3
 8004714:	0553      	lsls	r3, r2, #21
 8004716:	d530      	bpl.n	800477a <__ssputs_r+0x9e>
 8004718:	4629      	mov	r1, r5
 800471a:	f000 fb21 	bl	8004d60 <_malloc_r>
 800471e:	4606      	mov	r6, r0
 8004720:	b950      	cbnz	r0, 8004738 <__ssputs_r+0x5c>
 8004722:	230c      	movs	r3, #12
 8004724:	f8ca 3000 	str.w	r3, [sl]
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472e:	81a3      	strh	r3, [r4, #12]
 8004730:	f04f 30ff 	mov.w	r0, #4294967295
 8004734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004738:	463a      	mov	r2, r7
 800473a:	6921      	ldr	r1, [r4, #16]
 800473c:	f7ff ff87 	bl	800464e <memcpy>
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	6126      	str	r6, [r4, #16]
 800474e:	6165      	str	r5, [r4, #20]
 8004750:	443e      	add	r6, r7
 8004752:	1bed      	subs	r5, r5, r7
 8004754:	6026      	str	r6, [r4, #0]
 8004756:	60a5      	str	r5, [r4, #8]
 8004758:	464e      	mov	r6, r9
 800475a:	454e      	cmp	r6, r9
 800475c:	d900      	bls.n	8004760 <__ssputs_r+0x84>
 800475e:	464e      	mov	r6, r9
 8004760:	4632      	mov	r2, r6
 8004762:	4641      	mov	r1, r8
 8004764:	6820      	ldr	r0, [r4, #0]
 8004766:	f000 fa93 	bl	8004c90 <memmove>
 800476a:	68a3      	ldr	r3, [r4, #8]
 800476c:	1b9b      	subs	r3, r3, r6
 800476e:	60a3      	str	r3, [r4, #8]
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	441e      	add	r6, r3
 8004774:	6026      	str	r6, [r4, #0]
 8004776:	2000      	movs	r0, #0
 8004778:	e7dc      	b.n	8004734 <__ssputs_r+0x58>
 800477a:	462a      	mov	r2, r5
 800477c:	f000 fb4a 	bl	8004e14 <_realloc_r>
 8004780:	4606      	mov	r6, r0
 8004782:	2800      	cmp	r0, #0
 8004784:	d1e2      	bne.n	800474c <__ssputs_r+0x70>
 8004786:	6921      	ldr	r1, [r4, #16]
 8004788:	4650      	mov	r0, sl
 800478a:	f000 fa9b 	bl	8004cc4 <_free_r>
 800478e:	e7c8      	b.n	8004722 <__ssputs_r+0x46>

08004790 <_svfiprintf_r>:
 8004790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004794:	461d      	mov	r5, r3
 8004796:	898b      	ldrh	r3, [r1, #12]
 8004798:	061f      	lsls	r7, r3, #24
 800479a:	b09d      	sub	sp, #116	; 0x74
 800479c:	4680      	mov	r8, r0
 800479e:	460c      	mov	r4, r1
 80047a0:	4616      	mov	r6, r2
 80047a2:	d50f      	bpl.n	80047c4 <_svfiprintf_r+0x34>
 80047a4:	690b      	ldr	r3, [r1, #16]
 80047a6:	b96b      	cbnz	r3, 80047c4 <_svfiprintf_r+0x34>
 80047a8:	2140      	movs	r1, #64	; 0x40
 80047aa:	f000 fad9 	bl	8004d60 <_malloc_r>
 80047ae:	6020      	str	r0, [r4, #0]
 80047b0:	6120      	str	r0, [r4, #16]
 80047b2:	b928      	cbnz	r0, 80047c0 <_svfiprintf_r+0x30>
 80047b4:	230c      	movs	r3, #12
 80047b6:	f8c8 3000 	str.w	r3, [r8]
 80047ba:	f04f 30ff 	mov.w	r0, #4294967295
 80047be:	e0c8      	b.n	8004952 <_svfiprintf_r+0x1c2>
 80047c0:	2340      	movs	r3, #64	; 0x40
 80047c2:	6163      	str	r3, [r4, #20]
 80047c4:	2300      	movs	r3, #0
 80047c6:	9309      	str	r3, [sp, #36]	; 0x24
 80047c8:	2320      	movs	r3, #32
 80047ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047ce:	2330      	movs	r3, #48	; 0x30
 80047d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047d4:	9503      	str	r5, [sp, #12]
 80047d6:	f04f 0b01 	mov.w	fp, #1
 80047da:	4637      	mov	r7, r6
 80047dc:	463d      	mov	r5, r7
 80047de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80047e2:	b10b      	cbz	r3, 80047e8 <_svfiprintf_r+0x58>
 80047e4:	2b25      	cmp	r3, #37	; 0x25
 80047e6:	d13e      	bne.n	8004866 <_svfiprintf_r+0xd6>
 80047e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80047ec:	d00b      	beq.n	8004806 <_svfiprintf_r+0x76>
 80047ee:	4653      	mov	r3, sl
 80047f0:	4632      	mov	r2, r6
 80047f2:	4621      	mov	r1, r4
 80047f4:	4640      	mov	r0, r8
 80047f6:	f7ff ff71 	bl	80046dc <__ssputs_r>
 80047fa:	3001      	adds	r0, #1
 80047fc:	f000 80a4 	beq.w	8004948 <_svfiprintf_r+0x1b8>
 8004800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004802:	4453      	add	r3, sl
 8004804:	9309      	str	r3, [sp, #36]	; 0x24
 8004806:	783b      	ldrb	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 809d 	beq.w	8004948 <_svfiprintf_r+0x1b8>
 800480e:	2300      	movs	r3, #0
 8004810:	f04f 32ff 	mov.w	r2, #4294967295
 8004814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004818:	9304      	str	r3, [sp, #16]
 800481a:	9307      	str	r3, [sp, #28]
 800481c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004820:	931a      	str	r3, [sp, #104]	; 0x68
 8004822:	462f      	mov	r7, r5
 8004824:	2205      	movs	r2, #5
 8004826:	f817 1b01 	ldrb.w	r1, [r7], #1
 800482a:	4850      	ldr	r0, [pc, #320]	; (800496c <_svfiprintf_r+0x1dc>)
 800482c:	f7fb fd20 	bl	8000270 <memchr>
 8004830:	9b04      	ldr	r3, [sp, #16]
 8004832:	b9d0      	cbnz	r0, 800486a <_svfiprintf_r+0xda>
 8004834:	06d9      	lsls	r1, r3, #27
 8004836:	bf44      	itt	mi
 8004838:	2220      	movmi	r2, #32
 800483a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800483e:	071a      	lsls	r2, r3, #28
 8004840:	bf44      	itt	mi
 8004842:	222b      	movmi	r2, #43	; 0x2b
 8004844:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004848:	782a      	ldrb	r2, [r5, #0]
 800484a:	2a2a      	cmp	r2, #42	; 0x2a
 800484c:	d015      	beq.n	800487a <_svfiprintf_r+0xea>
 800484e:	9a07      	ldr	r2, [sp, #28]
 8004850:	462f      	mov	r7, r5
 8004852:	2000      	movs	r0, #0
 8004854:	250a      	movs	r5, #10
 8004856:	4639      	mov	r1, r7
 8004858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800485c:	3b30      	subs	r3, #48	; 0x30
 800485e:	2b09      	cmp	r3, #9
 8004860:	d94d      	bls.n	80048fe <_svfiprintf_r+0x16e>
 8004862:	b1b8      	cbz	r0, 8004894 <_svfiprintf_r+0x104>
 8004864:	e00f      	b.n	8004886 <_svfiprintf_r+0xf6>
 8004866:	462f      	mov	r7, r5
 8004868:	e7b8      	b.n	80047dc <_svfiprintf_r+0x4c>
 800486a:	4a40      	ldr	r2, [pc, #256]	; (800496c <_svfiprintf_r+0x1dc>)
 800486c:	1a80      	subs	r0, r0, r2
 800486e:	fa0b f000 	lsl.w	r0, fp, r0
 8004872:	4318      	orrs	r0, r3
 8004874:	9004      	str	r0, [sp, #16]
 8004876:	463d      	mov	r5, r7
 8004878:	e7d3      	b.n	8004822 <_svfiprintf_r+0x92>
 800487a:	9a03      	ldr	r2, [sp, #12]
 800487c:	1d11      	adds	r1, r2, #4
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	9103      	str	r1, [sp, #12]
 8004882:	2a00      	cmp	r2, #0
 8004884:	db01      	blt.n	800488a <_svfiprintf_r+0xfa>
 8004886:	9207      	str	r2, [sp, #28]
 8004888:	e004      	b.n	8004894 <_svfiprintf_r+0x104>
 800488a:	4252      	negs	r2, r2
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	9207      	str	r2, [sp, #28]
 8004892:	9304      	str	r3, [sp, #16]
 8004894:	783b      	ldrb	r3, [r7, #0]
 8004896:	2b2e      	cmp	r3, #46	; 0x2e
 8004898:	d10c      	bne.n	80048b4 <_svfiprintf_r+0x124>
 800489a:	787b      	ldrb	r3, [r7, #1]
 800489c:	2b2a      	cmp	r3, #42	; 0x2a
 800489e:	d133      	bne.n	8004908 <_svfiprintf_r+0x178>
 80048a0:	9b03      	ldr	r3, [sp, #12]
 80048a2:	1d1a      	adds	r2, r3, #4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	9203      	str	r2, [sp, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	bfb8      	it	lt
 80048ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80048b0:	3702      	adds	r7, #2
 80048b2:	9305      	str	r3, [sp, #20]
 80048b4:	4d2e      	ldr	r5, [pc, #184]	; (8004970 <_svfiprintf_r+0x1e0>)
 80048b6:	7839      	ldrb	r1, [r7, #0]
 80048b8:	2203      	movs	r2, #3
 80048ba:	4628      	mov	r0, r5
 80048bc:	f7fb fcd8 	bl	8000270 <memchr>
 80048c0:	b138      	cbz	r0, 80048d2 <_svfiprintf_r+0x142>
 80048c2:	2340      	movs	r3, #64	; 0x40
 80048c4:	1b40      	subs	r0, r0, r5
 80048c6:	fa03 f000 	lsl.w	r0, r3, r0
 80048ca:	9b04      	ldr	r3, [sp, #16]
 80048cc:	4303      	orrs	r3, r0
 80048ce:	3701      	adds	r7, #1
 80048d0:	9304      	str	r3, [sp, #16]
 80048d2:	7839      	ldrb	r1, [r7, #0]
 80048d4:	4827      	ldr	r0, [pc, #156]	; (8004974 <_svfiprintf_r+0x1e4>)
 80048d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80048da:	2206      	movs	r2, #6
 80048dc:	1c7e      	adds	r6, r7, #1
 80048de:	f7fb fcc7 	bl	8000270 <memchr>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d038      	beq.n	8004958 <_svfiprintf_r+0x1c8>
 80048e6:	4b24      	ldr	r3, [pc, #144]	; (8004978 <_svfiprintf_r+0x1e8>)
 80048e8:	bb13      	cbnz	r3, 8004930 <_svfiprintf_r+0x1a0>
 80048ea:	9b03      	ldr	r3, [sp, #12]
 80048ec:	3307      	adds	r3, #7
 80048ee:	f023 0307 	bic.w	r3, r3, #7
 80048f2:	3308      	adds	r3, #8
 80048f4:	9303      	str	r3, [sp, #12]
 80048f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f8:	444b      	add	r3, r9
 80048fa:	9309      	str	r3, [sp, #36]	; 0x24
 80048fc:	e76d      	b.n	80047da <_svfiprintf_r+0x4a>
 80048fe:	fb05 3202 	mla	r2, r5, r2, r3
 8004902:	2001      	movs	r0, #1
 8004904:	460f      	mov	r7, r1
 8004906:	e7a6      	b.n	8004856 <_svfiprintf_r+0xc6>
 8004908:	2300      	movs	r3, #0
 800490a:	3701      	adds	r7, #1
 800490c:	9305      	str	r3, [sp, #20]
 800490e:	4619      	mov	r1, r3
 8004910:	250a      	movs	r5, #10
 8004912:	4638      	mov	r0, r7
 8004914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004918:	3a30      	subs	r2, #48	; 0x30
 800491a:	2a09      	cmp	r2, #9
 800491c:	d903      	bls.n	8004926 <_svfiprintf_r+0x196>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0c8      	beq.n	80048b4 <_svfiprintf_r+0x124>
 8004922:	9105      	str	r1, [sp, #20]
 8004924:	e7c6      	b.n	80048b4 <_svfiprintf_r+0x124>
 8004926:	fb05 2101 	mla	r1, r5, r1, r2
 800492a:	2301      	movs	r3, #1
 800492c:	4607      	mov	r7, r0
 800492e:	e7f0      	b.n	8004912 <_svfiprintf_r+0x182>
 8004930:	ab03      	add	r3, sp, #12
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	4622      	mov	r2, r4
 8004936:	4b11      	ldr	r3, [pc, #68]	; (800497c <_svfiprintf_r+0x1ec>)
 8004938:	a904      	add	r1, sp, #16
 800493a:	4640      	mov	r0, r8
 800493c:	f3af 8000 	nop.w
 8004940:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004944:	4681      	mov	r9, r0
 8004946:	d1d6      	bne.n	80048f6 <_svfiprintf_r+0x166>
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	065b      	lsls	r3, r3, #25
 800494c:	f53f af35 	bmi.w	80047ba <_svfiprintf_r+0x2a>
 8004950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004952:	b01d      	add	sp, #116	; 0x74
 8004954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004958:	ab03      	add	r3, sp, #12
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	4622      	mov	r2, r4
 800495e:	4b07      	ldr	r3, [pc, #28]	; (800497c <_svfiprintf_r+0x1ec>)
 8004960:	a904      	add	r1, sp, #16
 8004962:	4640      	mov	r0, r8
 8004964:	f000 f882 	bl	8004a6c <_printf_i>
 8004968:	e7ea      	b.n	8004940 <_svfiprintf_r+0x1b0>
 800496a:	bf00      	nop
 800496c:	08004fa6 	.word	0x08004fa6
 8004970:	08004fac 	.word	0x08004fac
 8004974:	08004fb0 	.word	0x08004fb0
 8004978:	00000000 	.word	0x00000000
 800497c:	080046dd 	.word	0x080046dd

08004980 <_printf_common>:
 8004980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	4691      	mov	r9, r2
 8004986:	461f      	mov	r7, r3
 8004988:	688a      	ldr	r2, [r1, #8]
 800498a:	690b      	ldr	r3, [r1, #16]
 800498c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004990:	4293      	cmp	r3, r2
 8004992:	bfb8      	it	lt
 8004994:	4613      	movlt	r3, r2
 8004996:	f8c9 3000 	str.w	r3, [r9]
 800499a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800499e:	4606      	mov	r6, r0
 80049a0:	460c      	mov	r4, r1
 80049a2:	b112      	cbz	r2, 80049aa <_printf_common+0x2a>
 80049a4:	3301      	adds	r3, #1
 80049a6:	f8c9 3000 	str.w	r3, [r9]
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	0699      	lsls	r1, r3, #26
 80049ae:	bf42      	ittt	mi
 80049b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80049b4:	3302      	addmi	r3, #2
 80049b6:	f8c9 3000 	strmi.w	r3, [r9]
 80049ba:	6825      	ldr	r5, [r4, #0]
 80049bc:	f015 0506 	ands.w	r5, r5, #6
 80049c0:	d107      	bne.n	80049d2 <_printf_common+0x52>
 80049c2:	f104 0a19 	add.w	sl, r4, #25
 80049c6:	68e3      	ldr	r3, [r4, #12]
 80049c8:	f8d9 2000 	ldr.w	r2, [r9]
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	42ab      	cmp	r3, r5
 80049d0:	dc28      	bgt.n	8004a24 <_printf_common+0xa4>
 80049d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80049d6:	6822      	ldr	r2, [r4, #0]
 80049d8:	3300      	adds	r3, #0
 80049da:	bf18      	it	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	0692      	lsls	r2, r2, #26
 80049e0:	d42d      	bmi.n	8004a3e <_printf_common+0xbe>
 80049e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049e6:	4639      	mov	r1, r7
 80049e8:	4630      	mov	r0, r6
 80049ea:	47c0      	blx	r8
 80049ec:	3001      	adds	r0, #1
 80049ee:	d020      	beq.n	8004a32 <_printf_common+0xb2>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	68e5      	ldr	r5, [r4, #12]
 80049f4:	f8d9 2000 	ldr.w	r2, [r9]
 80049f8:	f003 0306 	and.w	r3, r3, #6
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	bf08      	it	eq
 8004a00:	1aad      	subeq	r5, r5, r2
 8004a02:	68a3      	ldr	r3, [r4, #8]
 8004a04:	6922      	ldr	r2, [r4, #16]
 8004a06:	bf0c      	ite	eq
 8004a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a0c:	2500      	movne	r5, #0
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	bfc4      	itt	gt
 8004a12:	1a9b      	subgt	r3, r3, r2
 8004a14:	18ed      	addgt	r5, r5, r3
 8004a16:	f04f 0900 	mov.w	r9, #0
 8004a1a:	341a      	adds	r4, #26
 8004a1c:	454d      	cmp	r5, r9
 8004a1e:	d11a      	bne.n	8004a56 <_printf_common+0xd6>
 8004a20:	2000      	movs	r0, #0
 8004a22:	e008      	b.n	8004a36 <_printf_common+0xb6>
 8004a24:	2301      	movs	r3, #1
 8004a26:	4652      	mov	r2, sl
 8004a28:	4639      	mov	r1, r7
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	47c0      	blx	r8
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d103      	bne.n	8004a3a <_printf_common+0xba>
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295
 8004a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3a:	3501      	adds	r5, #1
 8004a3c:	e7c3      	b.n	80049c6 <_printf_common+0x46>
 8004a3e:	18e1      	adds	r1, r4, r3
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	2030      	movs	r0, #48	; 0x30
 8004a44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a48:	4422      	add	r2, r4
 8004a4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a52:	3302      	adds	r3, #2
 8004a54:	e7c5      	b.n	80049e2 <_printf_common+0x62>
 8004a56:	2301      	movs	r3, #1
 8004a58:	4622      	mov	r2, r4
 8004a5a:	4639      	mov	r1, r7
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	47c0      	blx	r8
 8004a60:	3001      	adds	r0, #1
 8004a62:	d0e6      	beq.n	8004a32 <_printf_common+0xb2>
 8004a64:	f109 0901 	add.w	r9, r9, #1
 8004a68:	e7d8      	b.n	8004a1c <_printf_common+0x9c>
	...

08004a6c <_printf_i>:
 8004a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004a74:	460c      	mov	r4, r1
 8004a76:	7e09      	ldrb	r1, [r1, #24]
 8004a78:	b085      	sub	sp, #20
 8004a7a:	296e      	cmp	r1, #110	; 0x6e
 8004a7c:	4617      	mov	r7, r2
 8004a7e:	4606      	mov	r6, r0
 8004a80:	4698      	mov	r8, r3
 8004a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a84:	f000 80b3 	beq.w	8004bee <_printf_i+0x182>
 8004a88:	d822      	bhi.n	8004ad0 <_printf_i+0x64>
 8004a8a:	2963      	cmp	r1, #99	; 0x63
 8004a8c:	d036      	beq.n	8004afc <_printf_i+0x90>
 8004a8e:	d80a      	bhi.n	8004aa6 <_printf_i+0x3a>
 8004a90:	2900      	cmp	r1, #0
 8004a92:	f000 80b9 	beq.w	8004c08 <_printf_i+0x19c>
 8004a96:	2958      	cmp	r1, #88	; 0x58
 8004a98:	f000 8083 	beq.w	8004ba2 <_printf_i+0x136>
 8004a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004aa0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004aa4:	e032      	b.n	8004b0c <_printf_i+0xa0>
 8004aa6:	2964      	cmp	r1, #100	; 0x64
 8004aa8:	d001      	beq.n	8004aae <_printf_i+0x42>
 8004aaa:	2969      	cmp	r1, #105	; 0x69
 8004aac:	d1f6      	bne.n	8004a9c <_printf_i+0x30>
 8004aae:	6820      	ldr	r0, [r4, #0]
 8004ab0:	6813      	ldr	r3, [r2, #0]
 8004ab2:	0605      	lsls	r5, r0, #24
 8004ab4:	f103 0104 	add.w	r1, r3, #4
 8004ab8:	d52a      	bpl.n	8004b10 <_printf_i+0xa4>
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6011      	str	r1, [r2, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	da03      	bge.n	8004aca <_printf_i+0x5e>
 8004ac2:	222d      	movs	r2, #45	; 0x2d
 8004ac4:	425b      	negs	r3, r3
 8004ac6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004aca:	486f      	ldr	r0, [pc, #444]	; (8004c88 <_printf_i+0x21c>)
 8004acc:	220a      	movs	r2, #10
 8004ace:	e039      	b.n	8004b44 <_printf_i+0xd8>
 8004ad0:	2973      	cmp	r1, #115	; 0x73
 8004ad2:	f000 809d 	beq.w	8004c10 <_printf_i+0x1a4>
 8004ad6:	d808      	bhi.n	8004aea <_printf_i+0x7e>
 8004ad8:	296f      	cmp	r1, #111	; 0x6f
 8004ada:	d020      	beq.n	8004b1e <_printf_i+0xb2>
 8004adc:	2970      	cmp	r1, #112	; 0x70
 8004ade:	d1dd      	bne.n	8004a9c <_printf_i+0x30>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	f043 0320 	orr.w	r3, r3, #32
 8004ae6:	6023      	str	r3, [r4, #0]
 8004ae8:	e003      	b.n	8004af2 <_printf_i+0x86>
 8004aea:	2975      	cmp	r1, #117	; 0x75
 8004aec:	d017      	beq.n	8004b1e <_printf_i+0xb2>
 8004aee:	2978      	cmp	r1, #120	; 0x78
 8004af0:	d1d4      	bne.n	8004a9c <_printf_i+0x30>
 8004af2:	2378      	movs	r3, #120	; 0x78
 8004af4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004af8:	4864      	ldr	r0, [pc, #400]	; (8004c8c <_printf_i+0x220>)
 8004afa:	e055      	b.n	8004ba8 <_printf_i+0x13c>
 8004afc:	6813      	ldr	r3, [r2, #0]
 8004afe:	1d19      	adds	r1, r3, #4
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6011      	str	r1, [r2, #0]
 8004b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e08c      	b.n	8004c2a <_printf_i+0x1be>
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6011      	str	r1, [r2, #0]
 8004b14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b18:	bf18      	it	ne
 8004b1a:	b21b      	sxthne	r3, r3
 8004b1c:	e7cf      	b.n	8004abe <_printf_i+0x52>
 8004b1e:	6813      	ldr	r3, [r2, #0]
 8004b20:	6825      	ldr	r5, [r4, #0]
 8004b22:	1d18      	adds	r0, r3, #4
 8004b24:	6010      	str	r0, [r2, #0]
 8004b26:	0628      	lsls	r0, r5, #24
 8004b28:	d501      	bpl.n	8004b2e <_printf_i+0xc2>
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	e002      	b.n	8004b34 <_printf_i+0xc8>
 8004b2e:	0668      	lsls	r0, r5, #25
 8004b30:	d5fb      	bpl.n	8004b2a <_printf_i+0xbe>
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	4854      	ldr	r0, [pc, #336]	; (8004c88 <_printf_i+0x21c>)
 8004b36:	296f      	cmp	r1, #111	; 0x6f
 8004b38:	bf14      	ite	ne
 8004b3a:	220a      	movne	r2, #10
 8004b3c:	2208      	moveq	r2, #8
 8004b3e:	2100      	movs	r1, #0
 8004b40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b44:	6865      	ldr	r5, [r4, #4]
 8004b46:	60a5      	str	r5, [r4, #8]
 8004b48:	2d00      	cmp	r5, #0
 8004b4a:	f2c0 8095 	blt.w	8004c78 <_printf_i+0x20c>
 8004b4e:	6821      	ldr	r1, [r4, #0]
 8004b50:	f021 0104 	bic.w	r1, r1, #4
 8004b54:	6021      	str	r1, [r4, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d13d      	bne.n	8004bd6 <_printf_i+0x16a>
 8004b5a:	2d00      	cmp	r5, #0
 8004b5c:	f040 808e 	bne.w	8004c7c <_printf_i+0x210>
 8004b60:	4665      	mov	r5, ip
 8004b62:	2a08      	cmp	r2, #8
 8004b64:	d10b      	bne.n	8004b7e <_printf_i+0x112>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	07db      	lsls	r3, r3, #31
 8004b6a:	d508      	bpl.n	8004b7e <_printf_i+0x112>
 8004b6c:	6923      	ldr	r3, [r4, #16]
 8004b6e:	6862      	ldr	r2, [r4, #4]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	bfde      	ittt	le
 8004b74:	2330      	movle	r3, #48	; 0x30
 8004b76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b7e:	ebac 0305 	sub.w	r3, ip, r5
 8004b82:	6123      	str	r3, [r4, #16]
 8004b84:	f8cd 8000 	str.w	r8, [sp]
 8004b88:	463b      	mov	r3, r7
 8004b8a:	aa03      	add	r2, sp, #12
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	4630      	mov	r0, r6
 8004b90:	f7ff fef6 	bl	8004980 <_printf_common>
 8004b94:	3001      	adds	r0, #1
 8004b96:	d14d      	bne.n	8004c34 <_printf_i+0x1c8>
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	b005      	add	sp, #20
 8004b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ba2:	4839      	ldr	r0, [pc, #228]	; (8004c88 <_printf_i+0x21c>)
 8004ba4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ba8:	6813      	ldr	r3, [r2, #0]
 8004baa:	6821      	ldr	r1, [r4, #0]
 8004bac:	1d1d      	adds	r5, r3, #4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	6015      	str	r5, [r2, #0]
 8004bb2:	060a      	lsls	r2, r1, #24
 8004bb4:	d50b      	bpl.n	8004bce <_printf_i+0x162>
 8004bb6:	07ca      	lsls	r2, r1, #31
 8004bb8:	bf44      	itt	mi
 8004bba:	f041 0120 	orrmi.w	r1, r1, #32
 8004bbe:	6021      	strmi	r1, [r4, #0]
 8004bc0:	b91b      	cbnz	r3, 8004bca <_printf_i+0x15e>
 8004bc2:	6822      	ldr	r2, [r4, #0]
 8004bc4:	f022 0220 	bic.w	r2, r2, #32
 8004bc8:	6022      	str	r2, [r4, #0]
 8004bca:	2210      	movs	r2, #16
 8004bcc:	e7b7      	b.n	8004b3e <_printf_i+0xd2>
 8004bce:	064d      	lsls	r5, r1, #25
 8004bd0:	bf48      	it	mi
 8004bd2:	b29b      	uxthmi	r3, r3
 8004bd4:	e7ef      	b.n	8004bb6 <_printf_i+0x14a>
 8004bd6:	4665      	mov	r5, ip
 8004bd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004bdc:	fb02 3311 	mls	r3, r2, r1, r3
 8004be0:	5cc3      	ldrb	r3, [r0, r3]
 8004be2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004be6:	460b      	mov	r3, r1
 8004be8:	2900      	cmp	r1, #0
 8004bea:	d1f5      	bne.n	8004bd8 <_printf_i+0x16c>
 8004bec:	e7b9      	b.n	8004b62 <_printf_i+0xf6>
 8004bee:	6813      	ldr	r3, [r2, #0]
 8004bf0:	6825      	ldr	r5, [r4, #0]
 8004bf2:	6961      	ldr	r1, [r4, #20]
 8004bf4:	1d18      	adds	r0, r3, #4
 8004bf6:	6010      	str	r0, [r2, #0]
 8004bf8:	0628      	lsls	r0, r5, #24
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	d501      	bpl.n	8004c02 <_printf_i+0x196>
 8004bfe:	6019      	str	r1, [r3, #0]
 8004c00:	e002      	b.n	8004c08 <_printf_i+0x19c>
 8004c02:	066a      	lsls	r2, r5, #25
 8004c04:	d5fb      	bpl.n	8004bfe <_printf_i+0x192>
 8004c06:	8019      	strh	r1, [r3, #0]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	6123      	str	r3, [r4, #16]
 8004c0c:	4665      	mov	r5, ip
 8004c0e:	e7b9      	b.n	8004b84 <_printf_i+0x118>
 8004c10:	6813      	ldr	r3, [r2, #0]
 8004c12:	1d19      	adds	r1, r3, #4
 8004c14:	6011      	str	r1, [r2, #0]
 8004c16:	681d      	ldr	r5, [r3, #0]
 8004c18:	6862      	ldr	r2, [r4, #4]
 8004c1a:	2100      	movs	r1, #0
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f7fb fb27 	bl	8000270 <memchr>
 8004c22:	b108      	cbz	r0, 8004c28 <_printf_i+0x1bc>
 8004c24:	1b40      	subs	r0, r0, r5
 8004c26:	6060      	str	r0, [r4, #4]
 8004c28:	6863      	ldr	r3, [r4, #4]
 8004c2a:	6123      	str	r3, [r4, #16]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c32:	e7a7      	b.n	8004b84 <_printf_i+0x118>
 8004c34:	6923      	ldr	r3, [r4, #16]
 8004c36:	462a      	mov	r2, r5
 8004c38:	4639      	mov	r1, r7
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	47c0      	blx	r8
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d0aa      	beq.n	8004b98 <_printf_i+0x12c>
 8004c42:	6823      	ldr	r3, [r4, #0]
 8004c44:	079b      	lsls	r3, r3, #30
 8004c46:	d413      	bmi.n	8004c70 <_printf_i+0x204>
 8004c48:	68e0      	ldr	r0, [r4, #12]
 8004c4a:	9b03      	ldr	r3, [sp, #12]
 8004c4c:	4298      	cmp	r0, r3
 8004c4e:	bfb8      	it	lt
 8004c50:	4618      	movlt	r0, r3
 8004c52:	e7a3      	b.n	8004b9c <_printf_i+0x130>
 8004c54:	2301      	movs	r3, #1
 8004c56:	464a      	mov	r2, r9
 8004c58:	4639      	mov	r1, r7
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	47c0      	blx	r8
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d09a      	beq.n	8004b98 <_printf_i+0x12c>
 8004c62:	3501      	adds	r5, #1
 8004c64:	68e3      	ldr	r3, [r4, #12]
 8004c66:	9a03      	ldr	r2, [sp, #12]
 8004c68:	1a9b      	subs	r3, r3, r2
 8004c6a:	42ab      	cmp	r3, r5
 8004c6c:	dcf2      	bgt.n	8004c54 <_printf_i+0x1e8>
 8004c6e:	e7eb      	b.n	8004c48 <_printf_i+0x1dc>
 8004c70:	2500      	movs	r5, #0
 8004c72:	f104 0919 	add.w	r9, r4, #25
 8004c76:	e7f5      	b.n	8004c64 <_printf_i+0x1f8>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1ac      	bne.n	8004bd6 <_printf_i+0x16a>
 8004c7c:	7803      	ldrb	r3, [r0, #0]
 8004c7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c86:	e76c      	b.n	8004b62 <_printf_i+0xf6>
 8004c88:	08004fb7 	.word	0x08004fb7
 8004c8c:	08004fc8 	.word	0x08004fc8

08004c90 <memmove>:
 8004c90:	4288      	cmp	r0, r1
 8004c92:	b510      	push	{r4, lr}
 8004c94:	eb01 0302 	add.w	r3, r1, r2
 8004c98:	d807      	bhi.n	8004caa <memmove+0x1a>
 8004c9a:	1e42      	subs	r2, r0, #1
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	d00a      	beq.n	8004cb6 <memmove+0x26>
 8004ca0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ca4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004ca8:	e7f8      	b.n	8004c9c <memmove+0xc>
 8004caa:	4283      	cmp	r3, r0
 8004cac:	d9f5      	bls.n	8004c9a <memmove+0xa>
 8004cae:	1881      	adds	r1, r0, r2
 8004cb0:	1ad2      	subs	r2, r2, r3
 8004cb2:	42d3      	cmn	r3, r2
 8004cb4:	d100      	bne.n	8004cb8 <memmove+0x28>
 8004cb6:	bd10      	pop	{r4, pc}
 8004cb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004cbc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004cc0:	e7f7      	b.n	8004cb2 <memmove+0x22>
	...

08004cc4 <_free_r>:
 8004cc4:	b538      	push	{r3, r4, r5, lr}
 8004cc6:	4605      	mov	r5, r0
 8004cc8:	2900      	cmp	r1, #0
 8004cca:	d045      	beq.n	8004d58 <_free_r+0x94>
 8004ccc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd0:	1f0c      	subs	r4, r1, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	bfb8      	it	lt
 8004cd6:	18e4      	addlt	r4, r4, r3
 8004cd8:	f000 f8d2 	bl	8004e80 <__malloc_lock>
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <_free_r+0x98>)
 8004cde:	6813      	ldr	r3, [r2, #0]
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	b933      	cbnz	r3, 8004cf2 <_free_r+0x2e>
 8004ce4:	6063      	str	r3, [r4, #4]
 8004ce6:	6014      	str	r4, [r2, #0]
 8004ce8:	4628      	mov	r0, r5
 8004cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cee:	f000 b8c8 	b.w	8004e82 <__malloc_unlock>
 8004cf2:	42a3      	cmp	r3, r4
 8004cf4:	d90c      	bls.n	8004d10 <_free_r+0x4c>
 8004cf6:	6821      	ldr	r1, [r4, #0]
 8004cf8:	1862      	adds	r2, r4, r1
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	bf04      	itt	eq
 8004cfe:	681a      	ldreq	r2, [r3, #0]
 8004d00:	685b      	ldreq	r3, [r3, #4]
 8004d02:	6063      	str	r3, [r4, #4]
 8004d04:	bf04      	itt	eq
 8004d06:	1852      	addeq	r2, r2, r1
 8004d08:	6022      	streq	r2, [r4, #0]
 8004d0a:	6004      	str	r4, [r0, #0]
 8004d0c:	e7ec      	b.n	8004ce8 <_free_r+0x24>
 8004d0e:	4613      	mov	r3, r2
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	b10a      	cbz	r2, 8004d18 <_free_r+0x54>
 8004d14:	42a2      	cmp	r2, r4
 8004d16:	d9fa      	bls.n	8004d0e <_free_r+0x4a>
 8004d18:	6819      	ldr	r1, [r3, #0]
 8004d1a:	1858      	adds	r0, r3, r1
 8004d1c:	42a0      	cmp	r0, r4
 8004d1e:	d10b      	bne.n	8004d38 <_free_r+0x74>
 8004d20:	6820      	ldr	r0, [r4, #0]
 8004d22:	4401      	add	r1, r0
 8004d24:	1858      	adds	r0, r3, r1
 8004d26:	4282      	cmp	r2, r0
 8004d28:	6019      	str	r1, [r3, #0]
 8004d2a:	d1dd      	bne.n	8004ce8 <_free_r+0x24>
 8004d2c:	6810      	ldr	r0, [r2, #0]
 8004d2e:	6852      	ldr	r2, [r2, #4]
 8004d30:	605a      	str	r2, [r3, #4]
 8004d32:	4401      	add	r1, r0
 8004d34:	6019      	str	r1, [r3, #0]
 8004d36:	e7d7      	b.n	8004ce8 <_free_r+0x24>
 8004d38:	d902      	bls.n	8004d40 <_free_r+0x7c>
 8004d3a:	230c      	movs	r3, #12
 8004d3c:	602b      	str	r3, [r5, #0]
 8004d3e:	e7d3      	b.n	8004ce8 <_free_r+0x24>
 8004d40:	6820      	ldr	r0, [r4, #0]
 8004d42:	1821      	adds	r1, r4, r0
 8004d44:	428a      	cmp	r2, r1
 8004d46:	bf04      	itt	eq
 8004d48:	6811      	ldreq	r1, [r2, #0]
 8004d4a:	6852      	ldreq	r2, [r2, #4]
 8004d4c:	6062      	str	r2, [r4, #4]
 8004d4e:	bf04      	itt	eq
 8004d50:	1809      	addeq	r1, r1, r0
 8004d52:	6021      	streq	r1, [r4, #0]
 8004d54:	605c      	str	r4, [r3, #4]
 8004d56:	e7c7      	b.n	8004ce8 <_free_r+0x24>
 8004d58:	bd38      	pop	{r3, r4, r5, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20013390 	.word	0x20013390

08004d60 <_malloc_r>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	1ccd      	adds	r5, r1, #3
 8004d64:	f025 0503 	bic.w	r5, r5, #3
 8004d68:	3508      	adds	r5, #8
 8004d6a:	2d0c      	cmp	r5, #12
 8004d6c:	bf38      	it	cc
 8004d6e:	250c      	movcc	r5, #12
 8004d70:	2d00      	cmp	r5, #0
 8004d72:	4606      	mov	r6, r0
 8004d74:	db01      	blt.n	8004d7a <_malloc_r+0x1a>
 8004d76:	42a9      	cmp	r1, r5
 8004d78:	d903      	bls.n	8004d82 <_malloc_r+0x22>
 8004d7a:	230c      	movs	r3, #12
 8004d7c:	6033      	str	r3, [r6, #0]
 8004d7e:	2000      	movs	r0, #0
 8004d80:	bd70      	pop	{r4, r5, r6, pc}
 8004d82:	f000 f87d 	bl	8004e80 <__malloc_lock>
 8004d86:	4a21      	ldr	r2, [pc, #132]	; (8004e0c <_malloc_r+0xac>)
 8004d88:	6814      	ldr	r4, [r2, #0]
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	b991      	cbnz	r1, 8004db4 <_malloc_r+0x54>
 8004d8e:	4c20      	ldr	r4, [pc, #128]	; (8004e10 <_malloc_r+0xb0>)
 8004d90:	6823      	ldr	r3, [r4, #0]
 8004d92:	b91b      	cbnz	r3, 8004d9c <_malloc_r+0x3c>
 8004d94:	4630      	mov	r0, r6
 8004d96:	f000 f863 	bl	8004e60 <_sbrk_r>
 8004d9a:	6020      	str	r0, [r4, #0]
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	4630      	mov	r0, r6
 8004da0:	f000 f85e 	bl	8004e60 <_sbrk_r>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d124      	bne.n	8004df2 <_malloc_r+0x92>
 8004da8:	230c      	movs	r3, #12
 8004daa:	6033      	str	r3, [r6, #0]
 8004dac:	4630      	mov	r0, r6
 8004dae:	f000 f868 	bl	8004e82 <__malloc_unlock>
 8004db2:	e7e4      	b.n	8004d7e <_malloc_r+0x1e>
 8004db4:	680b      	ldr	r3, [r1, #0]
 8004db6:	1b5b      	subs	r3, r3, r5
 8004db8:	d418      	bmi.n	8004dec <_malloc_r+0x8c>
 8004dba:	2b0b      	cmp	r3, #11
 8004dbc:	d90f      	bls.n	8004dde <_malloc_r+0x7e>
 8004dbe:	600b      	str	r3, [r1, #0]
 8004dc0:	50cd      	str	r5, [r1, r3]
 8004dc2:	18cc      	adds	r4, r1, r3
 8004dc4:	4630      	mov	r0, r6
 8004dc6:	f000 f85c 	bl	8004e82 <__malloc_unlock>
 8004dca:	f104 000b 	add.w	r0, r4, #11
 8004dce:	1d23      	adds	r3, r4, #4
 8004dd0:	f020 0007 	bic.w	r0, r0, #7
 8004dd4:	1ac3      	subs	r3, r0, r3
 8004dd6:	d0d3      	beq.n	8004d80 <_malloc_r+0x20>
 8004dd8:	425a      	negs	r2, r3
 8004dda:	50e2      	str	r2, [r4, r3]
 8004ddc:	e7d0      	b.n	8004d80 <_malloc_r+0x20>
 8004dde:	428c      	cmp	r4, r1
 8004de0:	684b      	ldr	r3, [r1, #4]
 8004de2:	bf16      	itet	ne
 8004de4:	6063      	strne	r3, [r4, #4]
 8004de6:	6013      	streq	r3, [r2, #0]
 8004de8:	460c      	movne	r4, r1
 8004dea:	e7eb      	b.n	8004dc4 <_malloc_r+0x64>
 8004dec:	460c      	mov	r4, r1
 8004dee:	6849      	ldr	r1, [r1, #4]
 8004df0:	e7cc      	b.n	8004d8c <_malloc_r+0x2c>
 8004df2:	1cc4      	adds	r4, r0, #3
 8004df4:	f024 0403 	bic.w	r4, r4, #3
 8004df8:	42a0      	cmp	r0, r4
 8004dfa:	d005      	beq.n	8004e08 <_malloc_r+0xa8>
 8004dfc:	1a21      	subs	r1, r4, r0
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f000 f82e 	bl	8004e60 <_sbrk_r>
 8004e04:	3001      	adds	r0, #1
 8004e06:	d0cf      	beq.n	8004da8 <_malloc_r+0x48>
 8004e08:	6025      	str	r5, [r4, #0]
 8004e0a:	e7db      	b.n	8004dc4 <_malloc_r+0x64>
 8004e0c:	20013390 	.word	0x20013390
 8004e10:	20013394 	.word	0x20013394

08004e14 <_realloc_r>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	4607      	mov	r7, r0
 8004e18:	4614      	mov	r4, r2
 8004e1a:	460e      	mov	r6, r1
 8004e1c:	b921      	cbnz	r1, 8004e28 <_realloc_r+0x14>
 8004e1e:	4611      	mov	r1, r2
 8004e20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e24:	f7ff bf9c 	b.w	8004d60 <_malloc_r>
 8004e28:	b922      	cbnz	r2, 8004e34 <_realloc_r+0x20>
 8004e2a:	f7ff ff4b 	bl	8004cc4 <_free_r>
 8004e2e:	4625      	mov	r5, r4
 8004e30:	4628      	mov	r0, r5
 8004e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e34:	f000 f826 	bl	8004e84 <_malloc_usable_size_r>
 8004e38:	42a0      	cmp	r0, r4
 8004e3a:	d20f      	bcs.n	8004e5c <_realloc_r+0x48>
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	4638      	mov	r0, r7
 8004e40:	f7ff ff8e 	bl	8004d60 <_malloc_r>
 8004e44:	4605      	mov	r5, r0
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d0f2      	beq.n	8004e30 <_realloc_r+0x1c>
 8004e4a:	4631      	mov	r1, r6
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	f7ff fbfe 	bl	800464e <memcpy>
 8004e52:	4631      	mov	r1, r6
 8004e54:	4638      	mov	r0, r7
 8004e56:	f7ff ff35 	bl	8004cc4 <_free_r>
 8004e5a:	e7e9      	b.n	8004e30 <_realloc_r+0x1c>
 8004e5c:	4635      	mov	r5, r6
 8004e5e:	e7e7      	b.n	8004e30 <_realloc_r+0x1c>

08004e60 <_sbrk_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	4c06      	ldr	r4, [pc, #24]	; (8004e7c <_sbrk_r+0x1c>)
 8004e64:	2300      	movs	r3, #0
 8004e66:	4605      	mov	r5, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	6023      	str	r3, [r4, #0]
 8004e6c:	f000 f812 	bl	8004e94 <_sbrk>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d102      	bne.n	8004e7a <_sbrk_r+0x1a>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	b103      	cbz	r3, 8004e7a <_sbrk_r+0x1a>
 8004e78:	602b      	str	r3, [r5, #0]
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	20013488 	.word	0x20013488

08004e80 <__malloc_lock>:
 8004e80:	4770      	bx	lr

08004e82 <__malloc_unlock>:
 8004e82:	4770      	bx	lr

08004e84 <_malloc_usable_size_r>:
 8004e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e88:	1f18      	subs	r0, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	bfbc      	itt	lt
 8004e8e:	580b      	ldrlt	r3, [r1, r0]
 8004e90:	18c0      	addlt	r0, r0, r3
 8004e92:	4770      	bx	lr

08004e94 <_sbrk>:
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <_sbrk+0x14>)
 8004e96:	6819      	ldr	r1, [r3, #0]
 8004e98:	4602      	mov	r2, r0
 8004e9a:	b909      	cbnz	r1, 8004ea0 <_sbrk+0xc>
 8004e9c:	4903      	ldr	r1, [pc, #12]	; (8004eac <_sbrk+0x18>)
 8004e9e:	6019      	str	r1, [r3, #0]
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	4402      	add	r2, r0
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	4770      	bx	lr
 8004ea8:	20013398 	.word	0x20013398
 8004eac:	20013490 	.word	0x20013490

08004eb0 <_init>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	bf00      	nop
 8004eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb6:	bc08      	pop	{r3}
 8004eb8:	469e      	mov	lr, r3
 8004eba:	4770      	bx	lr

08004ebc <_fini>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	bf00      	nop
 8004ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ec2:	bc08      	pop	{r3}
 8004ec4:	469e      	mov	lr, r3
 8004ec6:	4770      	bx	lr
