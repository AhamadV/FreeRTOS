
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006200  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08006390  08006390  00016390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064ec  080064ec  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080064ec  080064ec  000164ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064f4  080064f4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064f8  080064f8  000164f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080064fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001344c  20000078  08006574  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200134c4  08006574  000234c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018743  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002fad  00000000  00000000  000387eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012d0  00000000  00000000  0003b798  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  0003ca68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023cb3  00000000  00000000  0003dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ff47  00000000  00000000  00061873  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d63a1  00000000  00000000  000717ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147b5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005180  00000000  00000000  00147bd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006378 	.word	0x08006378

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006378 	.word	0x08006378

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20013418 	.word	0x20013418
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08c      	sub	sp, #48	; 0x30
 8000614:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fce7 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f985 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f9ed 	bl	80009fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000622:	4b71      	ldr	r3, [pc, #452]	; (80007e8 <main+0x1d8>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a70      	ldr	r2, [pc, #448]	; (80007e8 <main+0x1d8>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]
  //SEGGER_UART_init(500000);

  //SEGGER_SYSVIEW_Conf();

 // SEGGER_SYSVIEW_Start();
  	q_data = xQueueCreate (10, sizeof(char));
 800062e:	2200      	movs	r2, #0
 8000630:	2101      	movs	r1, #1
 8000632:	200a      	movs	r0, #10
 8000634:	f001 ffd8 	bl	80025e8 <xQueueGenericCreate>
 8000638:	4602      	mov	r2, r0
 800063a:	4b6c      	ldr	r3, [pc, #432]	; (80007ec <main+0x1dc>)
 800063c:	601a      	str	r2, [r3, #0]

	configASSERT(q_data != NULL);
 800063e:	4b6b      	ldr	r3, [pc, #428]	; (80007ec <main+0x1dc>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d109      	bne.n	800065a <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800064a:	f383 8811 	msr	BASEPRI, r3
 800064e:	f3bf 8f6f 	isb	sy
 8000652:	f3bf 8f4f 	dsb	sy
 8000656:	623b      	str	r3, [r7, #32]
 8000658:	e7fe      	b.n	8000658 <main+0x48>

	q_print = xQueueCreate (10, sizeof(size_t));
 800065a:	2200      	movs	r2, #0
 800065c:	2104      	movs	r1, #4
 800065e:	200a      	movs	r0, #10
 8000660:	f001 ffc2 	bl	80025e8 <xQueueGenericCreate>
 8000664:	4602      	mov	r2, r0
 8000666:	4b62      	ldr	r3, [pc, #392]	; (80007f0 <main+0x1e0>)
 8000668:	601a      	str	r2, [r3, #0]

	configASSERT(q_print != NULL);
 800066a:	4b61      	ldr	r3, [pc, #388]	; (80007f0 <main+0x1e0>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d109      	bne.n	8000686 <main+0x76>
 8000672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000676:	f383 8811 	msr	BASEPRI, r3
 800067a:	f3bf 8f6f 	isb	sy
 800067e:	f3bf 8f4f 	dsb	sy
 8000682:	61fb      	str	r3, [r7, #28]
 8000684:	e7fe      	b.n	8000684 <main+0x74>

	//for(int i = 0 ; i < 4 ; i++)
	//		handle_led_timer[i] = xTimerCreate("led_timer",pdMS_TO_TICKS(500),pdTRUE, (void*)(i+1),led_effect_callback);

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000686:	4b5b      	ldr	r3, [pc, #364]	; (80007f4 <main+0x1e4>)
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2302      	movs	r3, #2
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	4b5a      	ldr	r3, [pc, #360]	; (80007f8 <main+0x1e8>)
 8000690:	22c8      	movs	r2, #200	; 0xc8
 8000692:	495a      	ldr	r1, [pc, #360]	; (80007fc <main+0x1ec>)
 8000694:	485a      	ldr	r0, [pc, #360]	; (8000800 <main+0x1f0>)
 8000696:	f002 f82c 	bl	80026f2 <xTaskCreate>
 800069a:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status == pdPASS);
 800069c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d009      	beq.n	80006b6 <main+0xa6>
 80006a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a6:	f383 8811 	msr	BASEPRI, r3
 80006aa:	f3bf 8f6f 	isb	sy
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	61bb      	str	r3, [r7, #24]
 80006b4:	e7fe      	b.n	80006b4 <main+0xa4>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80006b6:	4b53      	ldr	r3, [pc, #332]	; (8000804 <main+0x1f4>)
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	2302      	movs	r3, #2
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	4b52      	ldr	r3, [pc, #328]	; (8000808 <main+0x1f8>)
 80006c0:	22c8      	movs	r2, #200	; 0xc8
 80006c2:	4952      	ldr	r1, [pc, #328]	; (800080c <main+0x1fc>)
 80006c4:	4852      	ldr	r0, [pc, #328]	; (8000810 <main+0x200>)
 80006c6:	f002 f814 	bl	80026f2 <xTaskCreate>
 80006ca:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status == pdPASS);
 80006cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d009      	beq.n	80006e6 <main+0xd6>
 80006d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d6:	f383 8811 	msr	BASEPRI, r3
 80006da:	f3bf 8f6f 	isb	sy
 80006de:	f3bf 8f4f 	dsb	sy
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e7fe      	b.n	80006e4 <main+0xd4>

  status = xTaskCreate(task3_handler, "Task-3", 500, "Hello world from Task-3", 3, &task3_handle);
 80006e6:	4b4b      	ldr	r3, [pc, #300]	; (8000814 <main+0x204>)
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	2303      	movs	r3, #3
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	4b4a      	ldr	r3, [pc, #296]	; (8000818 <main+0x208>)
 80006f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006f4:	4949      	ldr	r1, [pc, #292]	; (800081c <main+0x20c>)
 80006f6:	484a      	ldr	r0, [pc, #296]	; (8000820 <main+0x210>)
 80006f8:	f001 fffb 	bl	80026f2 <xTaskCreate>
 80006fc:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status == pdPASS);
 80006fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000700:	2b01      	cmp	r3, #1
 8000702:	d009      	beq.n	8000718 <main+0x108>
 8000704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000708:	f383 8811 	msr	BASEPRI, r3
 800070c:	f3bf 8f6f 	isb	sy
 8000710:	f3bf 8f4f 	dsb	sy
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	e7fe      	b.n	8000716 <main+0x106>


  status = xTaskCreate(task_500mSec_handler, "Task-3", 500, "Hello world from Task-3", 3, &task_500mSec);
 8000718:	4b42      	ldr	r3, [pc, #264]	; (8000824 <main+0x214>)
 800071a:	9301      	str	r3, [sp, #4]
 800071c:	2303      	movs	r3, #3
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <main+0x208>)
 8000722:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000726:	493d      	ldr	r1, [pc, #244]	; (800081c <main+0x20c>)
 8000728:	483f      	ldr	r0, [pc, #252]	; (8000828 <main+0x218>)
 800072a:	f001 ffe2 	bl	80026f2 <xTaskCreate>
 800072e:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 8000730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000732:	2b01      	cmp	r3, #1
 8000734:	d009      	beq.n	800074a <main+0x13a>
 8000736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800073a:	f383 8811 	msr	BASEPRI, r3
 800073e:	f3bf 8f6f 	isb	sy
 8000742:	f3bf 8f4f 	dsb	sy
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	e7fe      	b.n	8000748 <main+0x138>
  status = xTaskCreate(task_750mSec_handler, "Task-3", 500, "Hello world from Task-3", 3, &task_750mSec);
 800074a:	4b38      	ldr	r3, [pc, #224]	; (800082c <main+0x21c>)
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	2303      	movs	r3, #3
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	4b31      	ldr	r3, [pc, #196]	; (8000818 <main+0x208>)
 8000754:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000758:	4930      	ldr	r1, [pc, #192]	; (800081c <main+0x20c>)
 800075a:	4835      	ldr	r0, [pc, #212]	; (8000830 <main+0x220>)
 800075c:	f001 ffc9 	bl	80026f2 <xTaskCreate>
 8000760:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 8000762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000764:	2b01      	cmp	r3, #1
 8000766:	d009      	beq.n	800077c <main+0x16c>
 8000768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800076c:	f383 8811 	msr	BASEPRI, r3
 8000770:	f3bf 8f6f 	isb	sy
 8000774:	f3bf 8f4f 	dsb	sy
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	e7fe      	b.n	800077a <main+0x16a>


  status = xTaskCreate(button_handler, "Task-4", 500, "button task", 3, &button_task_handle);
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <main+0x224>)
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	2303      	movs	r3, #3
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <main+0x228>)
 8000786:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800078a:	492c      	ldr	r1, [pc, #176]	; (800083c <main+0x22c>)
 800078c:	482c      	ldr	r0, [pc, #176]	; (8000840 <main+0x230>)
 800078e:	f001 ffb0 	bl	80026f2 <xTaskCreate>
 8000792:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status == pdPASS);
 8000794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000796:	2b01      	cmp	r3, #1
 8000798:	d009      	beq.n	80007ae <main+0x19e>
 800079a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800079e:	f383 8811 	msr	BASEPRI, r3
 80007a2:	f3bf 8f6f 	isb	sy
 80007a6:	f3bf 8f4f 	dsb	sy
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	e7fe      	b.n	80007ac <main+0x19c>

  status = xTaskCreate(led_task, "Task-5", 500, "led task", 3, &led_task_handle);
 80007ae:	4b25      	ldr	r3, [pc, #148]	; (8000844 <main+0x234>)
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	2303      	movs	r3, #3
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	4b24      	ldr	r3, [pc, #144]	; (8000848 <main+0x238>)
 80007b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007bc:	4923      	ldr	r1, [pc, #140]	; (800084c <main+0x23c>)
 80007be:	4824      	ldr	r0, [pc, #144]	; (8000850 <main+0x240>)
 80007c0:	f001 ff97 	bl	80026f2 <xTaskCreate>
 80007c4:	6278      	str	r0, [r7, #36]	; 0x24

   configASSERT(status == pdPASS);
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d009      	beq.n	80007e0 <main+0x1d0>
 80007cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007d0:	f383 8811 	msr	BASEPRI, r3
 80007d4:	f3bf 8f6f 	isb	sy
 80007d8:	f3bf 8f4f 	dsb	sy
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	e7fe      	b.n	80007de <main+0x1ce>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 80007e0:	f002 fb22 	bl	8002e28 <vTaskStartScheduler>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <main+0x1d4>
 80007e6:	bf00      	nop
 80007e8:	e0001000 	.word	0xe0001000
 80007ec:	200133b4 	.word	0x200133b4
 80007f0:	200133c4 	.word	0x200133c4
 80007f4:	200133b8 	.word	0x200133b8
 80007f8:	08006390 	.word	0x08006390
 80007fc:	080063a8 	.word	0x080063a8
 8000800:	08000cbd 	.word	0x08000cbd
 8000804:	200133bc 	.word	0x200133bc
 8000808:	080063b0 	.word	0x080063b0
 800080c:	080063c8 	.word	0x080063c8
 8000810:	08000cf9 	.word	0x08000cf9
 8000814:	200133d0 	.word	0x200133d0
 8000818:	080063d0 	.word	0x080063d0
 800081c:	080063e8 	.word	0x080063e8
 8000820:	08000d41 	.word	0x08000d41
 8000824:	200133c0 	.word	0x200133c0
 8000828:	080008e9 	.word	0x080008e9
 800082c:	200133b0 	.word	0x200133b0
 8000830:	08000909 	.word	0x08000909
 8000834:	200133cc 	.word	0x200133cc
 8000838:	080063f0 	.word	0x080063f0
 800083c:	080063fc 	.word	0x080063fc
 8000840:	08000865 	.word	0x08000865
 8000844:	200133c8 	.word	0x200133c8
 8000848:	08006404 	.word	0x08006404
 800084c:	08006410 	.word	0x08006410
 8000850:	080008b5 	.word	0x080008b5

08000854 <vApplicationIdleHook>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void vApplicationIdleHook( void )
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI );
 8000858:	2101      	movs	r1, #1
 800085a:	2000      	movs	r0, #0
 800085c:	f000 fece 	bl	80015fc <HAL_PWR_EnterSLEEPMode>
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <button_handler>:

}


static void button_handler(void* parameters)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af02      	add	r7, sp, #8
 800086a:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	73fb      	strb	r3, [r7, #15]

	while(1){

		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000874:	2101      	movs	r1, #1
 8000876:	480d      	ldr	r0, [pc, #52]	; (80008ac <button_handler+0x48>)
 8000878:	f000 fe74 	bl	8001564 <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000880:	7bbb      	ldrb	r3, [r7, #14]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00b      	beq.n	800089e <button_handler+0x3a>
		{
			if(! prev_read)
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d108      	bne.n	800089e <button_handler+0x3a>
				xTaskNotify(led_task_handle,0,eNoAction);
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <button_handler+0x4c>)
 800088e:	6818      	ldr	r0, [r3, #0]
 8000890:	2300      	movs	r3, #0
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2300      	movs	r3, #0
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	f002 feb1 	bl	8003600 <xTaskGenericNotify>
		}
		prev_read = btn_read;
 800089e:	7bbb      	ldrb	r3, [r7, #14]
 80008a0:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 80008a2:	200a      	movs	r0, #10
 80008a4:	f002 f9ae 	bl	8002c04 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80008a8:	e7e4      	b.n	8000874 <button_handler+0x10>
 80008aa:	bf00      	nop
 80008ac:	40020000 	.word	0x40020000
 80008b0:	200133c8 	.word	0x200133c8

080008b4 <led_task>:

}


static void led_task(void* parameters)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
		while(1)
		{
			status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80008bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2300      	movs	r3, #0
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2000      	movs	r0, #0
 80008ca:	f002 fe11 	bl	80034f0 <xTaskGenericNotifyWait>
 80008ce:	60f8      	str	r0, [r7, #12]
			if(status == pdTRUE){
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d1f2      	bne.n	80008bc <led_task+0x8>
				vTaskSuspendAll();
 80008d6:	f002 fb01 	bl	8002edc <vTaskSuspendAll>
				xTaskResumeAll();
 80008da:	f002 fb0d 	bl	8002ef8 <xTaskResumeAll>
				//HAL_GPIO_WritePin(GPIOD, GPIO_,GPIO_PIN_SET);
				vTaskDelete(NULL);
 80008de:	2000      	movs	r0, #0
 80008e0:	f002 f86a 	bl	80029b8 <vTaskDelete>
			status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80008e4:	e7ea      	b.n	80008bc <led_task+0x8>
	...

080008e8 <task_500mSec_handler>:

		}
}

static void task_500mSec_handler(void* parameters)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
		while(1)
		{
			HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80008f0:	2101      	movs	r1, #1
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <task_500mSec_handler+0x1c>)
 80008f4:	f000 fe36 	bl	8001564 <HAL_GPIO_ReadPin>
			vTaskDelay(pdMS_TO_TICKS(500));
 80008f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008fc:	f002 f982 	bl	8002c04 <vTaskDelay>
			HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000900:	e7f6      	b.n	80008f0 <task_500mSec_handler+0x8>
 8000902:	bf00      	nop
 8000904:	40020000 	.word	0x40020000

08000908 <task_750mSec_handler>:
		}
}

static void task_750mSec_handler(void* parameters)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
		while(1)
		{
			HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000910:	2101      	movs	r1, #1
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <task_750mSec_handler+0x1c>)
 8000914:	f000 fe26 	bl	8001564 <HAL_GPIO_ReadPin>
			vTaskDelay(pdMS_TO_TICKS(750));
 8000918:	f240 20ee 	movw	r0, #750	; 0x2ee
 800091c:	f002 f972 	bl	8002c04 <vTaskDelay>
			HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000920:	e7f6      	b.n	8000910 <task_750mSec_handler+0x8>
 8000922:	bf00      	nop
 8000924:	40020000 	.word	0x40020000

08000928 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2230      	movs	r2, #48	; 0x30
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f005 f8f8 	bl	8005b2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <SystemClock_Config+0xcc>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a27      	ldr	r2, [pc, #156]	; (80009f4 <SystemClock_Config+0xcc>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <SystemClock_Config+0xcc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <SystemClock_Config+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <SystemClock_Config+0xd0>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000988:	2301      	movs	r3, #1
 800098a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098c:	2310      	movs	r3, #16
 800098e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000990:	2302      	movs	r3, #2
 8000992:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000994:	2300      	movs	r3, #0
 8000996:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000998:	2308      	movs	r3, #8
 800099a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800099c:	23a8      	movs	r3, #168	; 0xa8
 800099e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a0:	2302      	movs	r3, #2
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009a4:	2307      	movs	r3, #7
 80009a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0320 	add.w	r3, r7, #32
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fe41 	bl	8001634 <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b8:	f000 fa28 	bl	8000e0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	230f      	movs	r3, #15
 80009be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2105      	movs	r1, #5
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f89a 	bl	8001b14 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009e6:	f000 fa11 	bl	8000e0c <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3750      	adds	r7, #80	; 0x50
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40007000 	.word	0x40007000

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	4ba1      	ldr	r3, [pc, #644]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4aa0      	ldr	r2, [pc, #640]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a1c:	f043 0310 	orr.w	r3, r3, #16
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b9e      	ldr	r3, [pc, #632]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0310 	and.w	r3, r3, #16
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	4b9a      	ldr	r3, [pc, #616]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a99      	ldr	r2, [pc, #612]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b97      	ldr	r3, [pc, #604]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b93      	ldr	r3, [pc, #588]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a92      	ldr	r2, [pc, #584]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b90      	ldr	r3, [pc, #576]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b8c      	ldr	r3, [pc, #560]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a8b      	ldr	r2, [pc, #556]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b89      	ldr	r3, [pc, #548]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	4b85      	ldr	r3, [pc, #532]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a84      	ldr	r2, [pc, #528]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b82      	ldr	r3, [pc, #520]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b7e      	ldr	r3, [pc, #504]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a7d      	ldr	r2, [pc, #500]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b7b      	ldr	r3, [pc, #492]	; (8000c9c <MX_GPIO_Init+0x2a0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2108      	movs	r1, #8
 8000abe:	4878      	ldr	r0, [pc, #480]	; (8000ca0 <MX_GPIO_Init+0x2a4>)
 8000ac0:	f000 fd68 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4876      	ldr	r0, [pc, #472]	; (8000ca4 <MX_GPIO_Init+0x2a8>)
 8000aca:	f000 fd63 	bl	8001594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ad4:	4874      	ldr	r0, [pc, #464]	; (8000ca8 <MX_GPIO_Init+0x2ac>)
 8000ad6:	f000 fd5d 	bl	8001594 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000ada:	2308      	movs	r3, #8
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 031c 	add.w	r3, r7, #28
 8000aee:	4619      	mov	r1, r3
 8000af0:	486b      	ldr	r0, [pc, #428]	; (8000ca0 <MX_GPIO_Init+0x2a4>)
 8000af2:	f000 fb9d 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4865      	ldr	r0, [pc, #404]	; (8000ca4 <MX_GPIO_Init+0x2a8>)
 8000b0e:	f000 fb8f 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b12:	2308      	movs	r3, #8
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b22:	2305      	movs	r3, #5
 8000b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 031c 	add.w	r3, r7, #28
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	485d      	ldr	r0, [pc, #372]	; (8000ca4 <MX_GPIO_Init+0x2a8>)
 8000b2e:	f000 fb7f 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b32:	2301      	movs	r3, #1
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b36:	4b5d      	ldr	r3, [pc, #372]	; (8000cac <MX_GPIO_Init+0x2b0>)
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	485a      	ldr	r0, [pc, #360]	; (8000cb0 <MX_GPIO_Init+0x2b4>)
 8000b46:	f000 fb73 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b4a:	2310      	movs	r3, #16
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b5a:	2306      	movs	r3, #6
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 031c 	add.w	r3, r7, #28
 8000b62:	4619      	mov	r1, r3
 8000b64:	4852      	ldr	r0, [pc, #328]	; (8000cb0 <MX_GPIO_Init+0x2b4>)
 8000b66:	f000 fb63 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b6a:	23e0      	movs	r3, #224	; 0xe0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	484a      	ldr	r0, [pc, #296]	; (8000cb0 <MX_GPIO_Init+0x2b4>)
 8000b86:	f000 fb53 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4845      	ldr	r0, [pc, #276]	; (8000cb4 <MX_GPIO_Init+0x2b8>)
 8000b9e:	f000 fb47 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bb4:	2305      	movs	r3, #5
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	483d      	ldr	r0, [pc, #244]	; (8000cb4 <MX_GPIO_Init+0x2b8>)
 8000bc0:	f000 fb36 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000bc4:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000bc8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4832      	ldr	r0, [pc, #200]	; (8000ca8 <MX_GPIO_Init+0x2ac>)
 8000bde:	f000 fb27 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000be2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <MX_GPIO_Init+0x2a8>)
 8000c00:	f000 fb16 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4825      	ldr	r0, [pc, #148]	; (8000cb0 <MX_GPIO_Init+0x2b4>)
 8000c1a:	f000 fb09 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000c1e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c30:	230a      	movs	r3, #10
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	481d      	ldr	r0, [pc, #116]	; (8000cb0 <MX_GPIO_Init+0x2b4>)
 8000c3c:	f000 faf8 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c40:	2320      	movs	r3, #32
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c44:	2300      	movs	r3, #0
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4815      	ldr	r0, [pc, #84]	; (8000ca8 <MX_GPIO_Init+0x2ac>)
 8000c54:	f000 faec 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c58:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5e:	2312      	movs	r3, #18
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <MX_GPIO_Init+0x2b8>)
 8000c76:	f000 fadb 	bl	8001230 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_GPIO_Init+0x2bc>)
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_GPIO_Init+0x2a4>)
 8000c8e:	f000 facf 	bl	8001230 <HAL_GPIO_Init>

}
 8000c92:	bf00      	nop
 8000c94:	3730      	adds	r7, #48	; 0x30
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40020800 	.word	0x40020800
 8000ca8:	40020c00 	.word	0x40020c00
 8000cac:	10110000 	.word	0x10110000
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	10120000 	.word	0x10120000

08000cbc <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

	//char msg[100];
	const TickType_t xTicksToDelay =200;
 8000cc4:	23c8      	movs	r3, #200	; 0xc8
 8000cc6:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//snprintf(msg,100,"%s\n", (char*)parameters);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_10);
 8000cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ccc:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <task1_handler+0x34>)
 8000cce:	f000 fc7a 	bl	80015c6 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(xTicksToDelay));
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cd8:	fb02 f303 	mul.w	r3, r2, r3
 8000cdc:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <task1_handler+0x38>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	099b      	lsrs	r3, r3, #6
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 ff8d 	bl	8002c04 <vTaskDelay>
		//SEGGER_SYSVIEW_PrintfTarget(msg);
		//taskYIELD();
		switch_priority();
 8000cea:	f000 f841 	bl	8000d70 <switch_priority>
	{
 8000cee:	e7eb      	b.n	8000cc8 <task1_handler+0xc>
 8000cf0:	40020c00 	.word	0x40020c00
 8000cf4:	10624dd3 	.word	0x10624dd3

08000cf8 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	/*using vTaskDelayuntil for periodicity time */
	TickType_t xLastWaketime;
	const TickType_t xFrequency = 100; //100 mSec
 8000d00:	2364      	movs	r3, #100	; 0x64
 8000d02:	60fb      	str	r3, [r7, #12]
	//char msg[100];
	xLastWaketime = xTaskGetTickCount();
 8000d04:	f002 f998 	bl	8003038 <xTaskGetTickCount>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		//snprintf(msg,100,"%s\n", (char*)parameters);
		//SEGGER_SYSVIEW_PrintfTarget(msg);
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	480a      	ldr	r0, [pc, #40]	; (8000d38 <task2_handler+0x40>)
 8000d10:	f000 fc59 	bl	80015c6 <HAL_GPIO_TogglePin>
		vTaskDelayUntil(&xLastWaketime,pdMS_TO_TICKS(xFrequency) );
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d1a:	fb02 f303 	mul.w	r3, r2, r3
 8000d1e:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <task2_handler+0x44>)
 8000d20:	fba2 2303 	umull	r2, r3, r2, r3
 8000d24:	099a      	lsrs	r2, r3, #6
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 feeb 	bl	8002b08 <xTaskDelayUntil>
		switch_priority();
 8000d32:	f000 f81d 	bl	8000d70 <switch_priority>
	{
 8000d36:	e7e9      	b.n	8000d0c <task2_handler+0x14>
 8000d38:	40020c00 	.word	0x40020c00
 8000d3c:	10624dd3 	.word	0x10624dd3

08000d40 <task3_handler>:
	}

}

static void task3_handler(void *parameters)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b09c      	sub	sp, #112	; 0x70
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000d48:	f107 000c 	add.w	r0, r7, #12
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <task3_handler+0x28>)
 8000d50:	2164      	movs	r1, #100	; 0x64
 8000d52:	f004 fef3 	bl	8005b3c <sniprintf>
		taskYIELD();
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <task3_handler+0x2c>)
 8000d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	f3bf 8f4f 	dsb	sy
 8000d62:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000d66:	e7ef      	b.n	8000d48 <task3_handler+0x8>
 8000d68:	08006418 	.word	0x08006418
 8000d6c:	e000ed04 	.word	0xe000ed04

08000d70 <switch_priority>:

}


void switch_priority(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
	UBaseType_t p1,p2;
	xTaskHandle t1,t2,curr;

	BaseType_t switch_priority = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 8000d7a:	f002 ff4b 	bl	8003c14 <vPortEnterCritical>
	if(status_button){
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <switch_priority+0x74>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d004      	beq.n	8000d90 <switch_priority+0x20>
		status_button = 0;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <switch_priority+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
	}
	portEXIT_CRITICAL();
 8000d90:	f002 ff6e 	bl	8003c70 <vPortExitCritical>

	if(switch_priority){
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d01f      	beq.n	8000dda <switch_priority+0x6a>
		//t1 = xTaskGetHandle("Task-1");
		//t2 = xTaskGetHandle("Task-2");

		p1 = uxTaskPriorityGet(t1);
 8000d9a:	6938      	ldr	r0, [r7, #16]
 8000d9c:	f001 ff6a 	bl	8002c74 <uxTaskPriorityGet>
 8000da0:	60f8      	str	r0, [r7, #12]
		p2 = uxTaskPriorityGet(t2);
 8000da2:	68b8      	ldr	r0, [r7, #8]
 8000da4:	f001 ff66 	bl	8002c74 <uxTaskPriorityGet>
 8000da8:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8000daa:	f002 fb91 	bl	80034d0 <xTaskGetCurrentTaskHandle>
 8000dae:	6038      	str	r0, [r7, #0]

		if(curr == t1){
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d108      	bne.n	8000dca <switch_priority+0x5a>
			vTaskPrioritySet(t1,p2);
 8000db8:	6879      	ldr	r1, [r7, #4]
 8000dba:	6938      	ldr	r0, [r7, #16]
 8000dbc:	f001 ff74 	bl	8002ca8 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
 8000dc0:	68f9      	ldr	r1, [r7, #12]
 8000dc2:	68b8      	ldr	r0, [r7, #8]
 8000dc4:	f001 ff70 	bl	8002ca8 <vTaskPrioritySet>
			vTaskPrioritySet(t2,p1);
			vTaskPrioritySet(t1,p2);
		}
	}

}
 8000dc8:	e007      	b.n	8000dda <switch_priority+0x6a>
			vTaskPrioritySet(t2,p1);
 8000dca:	68f9      	ldr	r1, [r7, #12]
 8000dcc:	68b8      	ldr	r0, [r7, #8]
 8000dce:	f001 ff6b 	bl	8002ca8 <vTaskPrioritySet>
			vTaskPrioritySet(t1,p2);
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	6938      	ldr	r0, [r7, #16]
 8000dd6:	f001 ff67 	bl	8002ca8 <vTaskPrioritySet>
}
 8000dda:	bf00      	nop
 8000ddc:	3718      	adds	r7, #24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000094 	.word	0x20000094

08000de8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d101      	bne.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dfa:	f000 f917 	bl	800102c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40001000 	.word	0x40001000

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a0f      	ldr	r2, [pc, #60]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_MspInit+0x4c>)
 8000e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000e5a:	f002 fe61 	bl	8003b20 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800

08000e6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	; 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	2036      	movs	r0, #54	; 0x36
 8000e82:	f000 f9ab 	bl	80011dc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000e86:	2036      	movs	r0, #54	; 0x36
 8000e88:	f000 f9c4 	bl	8001214 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <HAL_InitTick+0xa4>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	4a1e      	ldr	r2, [pc, #120]	; (8000f10 <HAL_InitTick+0xa4>)
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_InitTick+0xa4>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	f003 0310 	and.w	r3, r3, #16
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ea8:	f107 0210 	add.w	r2, r7, #16
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 f80c 	bl	8001ed0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000eb8:	f000 fff6 	bl	8001ea8 <HAL_RCC_GetPCLK1Freq>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec4:	4a13      	ldr	r2, [pc, #76]	; (8000f14 <HAL_InitTick+0xa8>)
 8000ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eca:	0c9b      	lsrs	r3, r3, #18
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_InitTick+0xac>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <HAL_InitTick+0xb0>)
 8000ed4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <HAL_InitTick+0xac>)
 8000ed8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000edc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_InitTick+0xac>)
 8000ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_InitTick+0xac>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <HAL_InitTick+0xac>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <HAL_InitTick+0xac>)
 8000ef2:	f001 f81f 	bl	8001f34 <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d104      	bne.n	8000f06 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000efc:	4806      	ldr	r0, [pc, #24]	; (8000f18 <HAL_InitTick+0xac>)
 8000efe:	f001 f84e 	bl	8001f9e <HAL_TIM_Base_Start_IT>
 8000f02:	4603      	mov	r3, r0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3730      	adds	r7, #48	; 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40023800 	.word	0x40023800
 8000f14:	431bde83 	.word	0x431bde83
 8000f18:	200133d4 	.word	0x200133d4
 8000f1c:	40001000 	.word	0x40001000

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <TIM6_DAC_IRQHandler+0x10>)
 8000f5a:	f001 f844 	bl	8001fe6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	200133d4 	.word	0x200133d4

08000f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <SystemInit+0x28>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <SystemInit+0x28>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SystemInit+0x28>)
 8000f7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f82:	609a      	str	r2, [r3, #8]
#endif
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f9a:	e003      	b.n	8000fa4 <LoopCopyDataInit>

08000f9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fa0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fa2:	3104      	adds	r1, #4

08000fa4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fa8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000faa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fac:	d3f6      	bcc.n	8000f9c <CopyDataInit>
  ldr  r2, =_sbss
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fb0:	e002      	b.n	8000fb8 <LoopFillZerobss>

08000fb2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fb4:	f842 3b04 	str.w	r3, [r2], #4

08000fb8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fbc:	d3f9      	bcc.n	8000fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fbe:	f7ff ffd3 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f004 fd75 	bl	8005ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fb23 	bl	8000610 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fcc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fd0:	080064fc 	.word	0x080064fc
  ldr  r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fd8:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000fdc:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000fe0:	200134c4 	.word	0x200134c4

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <HAL_Init+0x40>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_Init+0x40>)
 8000ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_Init+0x40>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f8d8 	bl	80011c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff ff28 	bl	8000e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fefe 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023c00 	.word	0x40023c00

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	20013414 	.word	0x20013414

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20013414 	.word	0x20013414

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	; (8001108 <__NVIC_EnableIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	; (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	; (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	; 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	; 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ff4c 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ee:	f7ff ff61 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 80011f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	68b9      	ldr	r1, [r7, #8]
 80011f8:	6978      	ldr	r0, [r7, #20]
 80011fa:	f7ff ffb1 	bl	8001160 <NVIC_EncodePriority>
 80011fe:	4602      	mov	r2, r0
 8001200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff80 	bl	800110c <__NVIC_SetPriority>
}
 800120c:	bf00      	nop
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff54 	bl	80010d0 <__NVIC_EnableIRQ>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	e16b      	b.n	8001524 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800124c:	2201      	movs	r2, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	429a      	cmp	r2, r3
 8001266:	f040 815a 	bne.w	800151e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d00b      	beq.n	800128a <HAL_GPIO_Init+0x5a>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d007      	beq.n	800128a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800127e:	2b11      	cmp	r3, #17
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b12      	cmp	r3, #18
 8001288:	d130      	bne.n	80012ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	091b      	lsrs	r3, r3, #4
 80012d6:	f003 0201 	and.w	r2, r3, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0xfc>
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b12      	cmp	r3, #18
 800132a:	d123      	bne.n	8001374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	08da      	lsrs	r2, r3, #3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3208      	adds	r2, #8
 8001334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	69b9      	ldr	r1, [r7, #24]
 8001370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	2203      	movs	r2, #3
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0203 	and.w	r2, r3, #3
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80b4 	beq.w	800151e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b5f      	ldr	r3, [pc, #380]	; (8001538 <HAL_GPIO_Init+0x308>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a5e      	ldr	r2, [pc, #376]	; (8001538 <HAL_GPIO_Init+0x308>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b5c      	ldr	r3, [pc, #368]	; (8001538 <HAL_GPIO_Init+0x308>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013d2:	4a5a      	ldr	r2, [pc, #360]	; (800153c <HAL_GPIO_Init+0x30c>)
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	089b      	lsrs	r3, r3, #2
 80013d8:	3302      	adds	r3, #2
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	220f      	movs	r2, #15
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a51      	ldr	r2, [pc, #324]	; (8001540 <HAL_GPIO_Init+0x310>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d02b      	beq.n	8001456 <HAL_GPIO_Init+0x226>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a50      	ldr	r2, [pc, #320]	; (8001544 <HAL_GPIO_Init+0x314>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d025      	beq.n	8001452 <HAL_GPIO_Init+0x222>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a4f      	ldr	r2, [pc, #316]	; (8001548 <HAL_GPIO_Init+0x318>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d01f      	beq.n	800144e <HAL_GPIO_Init+0x21e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4e      	ldr	r2, [pc, #312]	; (800154c <HAL_GPIO_Init+0x31c>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x21a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4d      	ldr	r2, [pc, #308]	; (8001550 <HAL_GPIO_Init+0x320>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x216>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4c      	ldr	r2, [pc, #304]	; (8001554 <HAL_GPIO_Init+0x324>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x212>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4b      	ldr	r2, [pc, #300]	; (8001558 <HAL_GPIO_Init+0x328>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x20e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4a      	ldr	r2, [pc, #296]	; (800155c <HAL_GPIO_Init+0x32c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x20a>
 8001436:	2307      	movs	r3, #7
 8001438:	e00e      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800143a:	2308      	movs	r3, #8
 800143c:	e00c      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800143e:	2306      	movs	r3, #6
 8001440:	e00a      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001442:	2305      	movs	r3, #5
 8001444:	e008      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001446:	2304      	movs	r3, #4
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800144a:	2303      	movs	r3, #3
 800144c:	e004      	b.n	8001458 <HAL_GPIO_Init+0x228>
 800144e:	2302      	movs	r3, #2
 8001450:	e002      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x228>
 8001456:	2300      	movs	r3, #0
 8001458:	69fa      	ldr	r2, [r7, #28]
 800145a:	f002 0203 	and.w	r2, r2, #3
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	4093      	lsls	r3, r2
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001468:	4934      	ldr	r1, [pc, #208]	; (800153c <HAL_GPIO_Init+0x30c>)
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_GPIO_Init+0x330>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800149a:	4a31      	ldr	r2, [pc, #196]	; (8001560 <HAL_GPIO_Init+0x330>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_GPIO_Init+0x330>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014c4:	4a26      	ldr	r2, [pc, #152]	; (8001560 <HAL_GPIO_Init+0x330>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ca:	4b25      	ldr	r3, [pc, #148]	; (8001560 <HAL_GPIO_Init+0x330>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ee:	4a1c      	ldr	r2, [pc, #112]	; (8001560 <HAL_GPIO_Init+0x330>)
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <HAL_GPIO_Init+0x330>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001518:	4a11      	ldr	r2, [pc, #68]	; (8001560 <HAL_GPIO_Init+0x330>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3301      	adds	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	2b0f      	cmp	r3, #15
 8001528:	f67f ae90 	bls.w	800124c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800152c:	bf00      	nop
 800152e:	3724      	adds	r7, #36	; 0x24
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	40023800 	.word	0x40023800
 800153c:	40013800 	.word	0x40013800
 8001540:	40020000 	.word	0x40020000
 8001544:	40020400 	.word	0x40020400
 8001548:	40020800 	.word	0x40020800
 800154c:	40020c00 	.word	0x40020c00
 8001550:	40021000 	.word	0x40021000
 8001554:	40021400 	.word	0x40021400
 8001558:	40021800 	.word	0x40021800
 800155c:	40021c00 	.word	0x40021c00
 8001560:	40013c00 	.word	0x40013c00

08001564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e001      	b.n	8001586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001586:	7bfb      	ldrb	r3, [r7, #15]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
 80015a0:	4613      	mov	r3, r2
 80015a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a4:	787b      	ldrb	r3, [r7, #1]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015aa:	887a      	ldrh	r2, [r7, #2]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015b0:	e003      	b.n	80015ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b2:	887b      	ldrh	r3, [r7, #2]
 80015b4:	041a      	lsls	r2, r3, #16
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	619a      	str	r2, [r3, #24]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	401a      	ands	r2, r3
 80015da:	887b      	ldrh	r3, [r7, #2]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d104      	bne.n	80015ea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80015e0:	887b      	ldrh	r3, [r7, #2]
 80015e2:	041a      	lsls	r2, r3, #16
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80015e8:	e002      	b.n	80015f0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80015ea:	887a      	ldrh	r2, [r7, #2]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	619a      	str	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <HAL_PWR_EnterSLEEPMode+0x34>)
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	4a08      	ldr	r2, [pc, #32]	; (8001630 <HAL_PWR_EnterSLEEPMode+0x34>)
 800160e:	f023 0304 	bic.w	r3, r3, #4
 8001612:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800161a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 800161c:	e002      	b.n	8001624 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800161e:	bf40      	sev
    __WFE();
 8001620:	bf20      	wfe
    __WFE();
 8001622:	bf20      	wfe
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d101      	bne.n	8001646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e25b      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d075      	beq.n	800173e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001652:	4ba3      	ldr	r3, [pc, #652]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b04      	cmp	r3, #4
 800165c:	d00c      	beq.n	8001678 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165e:	4ba0      	ldr	r3, [pc, #640]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001666:	2b08      	cmp	r3, #8
 8001668:	d112      	bne.n	8001690 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800166a:	4b9d      	ldr	r3, [pc, #628]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001676:	d10b      	bne.n	8001690 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	4b99      	ldr	r3, [pc, #612]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d05b      	beq.n	800173c <HAL_RCC_OscConfig+0x108>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d157      	bne.n	800173c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e236      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001698:	d106      	bne.n	80016a8 <HAL_RCC_OscConfig+0x74>
 800169a:	4b91      	ldr	r3, [pc, #580]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a90      	ldr	r2, [pc, #576]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e01d      	b.n	80016e4 <HAL_RCC_OscConfig+0xb0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x98>
 80016b2:	4b8b      	ldr	r3, [pc, #556]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a8a      	ldr	r2, [pc, #552]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a87      	ldr	r2, [pc, #540]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0xb0>
 80016cc:	4b84      	ldr	r3, [pc, #528]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a83      	ldr	r2, [pc, #524]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a80      	ldr	r2, [pc, #512]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80016de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fcb2 	bl	8001054 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fcae 	bl	8001054 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	; 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e1fb      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001706:	4b76      	ldr	r3, [pc, #472]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0xc0>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001714:	f7ff fc9e 	bl	8001054 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fc9a 	bl	8001054 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1e7      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	4b6c      	ldr	r3, [pc, #432]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0xe8>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d063      	beq.n	8001812 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
 8001752:	2b00      	cmp	r3, #0
 8001754:	d00b      	beq.n	800176e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001756:	4b62      	ldr	r3, [pc, #392]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800175e:	2b08      	cmp	r3, #8
 8001760:	d11c      	bne.n	800179c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001762:	4b5f      	ldr	r3, [pc, #380]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d116      	bne.n	800179c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176e:	4b5c      	ldr	r3, [pc, #368]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d005      	beq.n	8001786 <HAL_RCC_OscConfig+0x152>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e1bb      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001786:	4b56      	ldr	r3, [pc, #344]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4952      	ldr	r1, [pc, #328]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	e03a      	b.n	8001812 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a4:	4b4f      	ldr	r3, [pc, #316]	; (80018e4 <HAL_RCC_OscConfig+0x2b0>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff fc53 	bl	8001054 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b2:	f7ff fc4f 	bl	8001054 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e19c      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d0:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4940      	ldr	r1, [pc, #256]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_RCC_OscConfig+0x2b0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ec:	f7ff fc32 	bl	8001054 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f4:	f7ff fc2e 	bl	8001054 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e17b      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	4b36      	ldr	r3, [pc, #216]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d030      	beq.n	8001880 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d016      	beq.n	8001854 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001826:	4b30      	ldr	r3, [pc, #192]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 8001828:	2201      	movs	r2, #1
 800182a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff fc12 	bl	8001054 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff fc0e 	bl	8001054 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e15b      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001846:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x200>
 8001852:	e015      	b.n	8001880 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_RCC_OscConfig+0x2b4>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185a:	f7ff fbfb 	bl	8001054 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001862:	f7ff fbf7 	bl	8001054 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e144      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f0      	bne.n	8001862 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80a0 	beq.w	80019ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_OscConfig+0x2b8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d121      	bne.n	800190e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <HAL_RCC_OscConfig+0x2b8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a07      	ldr	r2, [pc, #28]	; (80018ec <HAL_RCC_OscConfig+0x2b8>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d6:	f7ff fbbd 	bl	8001054 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	e011      	b.n	8001902 <HAL_RCC_OscConfig+0x2ce>
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	42470000 	.word	0x42470000
 80018e8:	42470e80 	.word	0x42470e80
 80018ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f0:	f7ff fbb0 	bl	8001054 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e0fd      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001902:	4b81      	ldr	r3, [pc, #516]	; (8001b08 <HAL_RCC_OscConfig+0x4d4>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d106      	bne.n	8001924 <HAL_RCC_OscConfig+0x2f0>
 8001916:	4b7d      	ldr	r3, [pc, #500]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	4a7c      	ldr	r2, [pc, #496]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6713      	str	r3, [r2, #112]	; 0x70
 8001922:	e01c      	b.n	800195e <HAL_RCC_OscConfig+0x32a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b05      	cmp	r3, #5
 800192a:	d10c      	bne.n	8001946 <HAL_RCC_OscConfig+0x312>
 800192c:	4b77      	ldr	r3, [pc, #476]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001930:	4a76      	ldr	r2, [pc, #472]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6713      	str	r3, [r2, #112]	; 0x70
 8001938:	4b74      	ldr	r3, [pc, #464]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	4a73      	ldr	r2, [pc, #460]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
 8001944:	e00b      	b.n	800195e <HAL_RCC_OscConfig+0x32a>
 8001946:	4b71      	ldr	r3, [pc, #452]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194a:	4a70      	ldr	r2, [pc, #448]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	6713      	str	r3, [r2, #112]	; 0x70
 8001952:	4b6e      	ldr	r3, [pc, #440]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	4a6d      	ldr	r2, [pc, #436]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001958:	f023 0304 	bic.w	r3, r3, #4
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d015      	beq.n	8001992 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001966:	f7ff fb75 	bl	8001054 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7ff fb71 	bl	8001054 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	; 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e0bc      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001984:	4b61      	ldr	r3, [pc, #388]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0ee      	beq.n	800196e <HAL_RCC_OscConfig+0x33a>
 8001990:	e014      	b.n	80019bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7ff fb5f 	bl	8001054 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199a:	f7ff fb5b 	bl	8001054 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0a6      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b0:	4b56      	ldr	r3, [pc, #344]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1ee      	bne.n	800199a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d105      	bne.n	80019ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019c2:	4b52      	ldr	r3, [pc, #328]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a51      	ldr	r2, [pc, #324]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 80019c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8092 	beq.w	8001afc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019d8:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d05c      	beq.n	8001a9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d141      	bne.n	8001a70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ec:	4b48      	ldr	r3, [pc, #288]	; (8001b10 <HAL_RCC_OscConfig+0x4dc>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fb2f 	bl	8001054 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff fb2b 	bl	8001054 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e078      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0c:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f0      	bne.n	80019fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69da      	ldr	r2, [r3, #28]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a1b      	ldr	r3, [r3, #32]
 8001a20:	431a      	orrs	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	019b      	lsls	r3, r3, #6
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	085b      	lsrs	r3, r3, #1
 8001a30:	3b01      	subs	r3, #1
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	061b      	lsls	r3, r3, #24
 8001a3c:	4933      	ldr	r1, [pc, #204]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a42:	4b33      	ldr	r3, [pc, #204]	; (8001b10 <HAL_RCC_OscConfig+0x4dc>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fb04 	bl	8001054 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff fb00 	bl	8001054 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e04d      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x41c>
 8001a6e:	e045      	b.n	8001afc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_OscConfig+0x4dc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7ff faed 	bl	8001054 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff fae9 	bl	8001054 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e036      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x44a>
 8001a9c:	e02e      	b.n	8001afc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e029      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_RCC_OscConfig+0x4d8>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d11c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d115      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d10d      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d001      	beq.n	8001afc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	42470060 	.word	0x42470060

08001b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0cc      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b28:	4b68      	ldr	r3, [pc, #416]	; (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d90c      	bls.n	8001b50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b65      	ldr	r3, [pc, #404]	; (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b63      	ldr	r3, [pc, #396]	; (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0b8      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b68:	4b59      	ldr	r3, [pc, #356]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b80:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	4a52      	ldr	r2, [pc, #328]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8c:	4b50      	ldr	r3, [pc, #320]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	494d      	ldr	r1, [pc, #308]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d044      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d119      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e07f      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bce:	2b03      	cmp	r3, #3
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd2:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e06f      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be2:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e067      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf2:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f023 0203 	bic.w	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4934      	ldr	r1, [pc, #208]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c04:	f7ff fa26 	bl	8001054 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7ff fa22 	bl	8001054 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e04f      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	4b2b      	ldr	r3, [pc, #172]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 020c 	and.w	r2, r3, #12
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1eb      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d20c      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_RCC_ClockConfig+0x1b8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e032      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4916      	ldr	r1, [pc, #88]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	490e      	ldr	r1, [pc, #56]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c9a:	f000 f821 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	5cd3      	ldrb	r3, [r2, r3]
 8001cae:	fa21 f303 	lsr.w	r3, r1, r3
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x1c8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff f8d6 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023c00 	.word	0x40023c00
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	08006494 	.word	0x08006494
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cf6:	4b63      	ldr	r3, [pc, #396]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d007      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x32>
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d008      	beq.n	8001d18 <HAL_RCC_GetSysClockFreq+0x38>
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 80b4 	bne.w	8001e74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d0c:	4b5e      	ldr	r3, [pc, #376]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d0e:	60bb      	str	r3, [r7, #8]
       break;
 8001d10:	e0b3      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d12:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001d14:	60bb      	str	r3, [r7, #8]
      break;
 8001d16:	e0b0      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d18:	4b5a      	ldr	r3, [pc, #360]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d22:	4b58      	ldr	r3, [pc, #352]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d04a      	beq.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2e:	4b55      	ldr	r3, [pc, #340]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	099b      	lsrs	r3, r3, #6
 8001d34:	f04f 0400 	mov.w	r4, #0
 8001d38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	ea03 0501 	and.w	r5, r3, r1
 8001d44:	ea04 0602 	and.w	r6, r4, r2
 8001d48:	4629      	mov	r1, r5
 8001d4a:	4632      	mov	r2, r6
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	f04f 0400 	mov.w	r4, #0
 8001d54:	0154      	lsls	r4, r2, #5
 8001d56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d5a:	014b      	lsls	r3, r1, #5
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4622      	mov	r2, r4
 8001d60:	1b49      	subs	r1, r1, r5
 8001d62:	eb62 0206 	sbc.w	r2, r2, r6
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	f04f 0400 	mov.w	r4, #0
 8001d6e:	0194      	lsls	r4, r2, #6
 8001d70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d74:	018b      	lsls	r3, r1, #6
 8001d76:	1a5b      	subs	r3, r3, r1
 8001d78:	eb64 0402 	sbc.w	r4, r4, r2
 8001d7c:	f04f 0100 	mov.w	r1, #0
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	00e2      	lsls	r2, r4, #3
 8001d86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d8a:	00d9      	lsls	r1, r3, #3
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4614      	mov	r4, r2
 8001d90:	195b      	adds	r3, r3, r5
 8001d92:	eb44 0406 	adc.w	r4, r4, r6
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	0262      	lsls	r2, r4, #9
 8001da0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001da4:	0259      	lsls	r1, r3, #9
 8001da6:	460b      	mov	r3, r1
 8001da8:	4614      	mov	r4, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	4621      	mov	r1, r4
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f04f 0400 	mov.w	r4, #0
 8001db4:	461a      	mov	r2, r3
 8001db6:	4623      	mov	r3, r4
 8001db8:	f7fe faaa 	bl	8000310 <__aeabi_uldivmod>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	460c      	mov	r4, r1
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	e049      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc4:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	099b      	lsrs	r3, r3, #6
 8001dca:	f04f 0400 	mov.w	r4, #0
 8001dce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	ea03 0501 	and.w	r5, r3, r1
 8001dda:	ea04 0602 	and.w	r6, r4, r2
 8001dde:	4629      	mov	r1, r5
 8001de0:	4632      	mov	r2, r6
 8001de2:	f04f 0300 	mov.w	r3, #0
 8001de6:	f04f 0400 	mov.w	r4, #0
 8001dea:	0154      	lsls	r4, r2, #5
 8001dec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001df0:	014b      	lsls	r3, r1, #5
 8001df2:	4619      	mov	r1, r3
 8001df4:	4622      	mov	r2, r4
 8001df6:	1b49      	subs	r1, r1, r5
 8001df8:	eb62 0206 	sbc.w	r2, r2, r6
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	f04f 0400 	mov.w	r4, #0
 8001e04:	0194      	lsls	r4, r2, #6
 8001e06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e0a:	018b      	lsls	r3, r1, #6
 8001e0c:	1a5b      	subs	r3, r3, r1
 8001e0e:	eb64 0402 	sbc.w	r4, r4, r2
 8001e12:	f04f 0100 	mov.w	r1, #0
 8001e16:	f04f 0200 	mov.w	r2, #0
 8001e1a:	00e2      	lsls	r2, r4, #3
 8001e1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e20:	00d9      	lsls	r1, r3, #3
 8001e22:	460b      	mov	r3, r1
 8001e24:	4614      	mov	r4, r2
 8001e26:	195b      	adds	r3, r3, r5
 8001e28:	eb44 0406 	adc.w	r4, r4, r6
 8001e2c:	f04f 0100 	mov.w	r1, #0
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	02a2      	lsls	r2, r4, #10
 8001e36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e3a:	0299      	lsls	r1, r3, #10
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4614      	mov	r4, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	4621      	mov	r1, r4
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f04f 0400 	mov.w	r4, #0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4623      	mov	r3, r4
 8001e4e:	f7fe fa5f 	bl	8000310 <__aeabi_uldivmod>
 8001e52:	4603      	mov	r3, r0
 8001e54:	460c      	mov	r4, r1
 8001e56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	0c1b      	lsrs	r3, r3, #16
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	3301      	adds	r3, #1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	60bb      	str	r3, [r7, #8]
      break;
 8001e72:	e002      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001e76:	60bb      	str	r3, [r7, #8]
      break;
 8001e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7a:	68bb      	ldr	r3, [r7, #8]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	00f42400 	.word	0x00f42400
 8001e8c:	007a1200 	.word	0x007a1200

08001e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e96:	681b      	ldr	r3, [r3, #0]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	20000000 	.word	0x20000000

08001ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001eac:	f7ff fff0 	bl	8001e90 <HAL_RCC_GetHCLKFreq>
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	0a9b      	lsrs	r3, r3, #10
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	4a03      	ldr	r2, [pc, #12]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ebe:	5cd3      	ldrb	r3, [r2, r3]
 8001ec0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	080064a4 	.word	0x080064a4

08001ed0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	220f      	movs	r2, #15
 8001ede:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ee0:	4b12      	ldr	r3, [pc, #72]	; (8001f2c <HAL_RCC_GetClockConfig+0x5c>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0203 	and.w	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <HAL_RCC_GetClockConfig+0x5c>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_RCC_GetClockConfig+0x5c>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f04:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <HAL_RCC_GetClockConfig+0x5c>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	08db      	lsrs	r3, r3, #3
 8001f0a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_RCC_GetClockConfig+0x60>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 020f 	and.w	r2, r3, #15
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	601a      	str	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40023c00 	.word	0x40023c00

08001f34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e01d      	b.n	8001f82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d106      	bne.n	8001f60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f815 	bl	8001f8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3304      	adds	r3, #4
 8001f70:	4619      	mov	r1, r3
 8001f72:	4610      	mov	r0, r2
 8001f74:	f000 f968 	bl	8002248 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b085      	sub	sp, #20
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0201 	orr.w	r2, r2, #1
 8001fb4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b06      	cmp	r3, #6
 8001fc6:	d007      	beq.n	8001fd8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d122      	bne.n	8002042 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b02      	cmp	r3, #2
 8002008:	d11b      	bne.n	8002042 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f06f 0202 	mvn.w	r2, #2
 8002012:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f8ee 	bl	800220a <HAL_TIM_IC_CaptureCallback>
 800202e:	e005      	b.n	800203c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f8e0 	bl	80021f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f8f1 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f003 0304 	and.w	r3, r3, #4
 800204c:	2b04      	cmp	r3, #4
 800204e:	d122      	bne.n	8002096 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	2b04      	cmp	r3, #4
 800205c:	d11b      	bne.n	8002096 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f06f 0204 	mvn.w	r2, #4
 8002066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2202      	movs	r2, #2
 800206c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f8c4 	bl	800220a <HAL_TIM_IC_CaptureCallback>
 8002082:	e005      	b.n	8002090 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f8b6 	bl	80021f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8c7 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	d122      	bne.n	80020ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d11b      	bne.n	80020ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f06f 0208 	mvn.w	r2, #8
 80020ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2204      	movs	r2, #4
 80020c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	f003 0303 	and.w	r3, r3, #3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f89a 	bl	800220a <HAL_TIM_IC_CaptureCallback>
 80020d6:	e005      	b.n	80020e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f88c 	bl	80021f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f89d 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b10      	cmp	r3, #16
 80020f6:	d122      	bne.n	800213e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0310 	and.w	r3, r3, #16
 8002102:	2b10      	cmp	r3, #16
 8002104:	d11b      	bne.n	800213e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f06f 0210 	mvn.w	r2, #16
 800210e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2208      	movs	r2, #8
 8002114:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f870 	bl	800220a <HAL_TIM_IC_CaptureCallback>
 800212a:	e005      	b.n	8002138 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f862 	bl	80021f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f873 	bl	800221e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d10e      	bne.n	800216a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f06f 0201 	mvn.w	r2, #1
 8002162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7fe fe3f 	bl	8000de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d10e      	bne.n	8002196 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002182:	2b80      	cmp	r3, #128	; 0x80
 8002184:	d107      	bne.n	8002196 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800218e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f903 	bl	800239c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021a0:	2b40      	cmp	r3, #64	; 0x40
 80021a2:	d10e      	bne.n	80021c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ae:	2b40      	cmp	r3, #64	; 0x40
 80021b0:	d107      	bne.n	80021c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f838 	bl	8002232 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b20      	cmp	r3, #32
 80021ce:	d10e      	bne.n	80021ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f003 0320 	and.w	r3, r3, #32
 80021da:	2b20      	cmp	r3, #32
 80021dc:	d107      	bne.n	80021ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f06f 0220 	mvn.w	r2, #32
 80021e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 f8cd 	bl	8002388 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b083      	sub	sp, #12
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a40      	ldr	r2, [pc, #256]	; (800235c <TIM_Base_SetConfig+0x114>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d013      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002266:	d00f      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3d      	ldr	r2, [pc, #244]	; (8002360 <TIM_Base_SetConfig+0x118>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00b      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a3c      	ldr	r2, [pc, #240]	; (8002364 <TIM_Base_SetConfig+0x11c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d007      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <TIM_Base_SetConfig+0x120>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d003      	beq.n	8002288 <TIM_Base_SetConfig+0x40>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a3a      	ldr	r2, [pc, #232]	; (800236c <TIM_Base_SetConfig+0x124>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d108      	bne.n	800229a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a2f      	ldr	r2, [pc, #188]	; (800235c <TIM_Base_SetConfig+0x114>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d02b      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a8:	d027      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a2c      	ldr	r2, [pc, #176]	; (8002360 <TIM_Base_SetConfig+0x118>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d023      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a2b      	ldr	r2, [pc, #172]	; (8002364 <TIM_Base_SetConfig+0x11c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01f      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a2a      	ldr	r2, [pc, #168]	; (8002368 <TIM_Base_SetConfig+0x120>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01b      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a29      	ldr	r2, [pc, #164]	; (800236c <TIM_Base_SetConfig+0x124>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d017      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a28      	ldr	r2, [pc, #160]	; (8002370 <TIM_Base_SetConfig+0x128>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a27      	ldr	r2, [pc, #156]	; (8002374 <TIM_Base_SetConfig+0x12c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00f      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a26      	ldr	r2, [pc, #152]	; (8002378 <TIM_Base_SetConfig+0x130>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00b      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a25      	ldr	r2, [pc, #148]	; (800237c <TIM_Base_SetConfig+0x134>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d007      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a24      	ldr	r2, [pc, #144]	; (8002380 <TIM_Base_SetConfig+0x138>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d003      	beq.n	80022fa <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a23      	ldr	r2, [pc, #140]	; (8002384 <TIM_Base_SetConfig+0x13c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d108      	bne.n	800230c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <TIM_Base_SetConfig+0x114>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d003      	beq.n	8002340 <TIM_Base_SetConfig+0xf8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a0c      	ldr	r2, [pc, #48]	; (800236c <TIM_Base_SetConfig+0x124>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d103      	bne.n	8002348 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691a      	ldr	r2, [r3, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	615a      	str	r2, [r3, #20]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40010000 	.word	0x40010000
 8002360:	40000400 	.word	0x40000400
 8002364:	40000800 	.word	0x40000800
 8002368:	40000c00 	.word	0x40000c00
 800236c:	40010400 	.word	0x40010400
 8002370:	40014000 	.word	0x40014000
 8002374:	40014400 	.word	0x40014400
 8002378:	40014800 	.word	0x40014800
 800237c:	40001800 	.word	0x40001800
 8002380:	40001c00 	.word	0x40001c00
 8002384:	40002000 	.word	0x40002000

08002388 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f103 0208 	add.w	r2, r3, #8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295
 80023c8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	f103 0208 	add.w	r2, r3, #8
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f103 0208 	add.w	r2, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	601a      	str	r2, [r3, #0]
}
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d103      	bne.n	8002472 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	e00c      	b.n	800248c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3308      	adds	r3, #8
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	e002      	b.n	8002480 <vListInsert+0x2e>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	429a      	cmp	r2, r3
 800248a:	d2f6      	bcs.n	800247a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	1c5a      	adds	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	601a      	str	r2, [r3, #0]
}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6892      	ldr	r2, [r2, #8]
 80024da:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6852      	ldr	r2, [r2, #4]
 80024e4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d103      	bne.n	80024f8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	1e5a      	subs	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d109      	bne.n	8002540 <xQueueGenericReset+0x28>
 800252c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002530:	f383 8811 	msr	BASEPRI, r3
 8002534:	f3bf 8f6f 	isb	sy
 8002538:	f3bf 8f4f 	dsb	sy
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	e7fe      	b.n	800253e <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 8002540:	f001 fb68 	bl	8003c14 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254c:	68f9      	ldr	r1, [r7, #12]
 800254e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	441a      	add	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	3b01      	subs	r3, #1
 8002572:	68f9      	ldr	r1, [r7, #12]
 8002574:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	441a      	add	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	22ff      	movs	r2, #255	; 0xff
 8002584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	22ff      	movs	r2, #255	; 0xff
 800258c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d114      	bne.n	80025c0 <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d01a      	beq.n	80025d4 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	3310      	adds	r3, #16
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 fe7c 	bl	80032a0 <xTaskRemoveFromEventList>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d012      	beq.n	80025d4 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80025ae:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <xQueueGenericReset+0xcc>)
 80025b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	f3bf 8f4f 	dsb	sy
 80025ba:	f3bf 8f6f 	isb	sy
 80025be:	e009      	b.n	80025d4 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3310      	adds	r3, #16
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fef3 	bl	80023b0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	3324      	adds	r3, #36	; 0x24
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff feee 	bl	80023b0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80025d4:	f001 fb4c 	bl	8003c70 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80025d8:	2301      	movs	r3, #1
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	e000ed04 	.word	0xe000ed04

080025e8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b08c      	sub	sp, #48	; 0x30
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	4613      	mov	r3, r2
 80025f4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <xQueueGenericCreate+0x28>
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	e7fe      	b.n	800260e <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	fb02 f303 	mul.w	r3, r2, r3
 8002618:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d006      	beq.n	800262e <xQueueGenericCreate+0x46>
 8002620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	fbb2 f3f3 	udiv	r3, r2, r3
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	429a      	cmp	r2, r3
 800262c:	d101      	bne.n	8002632 <xQueueGenericCreate+0x4a>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <xQueueGenericCreate+0x4c>
 8002632:	2300      	movs	r3, #0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d109      	bne.n	800264c <xQueueGenericCreate+0x64>
 8002638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	e7fe      	b.n	800264a <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002652:	d909      	bls.n	8002668 <xQueueGenericCreate+0x80>
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	e7fe      	b.n	8002666 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	3350      	adds	r3, #80	; 0x50
 800266c:	4618      	mov	r0, r3
 800266e:	f001 fbb3 	bl	8003dd8 <pvPortMalloc>
 8002672:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00d      	beq.n	8002696 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3350      	adds	r3, #80	; 0x50
 8002682:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002684:	79fa      	ldrb	r2, [r7, #7]
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	4613      	mov	r3, r2
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f805 	bl	80026a0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002696:	6a3b      	ldr	r3, [r7, #32]
    }
 8002698:	4618      	mov	r0, r3
 800269a:	3728      	adds	r7, #40	; 0x28
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d103      	bne.n	80026bc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e002      	b.n	80026c2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026ce:	2101      	movs	r1, #1
 80026d0:	69b8      	ldr	r0, [r7, #24]
 80026d2:	f7ff ff21 	bl	8002518 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	68f9      	ldr	r1, [r7, #12]
 80026e4:	2073      	movs	r0, #115	; 0x73
 80026e6:	f002 fb33 	bl	8004d50 <SEGGER_SYSVIEW_RecordU32x3>
}
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b08c      	sub	sp, #48	; 0x30
 80026f6:	af04      	add	r7, sp, #16
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	4613      	mov	r3, r2
 8002700:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4618      	mov	r0, r3
 8002708:	f001 fb66 	bl	8003dd8 <pvPortMalloc>
 800270c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00e      	beq.n	8002732 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002714:	2058      	movs	r0, #88	; 0x58
 8002716:	f001 fb5f 	bl	8003dd8 <pvPortMalloc>
 800271a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
 8002728:	e005      	b.n	8002736 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f001 fc30 	bl	8003f90 <vPortFree>
 8002730:	e001      	b.n	8002736 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002732:	2300      	movs	r3, #0
 8002734:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800273c:	88fa      	ldrh	r2, [r7, #6]
 800273e:	2300      	movs	r3, #0
 8002740:	9303      	str	r3, [sp, #12]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	9302      	str	r3, [sp, #8]
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	9301      	str	r3, [sp, #4]
 800274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f80e 	bl	8002774 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002758:	69f8      	ldr	r0, [r7, #28]
 800275a:	f000 f8a1 	bl	80028a0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800275e:	2301      	movs	r3, #1
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	e002      	b.n	800276a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002764:	f04f 33ff 	mov.w	r3, #4294967295
 8002768:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800276a:	69bb      	ldr	r3, [r7, #24]
    }
 800276c:	4618      	mov	r0, r3
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	461a      	mov	r2, r3
 800278c:	21a5      	movs	r1, #165	; 0xa5
 800278e:	f003 f9cd 	bl	8005b2c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800279c:	3b01      	subs	r3, #1
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f023 0307 	bic.w	r3, r3, #7
 80027aa:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <prvInitialiseNewTask+0x56>
 80027b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ba:	f383 8811 	msr	BASEPRI, r3
 80027be:	f3bf 8f6f 	isb	sy
 80027c2:	f3bf 8f4f 	dsb	sy
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	e7fe      	b.n	80027c8 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01f      	beq.n	8002810 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	e012      	b.n	80027fc <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	4413      	add	r3, r2
 80027dc:	7819      	ldrb	r1, [r3, #0]
 80027de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	4413      	add	r3, r2
 80027e4:	3334      	adds	r3, #52	; 0x34
 80027e6:	460a      	mov	r2, r1
 80027e8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	4413      	add	r3, r2
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d006      	beq.n	8002804 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3301      	adds	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b09      	cmp	r3, #9
 8002800:	d9e9      	bls.n	80027d6 <prvInitialiseNewTask+0x62>
 8002802:	e000      	b.n	8002806 <prvInitialiseNewTask+0x92>
            {
                break;
 8002804:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800280e:	e003      	b.n	8002818 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281a:	2b04      	cmp	r3, #4
 800281c:	d901      	bls.n	8002822 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800281e:	2304      	movs	r3, #4
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800282c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	2200      	movs	r2, #0
 8002832:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	3304      	adds	r3, #4
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fdd9 	bl	80023f0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002840:	3318      	adds	r3, #24
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fdd4 	bl	80023f0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800284c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	f1c3 0205 	rsb	r2, r3, #5
 8002854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002856:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800285c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002860:	3350      	adds	r3, #80	; 0x50
 8002862:	2204      	movs	r2, #4
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f003 f960 	bl	8005b2c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800286c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286e:	3354      	adds	r3, #84	; 0x54
 8002870:	2201      	movs	r2, #1
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f003 f959 	bl	8005b2c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	68f9      	ldr	r1, [r7, #12]
 800287e:	69b8      	ldr	r0, [r7, #24]
 8002880:	f001 f824 	bl	80038cc <pxPortInitialiseStack>
 8002884:	4602      	mov	r2, r0
 8002886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002888:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002894:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002896:	bf00      	nop
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
	...

080028a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80028a0:	b5b0      	push	{r4, r5, r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af02      	add	r7, sp, #8
 80028a6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80028a8:	f001 f9b4 	bl	8003c14 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80028ac:	4b3b      	ldr	r3, [pc, #236]	; (800299c <prvAddNewTaskToReadyList+0xfc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	4a3a      	ldr	r2, [pc, #232]	; (800299c <prvAddNewTaskToReadyList+0xfc>)
 80028b4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80028b6:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <prvAddNewTaskToReadyList+0x100>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80028be:	4a38      	ldr	r2, [pc, #224]	; (80029a0 <prvAddNewTaskToReadyList+0x100>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80028c4:	4b35      	ldr	r3, [pc, #212]	; (800299c <prvAddNewTaskToReadyList+0xfc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d110      	bne.n	80028ee <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80028cc:	f000 fd68 	bl	80033a0 <prvInitialiseTaskLists>
 80028d0:	e00d      	b.n	80028ee <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80028d2:	4b34      	ldr	r3, [pc, #208]	; (80029a4 <prvAddNewTaskToReadyList+0x104>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028da:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <prvAddNewTaskToReadyList+0x100>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d802      	bhi.n	80028ee <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80028e8:	4a2d      	ldr	r2, [pc, #180]	; (80029a0 <prvAddNewTaskToReadyList+0x100>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80028ee:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <prvAddNewTaskToReadyList+0x108>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3301      	adds	r3, #1
 80028f4:	4a2c      	ldr	r2, [pc, #176]	; (80029a8 <prvAddNewTaskToReadyList+0x108>)
 80028f6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80028f8:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <prvAddNewTaskToReadyList+0x108>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d016      	beq.n	8002934 <prvAddNewTaskToReadyList+0x94>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4618      	mov	r0, r3
 800290a:	f002 fe63 	bl	80055d4 <SEGGER_SYSVIEW_OnTaskCreate>
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	461d      	mov	r5, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	461c      	mov	r4, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	1ae3      	subs	r3, r4, r3
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	462b      	mov	r3, r5
 8002930:	f001 fc4a 	bl	80041c8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4618      	mov	r0, r3
 8002938:	f002 fed0 	bl	80056dc <SEGGER_SYSVIEW_OnTaskStartReady>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	2201      	movs	r2, #1
 8002942:	409a      	lsls	r2, r3
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <prvAddNewTaskToReadyList+0x10c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4313      	orrs	r3, r2
 800294a:	4a18      	ldr	r2, [pc, #96]	; (80029ac <prvAddNewTaskToReadyList+0x10c>)
 800294c:	6013      	str	r3, [r2, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4a15      	ldr	r2, [pc, #84]	; (80029b0 <prvAddNewTaskToReadyList+0x110>)
 800295c:	441a      	add	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3304      	adds	r3, #4
 8002962:	4619      	mov	r1, r3
 8002964:	4610      	mov	r0, r2
 8002966:	f7ff fd50 	bl	800240a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800296a:	f001 f981 	bl	8003c70 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <prvAddNewTaskToReadyList+0x104>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00e      	beq.n	8002994 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <prvAddNewTaskToReadyList+0x100>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	429a      	cmp	r2, r3
 8002982:	d207      	bcs.n	8002994 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002984:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <prvAddNewTaskToReadyList+0x114>)
 8002986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002994:	bf00      	nop
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bdb0      	pop	{r4, r5, r7, pc}
 800299c:	20000170 	.word	0x20000170
 80029a0:	20000098 	.word	0x20000098
 80029a4:	2000017c 	.word	0x2000017c
 80029a8:	2000018c 	.word	0x2000018c
 80029ac:	20000178 	.word	0x20000178
 80029b0:	2000009c 	.word	0x2000009c
 80029b4:	e000ed04 	.word	0xe000ed04

080029b8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80029c0:	f001 f928 	bl	8003c14 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d102      	bne.n	80029d0 <vTaskDelete+0x18>
 80029ca:	4b45      	ldr	r3, [pc, #276]	; (8002ae0 <vTaskDelete+0x128>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	e000      	b.n	80029d2 <vTaskDelete+0x1a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3304      	adds	r3, #4
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fd73 	bl	80024c4 <uxListRemove>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d115      	bne.n	8002a10 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e8:	493e      	ldr	r1, [pc, #248]	; (8002ae4 <vTaskDelete+0x12c>)
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10a      	bne.n	8002a10 <vTaskDelete+0x58>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	2201      	movs	r2, #1
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43da      	mvns	r2, r3
 8002a06:	4b38      	ldr	r3, [pc, #224]	; (8002ae8 <vTaskDelete+0x130>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	4a36      	ldr	r2, [pc, #216]	; (8002ae8 <vTaskDelete+0x130>)
 8002a0e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d004      	beq.n	8002a22 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	3318      	adds	r3, #24
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fd51 	bl	80024c4 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002a22:	4b32      	ldr	r3, [pc, #200]	; (8002aec <vTaskDelete+0x134>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	4a30      	ldr	r2, [pc, #192]	; (8002aec <vTaskDelete+0x134>)
 8002a2a:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002a2c:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <vTaskDelete+0x128>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d118      	bne.n	8002a68 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3304      	adds	r3, #4
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	482c      	ldr	r0, [pc, #176]	; (8002af0 <vTaskDelete+0x138>)
 8002a3e:	f7ff fce4 	bl	800240a <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002a42:	4b2c      	ldr	r3, [pc, #176]	; (8002af4 <vTaskDelete+0x13c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	4a2a      	ldr	r2, [pc, #168]	; (8002af4 <vTaskDelete+0x13c>)
 8002a4a:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f002 fee6 	bl	8005820 <SEGGER_SYSVIEW_ShrinkId>
 8002a54:	4603      	mov	r3, r0
 8002a56:	4619      	mov	r1, r3
 8002a58:	2022      	movs	r0, #34	; 0x22
 8002a5a:	f002 f8e3 	bl	8004c24 <SEGGER_SYSVIEW_RecordU32>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 fc89 	bl	8004378 <SYSVIEW_DeleteTask>
 8002a66:	e016      	b.n	8002a96 <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002a68:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <vTaskDelete+0x140>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <vTaskDelete+0x140>)
 8002a70:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 fed3 	bl	8005820 <SEGGER_SYSVIEW_ShrinkId>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	2022      	movs	r0, #34	; 0x22
 8002a80:	f002 f8d0 	bl	8004c24 <SEGGER_SYSVIEW_RecordU32>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 fc76 	bl	8004378 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fcf3 	bl	8003478 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002a92:	f000 fd01 	bl	8003498 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002a96:	f001 f8eb 	bl	8003c70 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <vTaskDelete+0x144>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d01a      	beq.n	8002ad8 <vTaskDelete+0x120>
        {
            if( pxTCB == pxCurrentTCB )
 8002aa2:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <vTaskDelete+0x128>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d115      	bne.n	8002ad8 <vTaskDelete+0x120>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <vTaskDelete+0x148>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d009      	beq.n	8002ac8 <vTaskDelete+0x110>
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	e7fe      	b.n	8002ac6 <vTaskDelete+0x10e>
                portYIELD_WITHIN_API();
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <vTaskDelete+0x14c>)
 8002aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000098 	.word	0x20000098
 8002ae4:	2000009c 	.word	0x2000009c
 8002ae8:	20000178 	.word	0x20000178
 8002aec:	2000018c 	.word	0x2000018c
 8002af0:	20000144 	.word	0x20000144
 8002af4:	20000158 	.word	0x20000158
 8002af8:	20000170 	.word	0x20000170
 8002afc:	2000017c 	.word	0x2000017c
 8002b00:	20000198 	.word	0x20000198
 8002b04:	e000ed04 	.word	0xe000ed04

08002b08 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	; 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d109      	bne.n	8002b30 <xTaskDelayUntil+0x28>
 8002b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b20:	f383 8811 	msr	BASEPRI, r3
 8002b24:	f3bf 8f6f 	isb	sy
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	e7fe      	b.n	8002b2e <xTaskDelayUntil+0x26>
        configASSERT( ( xTimeIncrement > 0U ) );
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <xTaskDelayUntil+0x42>
 8002b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	e7fe      	b.n	8002b48 <xTaskDelayUntil+0x40>
        configASSERT( uxSchedulerSuspended == 0 );
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	; (8002bf8 <xTaskDelayUntil+0xf0>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <xTaskDelayUntil+0x5e>
 8002b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b56:	f383 8811 	msr	BASEPRI, r3
 8002b5a:	f3bf 8f6f 	isb	sy
 8002b5e:	f3bf 8f4f 	dsb	sy
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	e7fe      	b.n	8002b64 <xTaskDelayUntil+0x5c>

        vTaskSuspendAll();
 8002b66:	f000 f9b9 	bl	8002edc <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8002b6a:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <xTaskDelayUntil+0xf4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a3a      	ldr	r2, [r7, #32]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d20b      	bcs.n	8002b9c <xTaskDelayUntil+0x94>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d211      	bcs.n	8002bb2 <xTaskDelayUntil+0xaa>
 8002b8e:	69fa      	ldr	r2, [r7, #28]
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d90d      	bls.n	8002bb2 <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 8002b96:	2301      	movs	r3, #1
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9a:	e00a      	b.n	8002bb2 <xTaskDelayUntil+0xaa>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d303      	bcc.n	8002bae <xTaskDelayUntil+0xa6>
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d901      	bls.n	8002bb2 <xTaskDelayUntil+0xaa>
                {
                    xShouldDelay = pdTRUE;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <xTaskDelayUntil+0xca>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8002bbe:	2024      	movs	r0, #36	; 0x24
 8002bc0:	f002 f812 	bl	8004be8 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fe05 	bl	80037dc <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002bd2:	f000 f991 	bl	8002ef8 <xTaskResumeAll>
 8002bd6:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d107      	bne.n	8002bee <xTaskDelayUntil+0xe6>
        {
            portYIELD_WITHIN_API();
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <xTaskDelayUntil+0xf8>)
 8002be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3728      	adds	r7, #40	; 0x28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000198 	.word	0x20000198
 8002bfc:	20000174 	.word	0x20000174
 8002c00:	e000ed04 	.word	0xe000ed04

08002c04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01a      	beq.n	8002c4c <vTaskDelay+0x48>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <vTaskDelay+0x68>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <vTaskDelay+0x2e>
 8002c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	e7fe      	b.n	8002c30 <vTaskDelay+0x2c>
            vTaskSuspendAll();
 8002c32:	f000 f953 	bl	8002edc <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002c36:	6879      	ldr	r1, [r7, #4]
 8002c38:	2023      	movs	r0, #35	; 0x23
 8002c3a:	f001 fff3 	bl	8004c24 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c3e:	2100      	movs	r1, #0
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fdcb 	bl	80037dc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002c46:	f000 f957 	bl	8002ef8 <xTaskResumeAll>
 8002c4a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d107      	bne.n	8002c62 <vTaskDelay+0x5e>
        {
            portYIELD_WITHIN_API();
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <vTaskDelay+0x6c>)
 8002c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000198 	.word	0x20000198
 8002c70:	e000ed04 	.word	0xe000ed04

08002c74 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 8002c7c:	f000 ffca 	bl	8003c14 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <uxTaskPriorityGet+0x18>
 8002c86:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <uxTaskPriorityGet+0x30>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	e000      	b.n	8002c8e <uxTaskPriorityGet+0x1a>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002c96:	f000 ffeb 	bl	8003c70 <vPortExitCritical>

        return uxReturn;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
    }
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000098 	.word	0x20000098

08002ca8 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08a      	sub	sp, #40	; 0x28
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]

        configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d909      	bls.n	8002cd0 <vTaskPrioritySet+0x28>
 8002cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc0:	f383 8811 	msr	BASEPRI, r3
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	f3bf 8f4f 	dsb	sy
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	e7fe      	b.n	8002cce <vTaskPrioritySet+0x26>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d901      	bls.n	8002cda <vTaskPrioritySet+0x32>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cd6:	2304      	movs	r3, #4
 8002cd8:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002cda:	f000 ff9b 	bl	8003c14 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <vTaskPrioritySet+0x42>
 8002ce4:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <vTaskPrioritySet+0x170>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	e000      	b.n	8002cec <vTaskPrioritySet+0x44>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f002 fd95 	bl	8005820 <SEGGER_SYSVIEW_ShrinkId>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	2028      	movs	r0, #40	; 0x28
 8002cfe:	f001 ffcd 	bl	8004c9c <SEGGER_SYSVIEW_RecordU32x2>
 8002d02:	69b8      	ldr	r0, [r7, #24]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2300      	movs	r3, #0
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	f001 fabe 	bl	8004298 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d20:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d06f      	beq.n	8002e0a <vTaskPrioritySet+0x162>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d90d      	bls.n	8002d4e <vTaskPrioritySet+0xa6>
                {
                    if( pxTCB != pxCurrentTCB )
 8002d32:	4b39      	ldr	r3, [pc, #228]	; (8002e18 <vTaskPrioritySet+0x170>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d00f      	beq.n	8002d5c <vTaskPrioritySet+0xb4>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002d3c:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <vTaskPrioritySet+0x170>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d309      	bcc.n	8002d5c <vTaskPrioritySet+0xb4>
                        {
                            xYieldRequired = pdTRUE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	61fb      	str	r3, [r7, #28]
 8002d4c:	e006      	b.n	8002d5c <vTaskPrioritySet+0xb4>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 8002d4e:	4b32      	ldr	r3, [pc, #200]	; (8002e18 <vTaskPrioritySet+0x170>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d101      	bne.n	8002d5c <vTaskPrioritySet+0xb4>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d60:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d102      	bne.n	8002d74 <vTaskPrioritySet+0xcc>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	649a      	str	r2, [r3, #72]	; 0x48
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	db04      	blt.n	8002d8c <vTaskPrioritySet+0xe4>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	f1c3 0205 	rsb	r2, r3, #5
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6959      	ldr	r1, [r3, #20]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <vTaskPrioritySet+0x174>)
 8002d9c:	4413      	add	r3, r2
 8002d9e:	4299      	cmp	r1, r3
 8002da0:	d128      	bne.n	8002df4 <vTaskPrioritySet+0x14c>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to it's new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	3304      	adds	r3, #4
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fb8c 	bl	80024c4 <uxListRemove>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <vTaskPrioritySet+0x11e>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002db2:	2201      	movs	r2, #1
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <vTaskPrioritySet+0x178>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <vTaskPrioritySet+0x178>)
 8002dc4:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

					prvReaddTaskToReadyList( pxTCB );
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	2201      	movs	r2, #1
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <vTaskPrioritySet+0x178>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <vTaskPrioritySet+0x178>)
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4a0d      	ldr	r2, [pc, #52]	; (8002e1c <vTaskPrioritySet+0x174>)
 8002de6:	441a      	add	r2, r3
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	3304      	adds	r3, #4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f7ff fb0b 	bl	800240a <vListInsertEnd>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <vTaskPrioritySet+0x162>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <vTaskPrioritySet+0x17c>)
 8002dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 8002e0a:	f000 ff31 	bl	8003c70 <vPortExitCritical>
    }
 8002e0e:	bf00      	nop
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000098 	.word	0x20000098
 8002e1c:	2000009c 	.word	0x2000009c
 8002e20:	20000178 	.word	0x20000178
 8002e24:	e000ed04 	.word	0xe000ed04

08002e28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002e2e:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <vTaskStartScheduler+0x94>)
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	2300      	movs	r3, #0
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	2300      	movs	r3, #0
 8002e38:	2282      	movs	r2, #130	; 0x82
 8002e3a:	4921      	ldr	r1, [pc, #132]	; (8002ec0 <vTaskStartScheduler+0x98>)
 8002e3c:	4821      	ldr	r0, [pc, #132]	; (8002ec4 <vTaskStartScheduler+0x9c>)
 8002e3e:	f7ff fc58 	bl	80026f2 <xTaskCreate>
 8002e42:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d123      	bne.n	8002e92 <vTaskStartScheduler+0x6a>
 8002e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e5c:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <vTaskStartScheduler+0xa0>)
 8002e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e62:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <vTaskStartScheduler+0xa4>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <vTaskStartScheduler+0xa8>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002e70:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <vTaskStartScheduler+0xac>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b11      	ldr	r3, [pc, #68]	; (8002ebc <vTaskStartScheduler+0x94>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d102      	bne.n	8002e82 <vTaskStartScheduler+0x5a>
 8002e7c:	f002 fb8e 	bl	800559c <SEGGER_SYSVIEW_OnIdle>
 8002e80:	e004      	b.n	8002e8c <vTaskStartScheduler+0x64>
 8002e82:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <vTaskStartScheduler+0xac>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f002 fbe6 	bl	8005658 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002e8c:	f000 fdaa 	bl	80039e4 <xPortStartScheduler>
 8002e90:	e00d      	b.n	8002eae <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d109      	bne.n	8002eae <vTaskStartScheduler+0x86>
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	e7fe      	b.n	8002eac <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <vTaskStartScheduler+0xb0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20000194 	.word	0x20000194
 8002ec0:	0800641c 	.word	0x0800641c
 8002ec4:	0800336d 	.word	0x0800336d
 8002ec8:	20000190 	.word	0x20000190
 8002ecc:	2000017c 	.word	0x2000017c
 8002ed0:	20000174 	.word	0x20000174
 8002ed4:	20000098 	.word	0x20000098
 8002ed8:	2000000c 	.word	0x2000000c

08002edc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <vTaskSuspendAll+0x18>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	4a03      	ldr	r2, [pc, #12]	; (8002ef4 <vTaskSuspendAll+0x18>)
 8002ee8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	20000198 	.word	0x20000198

08002ef8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f06:	4b43      	ldr	r3, [pc, #268]	; (8003014 <xTaskResumeAll+0x11c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <xTaskResumeAll+0x2a>
 8002f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f12:	f383 8811 	msr	BASEPRI, r3
 8002f16:	f3bf 8f6f 	isb	sy
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	603b      	str	r3, [r7, #0]
 8002f20:	e7fe      	b.n	8002f20 <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f22:	f000 fe77 	bl	8003c14 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f26:	4b3b      	ldr	r3, [pc, #236]	; (8003014 <xTaskResumeAll+0x11c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	4a39      	ldr	r2, [pc, #228]	; (8003014 <xTaskResumeAll+0x11c>)
 8002f2e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f30:	4b38      	ldr	r3, [pc, #224]	; (8003014 <xTaskResumeAll+0x11c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d165      	bne.n	8003004 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f38:	4b37      	ldr	r3, [pc, #220]	; (8003018 <xTaskResumeAll+0x120>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d061      	beq.n	8003004 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f40:	e032      	b.n	8002fa8 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f42:	4b36      	ldr	r3, [pc, #216]	; (800301c <xTaskResumeAll+0x124>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3318      	adds	r3, #24
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fab8 	bl	80024c4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3304      	adds	r3, #4
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fab3 	bl	80024c4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f002 fbbb 	bl	80056dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <xTaskResumeAll+0x128>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	4a2a      	ldr	r2, [pc, #168]	; (8003020 <xTaskResumeAll+0x128>)
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4a27      	ldr	r2, [pc, #156]	; (8003024 <xTaskResumeAll+0x12c>)
 8002f86:	441a      	add	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	f7ff fa3b 	bl	800240a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	4b23      	ldr	r3, [pc, #140]	; (8003028 <xTaskResumeAll+0x130>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d302      	bcc.n	8002fa8 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 8002fa2:	4b22      	ldr	r3, [pc, #136]	; (800302c <xTaskResumeAll+0x134>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fa8:	4b1c      	ldr	r3, [pc, #112]	; (800301c <xTaskResumeAll+0x124>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1c8      	bne.n	8002f42 <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fb6:	f000 fa6f 	bl	8003498 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fba:	4b1d      	ldr	r3, [pc, #116]	; (8003030 <xTaskResumeAll+0x138>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d010      	beq.n	8002fe8 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fc6:	f000 f847 	bl	8003058 <xTaskIncrementTick>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d002      	beq.n	8002fd6 <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 8002fd0:	4b16      	ldr	r3, [pc, #88]	; (800302c <xTaskResumeAll+0x134>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f1      	bne.n	8002fc6 <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 8002fe2:	4b13      	ldr	r3, [pc, #76]	; (8003030 <xTaskResumeAll+0x138>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002fe8:	4b10      	ldr	r3, [pc, #64]	; (800302c <xTaskResumeAll+0x134>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <xTaskResumeAll+0x13c>)
 8002ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003004:	f000 fe34 	bl	8003c70 <vPortExitCritical>

    return xAlreadyYielded;
 8003008:	68bb      	ldr	r3, [r7, #8]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000198 	.word	0x20000198
 8003018:	20000170 	.word	0x20000170
 800301c:	20000130 	.word	0x20000130
 8003020:	20000178 	.word	0x20000178
 8003024:	2000009c 	.word	0x2000009c
 8003028:	20000098 	.word	0x20000098
 800302c:	20000184 	.word	0x20000184
 8003030:	20000180 	.word	0x20000180
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800303e:	4b05      	ldr	r3, [pc, #20]	; (8003054 <xTaskGetTickCount+0x1c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003044:	687b      	ldr	r3, [r7, #4]
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000174 	.word	0x20000174

08003058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003062:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <xTaskIncrementTick+0x14c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f040 8091 	bne.w	800318e <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800306c:	4b4e      	ldr	r3, [pc, #312]	; (80031a8 <xTaskIncrementTick+0x150>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003074:	4a4c      	ldr	r2, [pc, #304]	; (80031a8 <xTaskIncrementTick+0x150>)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d11f      	bne.n	80030c0 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003080:	4b4a      	ldr	r3, [pc, #296]	; (80031ac <xTaskIncrementTick+0x154>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <xTaskIncrementTick+0x46>
 800308a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800308e:	f383 8811 	msr	BASEPRI, r3
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	f3bf 8f4f 	dsb	sy
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	e7fe      	b.n	800309c <xTaskIncrementTick+0x44>
 800309e:	4b43      	ldr	r3, [pc, #268]	; (80031ac <xTaskIncrementTick+0x154>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	4b42      	ldr	r3, [pc, #264]	; (80031b0 <xTaskIncrementTick+0x158>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a40      	ldr	r2, [pc, #256]	; (80031ac <xTaskIncrementTick+0x154>)
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4a40      	ldr	r2, [pc, #256]	; (80031b0 <xTaskIncrementTick+0x158>)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4b40      	ldr	r3, [pc, #256]	; (80031b4 <xTaskIncrementTick+0x15c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	3301      	adds	r3, #1
 80030b8:	4a3e      	ldr	r2, [pc, #248]	; (80031b4 <xTaskIncrementTick+0x15c>)
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	f000 f9ec 	bl	8003498 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030c0:	4b3d      	ldr	r3, [pc, #244]	; (80031b8 <xTaskIncrementTick+0x160>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d34c      	bcc.n	8003164 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ca:	4b38      	ldr	r3, [pc, #224]	; (80031ac <xTaskIncrementTick+0x154>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d104      	bne.n	80030de <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030d4:	4b38      	ldr	r3, [pc, #224]	; (80031b8 <xTaskIncrementTick+0x160>)
 80030d6:	f04f 32ff 	mov.w	r2, #4294967295
 80030da:	601a      	str	r2, [r3, #0]
                    break;
 80030dc:	e042      	b.n	8003164 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030de:	4b33      	ldr	r3, [pc, #204]	; (80031ac <xTaskIncrementTick+0x154>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d203      	bcs.n	80030fe <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80030f6:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <xTaskIncrementTick+0x160>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030fc:	e032      	b.n	8003164 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	3304      	adds	r3, #4
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff f9de 	bl	80024c4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	2b00      	cmp	r3, #0
 800310e:	d004      	beq.n	800311a <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	3318      	adds	r3, #24
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff f9d5 	bl	80024c4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4618      	mov	r0, r3
 800311e:	f002 fadd 	bl	80056dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	2201      	movs	r2, #1
 8003128:	409a      	lsls	r2, r3
 800312a:	4b24      	ldr	r3, [pc, #144]	; (80031bc <xTaskIncrementTick+0x164>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4313      	orrs	r3, r2
 8003130:	4a22      	ldr	r2, [pc, #136]	; (80031bc <xTaskIncrementTick+0x164>)
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003138:	4613      	mov	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <xTaskIncrementTick+0x168>)
 8003142:	441a      	add	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3304      	adds	r3, #4
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f7ff f95d 	bl	800240a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003154:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <xTaskIncrementTick+0x16c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315a:	429a      	cmp	r2, r3
 800315c:	d3b5      	bcc.n	80030ca <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 800315e:	2301      	movs	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003162:	e7b2      	b.n	80030ca <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003164:	4b17      	ldr	r3, [pc, #92]	; (80031c4 <xTaskIncrementTick+0x16c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316a:	4915      	ldr	r1, [pc, #84]	; (80031c0 <xTaskIncrementTick+0x168>)
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d901      	bls.n	8003180 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 800317c:	2301      	movs	r3, #1
 800317e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <xTaskIncrementTick+0x170>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d007      	beq.n	8003198 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8003188:	2301      	movs	r3, #1
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	e004      	b.n	8003198 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <xTaskIncrementTick+0x174>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <xTaskIncrementTick+0x174>)
 8003196:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003198:	697b      	ldr	r3, [r7, #20]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000198 	.word	0x20000198
 80031a8:	20000174 	.word	0x20000174
 80031ac:	20000128 	.word	0x20000128
 80031b0:	2000012c 	.word	0x2000012c
 80031b4:	20000188 	.word	0x20000188
 80031b8:	20000190 	.word	0x20000190
 80031bc:	20000178 	.word	0x20000178
 80031c0:	2000009c 	.word	0x2000009c
 80031c4:	20000098 	.word	0x20000098
 80031c8:	20000184 	.word	0x20000184
 80031cc:	20000180 	.word	0x20000180

080031d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031d6:	4b2c      	ldr	r3, [pc, #176]	; (8003288 <vTaskSwitchContext+0xb8>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80031de:	4b2b      	ldr	r3, [pc, #172]	; (800328c <vTaskSwitchContext+0xbc>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80031e4:	e04c      	b.n	8003280 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 80031e6:	4b29      	ldr	r3, [pc, #164]	; (800328c <vTaskSwitchContext+0xbc>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ec:	4b28      	ldr	r3, [pc, #160]	; (8003290 <vTaskSwitchContext+0xc0>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80031fa:	7afb      	ldrb	r3, [r7, #11]
 80031fc:	f1c3 031f 	rsb	r3, r3, #31
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	4924      	ldr	r1, [pc, #144]	; (8003294 <vTaskSwitchContext+0xc4>)
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <vTaskSwitchContext+0x5a>
        __asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	e7fe      	b.n	8003228 <vTaskSwitchContext+0x58>
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4a17      	ldr	r2, [pc, #92]	; (8003294 <vTaskSwitchContext+0xc4>)
 8003236:	4413      	add	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	605a      	str	r2, [r3, #4]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	3308      	adds	r3, #8
 800324c:	429a      	cmp	r2, r3
 800324e:	d104      	bne.n	800325a <vTaskSwitchContext+0x8a>
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <vTaskSwitchContext+0xc8>)
 8003262:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <vTaskSwitchContext+0xc8>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <vTaskSwitchContext+0xcc>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d102      	bne.n	8003276 <vTaskSwitchContext+0xa6>
 8003270:	f002 f994 	bl	800559c <SEGGER_SYSVIEW_OnIdle>
}
 8003274:	e004      	b.n	8003280 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <vTaskSwitchContext+0xc8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f002 f9ec 	bl	8005658 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003280:	bf00      	nop
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20000198 	.word	0x20000198
 800328c:	20000184 	.word	0x20000184
 8003290:	20000178 	.word	0x20000178
 8003294:	2000009c 	.word	0x2000009c
 8003298:	20000098 	.word	0x20000098
 800329c:	20000194 	.word	0x20000194

080032a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <xTaskRemoveFromEventList+0x2a>
 80032b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ba:	f383 8811 	msr	BASEPRI, r3
 80032be:	f3bf 8f6f 	isb	sy
 80032c2:	f3bf 8f4f 	dsb	sy
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e7fe      	b.n	80032c8 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	3318      	adds	r3, #24
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff f8f8 	bl	80024c4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032d4:	4b1f      	ldr	r3, [pc, #124]	; (8003354 <xTaskRemoveFromEventList+0xb4>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d120      	bne.n	800331e <xTaskRemoveFromEventList+0x7e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	3304      	adds	r3, #4
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff f8ef 	bl	80024c4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f002 f9f7 	bl	80056dc <SEGGER_SYSVIEW_OnTaskStartReady>
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	2201      	movs	r2, #1
 80032f4:	409a      	lsls	r2, r3
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <xTaskRemoveFromEventList+0xb8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	4a16      	ldr	r2, [pc, #88]	; (8003358 <xTaskRemoveFromEventList+0xb8>)
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4a13      	ldr	r2, [pc, #76]	; (800335c <xTaskRemoveFromEventList+0xbc>)
 800330e:	441a      	add	r2, r3
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	3304      	adds	r3, #4
 8003314:	4619      	mov	r1, r3
 8003316:	4610      	mov	r0, r2
 8003318:	f7ff f877 	bl	800240a <vListInsertEnd>
 800331c:	e005      	b.n	800332a <xTaskRemoveFromEventList+0x8a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	3318      	adds	r3, #24
 8003322:	4619      	mov	r1, r3
 8003324:	480e      	ldr	r0, [pc, #56]	; (8003360 <xTaskRemoveFromEventList+0xc0>)
 8003326:	f7ff f870 	bl	800240a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332e:	4b0d      	ldr	r3, [pc, #52]	; (8003364 <xTaskRemoveFromEventList+0xc4>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	429a      	cmp	r2, r3
 8003336:	d905      	bls.n	8003344 <xTaskRemoveFromEventList+0xa4>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003338:	2301      	movs	r3, #1
 800333a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <xTaskRemoveFromEventList+0xc8>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e001      	b.n	8003348 <xTaskRemoveFromEventList+0xa8>
    }
    else
    {
        xReturn = pdFALSE;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003348:	697b      	ldr	r3, [r7, #20]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000198 	.word	0x20000198
 8003358:	20000178 	.word	0x20000178
 800335c:	2000009c 	.word	0x2000009c
 8003360:	20000130 	.word	0x20000130
 8003364:	20000098 	.word	0x20000098
 8003368:	20000184 	.word	0x20000184

0800336c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003374:	f000 f854 	bl	8003420 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003378:	4b07      	ldr	r3, [pc, #28]	; (8003398 <prvIdleTask+0x2c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d907      	bls.n	8003390 <prvIdleTask+0x24>
                {
                    taskYIELD();
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <prvIdleTask+0x30>)
 8003382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8003390:	f7fd fa60 	bl	8000854 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8003394:	e7ee      	b.n	8003374 <prvIdleTask+0x8>
 8003396:	bf00      	nop
 8003398:	2000009c 	.word	0x2000009c
 800339c:	e000ed04 	.word	0xe000ed04

080033a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033a6:	2300      	movs	r3, #0
 80033a8:	607b      	str	r3, [r7, #4]
 80033aa:	e00c      	b.n	80033c6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4a12      	ldr	r2, [pc, #72]	; (8003400 <prvInitialiseTaskLists+0x60>)
 80033b8:	4413      	add	r3, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7fe fff8 	bl	80023b0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3301      	adds	r3, #1
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d9ef      	bls.n	80033ac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80033cc:	480d      	ldr	r0, [pc, #52]	; (8003404 <prvInitialiseTaskLists+0x64>)
 80033ce:	f7fe ffef 	bl	80023b0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80033d2:	480d      	ldr	r0, [pc, #52]	; (8003408 <prvInitialiseTaskLists+0x68>)
 80033d4:	f7fe ffec 	bl	80023b0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80033d8:	480c      	ldr	r0, [pc, #48]	; (800340c <prvInitialiseTaskLists+0x6c>)
 80033da:	f7fe ffe9 	bl	80023b0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80033de:	480c      	ldr	r0, [pc, #48]	; (8003410 <prvInitialiseTaskLists+0x70>)
 80033e0:	f7fe ffe6 	bl	80023b0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80033e4:	480b      	ldr	r0, [pc, #44]	; (8003414 <prvInitialiseTaskLists+0x74>)
 80033e6:	f7fe ffe3 	bl	80023b0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <prvInitialiseTaskLists+0x78>)
 80033ec:	4a05      	ldr	r2, [pc, #20]	; (8003404 <prvInitialiseTaskLists+0x64>)
 80033ee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <prvInitialiseTaskLists+0x7c>)
 80033f2:	4a05      	ldr	r2, [pc, #20]	; (8003408 <prvInitialiseTaskLists+0x68>)
 80033f4:	601a      	str	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	2000009c 	.word	0x2000009c
 8003404:	20000100 	.word	0x20000100
 8003408:	20000114 	.word	0x20000114
 800340c:	20000130 	.word	0x20000130
 8003410:	20000144 	.word	0x20000144
 8003414:	2000015c 	.word	0x2000015c
 8003418:	20000128 	.word	0x20000128
 800341c:	2000012c 	.word	0x2000012c

08003420 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003426:	e019      	b.n	800345c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003428:	f000 fbf4 	bl	8003c14 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <prvCheckTasksWaitingTermination+0x4c>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3304      	adds	r3, #4
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff f843 	bl	80024c4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800343e:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <prvCheckTasksWaitingTermination+0x50>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3b01      	subs	r3, #1
 8003444:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <prvCheckTasksWaitingTermination+0x50>)
 8003446:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003448:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <prvCheckTasksWaitingTermination+0x54>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3b01      	subs	r3, #1
 800344e:	4a09      	ldr	r2, [pc, #36]	; (8003474 <prvCheckTasksWaitingTermination+0x54>)
 8003450:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003452:	f000 fc0d 	bl	8003c70 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f80e 	bl	8003478 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <prvCheckTasksWaitingTermination+0x54>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e1      	bne.n	8003428 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000144 	.word	0x20000144
 8003470:	20000170 	.word	0x20000170
 8003474:	20000158 	.word	0x20000158

08003478 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fd83 	bl	8003f90 <vPortFree>
                vPortFree( pxTCB );
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fd80 	bl	8003f90 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <prvResetNextTaskUnblockTime+0x30>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d104      	bne.n	80034b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <prvResetNextTaskUnblockTime+0x34>)
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80034ae:	e005      	b.n	80034bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <prvResetNextTaskUnblockTime+0x30>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <prvResetNextTaskUnblockTime+0x34>)
 80034ba:	6013      	str	r3, [r2, #0]
}
 80034bc:	bf00      	nop
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000128 	.word	0x20000128
 80034cc:	20000190 	.word	0x20000190

080034d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <xTaskGetCurrentTaskHandle+0x1c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	607b      	str	r3, [r7, #4]

        return xReturn;
 80034dc:	687b      	ldr	r3, [r7, #4]
    }
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000098 	.word	0x20000098

080034f0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d009      	beq.n	8003518 <xTaskGenericNotifyWait+0x28>
 8003504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003508:	f383 8811 	msr	BASEPRI, r3
 800350c:	f3bf 8f6f 	isb	sy
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	e7fe      	b.n	8003516 <xTaskGenericNotifyWait+0x26>

        taskENTER_CRITICAL();
 8003518:	f000 fb7c 	bl	8003c14 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800351c:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <xTaskGenericNotifyWait+0x108>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	3354      	adds	r3, #84	; 0x54
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d022      	beq.n	8003574 <xTaskGenericNotifyWait+0x84>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800352e:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <xTaskGenericNotifyWait+0x108>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	3214      	adds	r2, #20
 8003536:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	43d2      	mvns	r2, r2
 800353e:	4011      	ands	r1, r2
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	3214      	adds	r2, #20
 8003544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003548:	4b2b      	ldr	r3, [pc, #172]	; (80035f8 <xTaskGenericNotifyWait+0x108>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	3354      	adds	r3, #84	; 0x54
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00b      	beq.n	8003574 <xTaskGenericNotifyWait+0x84>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800355c:	2101      	movs	r1, #1
 800355e:	6a38      	ldr	r0, [r7, #32]
 8003560:	f000 f93c 	bl	80037dc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003564:	4b25      	ldr	r3, [pc, #148]	; (80035fc <xTaskGenericNotifyWait+0x10c>)
 8003566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003574:	f000 fb7c 	bl	8003c70 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003578:	f000 fb4c 	bl	8003c14 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	4613      	mov	r3, r2
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	2040      	movs	r0, #64	; 0x40
 800358a:	f001 fc57 	bl	8004e3c <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d007      	beq.n	80035a4 <xTaskGenericNotifyWait+0xb4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <xTaskGenericNotifyWait+0x108>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	3214      	adds	r2, #20
 800359c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <xTaskGenericNotifyWait+0x108>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	3354      	adds	r3, #84	; 0x54
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d002      	beq.n	80035bc <xTaskGenericNotifyWait+0xcc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	e00e      	b.n	80035da <xTaskGenericNotifyWait+0xea>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80035bc:	4b0e      	ldr	r3, [pc, #56]	; (80035f8 <xTaskGenericNotifyWait+0x108>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	3214      	adds	r2, #20
 80035c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	43d2      	mvns	r2, r2
 80035cc:	4011      	ands	r1, r2
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	3214      	adds	r2, #20
 80035d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80035d6:	2301      	movs	r3, #1
 80035d8:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80035da:	4b07      	ldr	r3, [pc, #28]	; (80035f8 <xTaskGenericNotifyWait+0x108>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	3354      	adds	r3, #84	; 0x54
 80035e4:	2200      	movs	r2, #0
 80035e6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80035e8:	f000 fb42 	bl	8003c70 <vPortExitCritical>

        return xReturn;
 80035ec:	697b      	ldr	r3, [r7, #20]
    }
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000098 	.word	0x20000098
 80035fc:	e000ed04 	.word	0xe000ed04

08003600 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003600:	b580      	push	{r7, lr}
 8003602:	b08e      	sub	sp, #56	; 0x38
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800360e:	2301      	movs	r3, #1
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <xTaskGenericNotify+0x2c>
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	e7fe      	b.n	800362a <xTaskGenericNotify+0x2a>
        configASSERT( xTaskToNotify );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <xTaskGenericNotify+0x46>
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	e7fe      	b.n	8003644 <xTaskGenericNotify+0x44>
        pxTCB = xTaskToNotify;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800364a:	f000 fae3 	bl	8003c14 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800364e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003650:	2b00      	cmp	r3, #0
 8003652:	d006      	beq.n	8003662 <xTaskGenericNotify+0x62>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	3214      	adds	r2, #20
 800365a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003660:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	4413      	add	r3, r2
 8003668:	3354      	adds	r3, #84	; 0x54
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4413      	add	r3, r2
 8003676:	3354      	adds	r3, #84	; 0x54
 8003678:	2202      	movs	r2, #2
 800367a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	2b04      	cmp	r3, #4
 8003680:	d83b      	bhi.n	80036fa <xTaskGenericNotify+0xfa>
 8003682:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <xTaskGenericNotify+0x88>)
 8003684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003688:	08003717 	.word	0x08003717
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036b9 	.word	0x080036b9
 8003694:	080036d1 	.word	0x080036d1
 8003698:	080036df 	.word	0x080036df
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	3214      	adds	r2, #20
 80036a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	ea42 0103 	orr.w	r1, r2, r3
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	3214      	adds	r2, #20
 80036b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80036b6:	e031      	b.n	800371c <xTaskGenericNotify+0x11c>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	3214      	adds	r2, #20
 80036be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	3214      	adds	r2, #20
 80036ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80036ce:	e025      	b.n	800371c <xTaskGenericNotify+0x11c>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80036d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	3214      	adds	r2, #20
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80036dc:	e01e      	b.n	800371c <xTaskGenericNotify+0x11c>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80036de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d006      	beq.n	80036f4 <xTaskGenericNotify+0xf4>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	3214      	adds	r2, #20
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80036f2:	e013      	b.n	800371c <xTaskGenericNotify+0x11c>
                        xReturn = pdFAIL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80036f8:	e010      	b.n	800371c <xTaskGenericNotify+0x11c>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80036fa:	4b33      	ldr	r3, [pc, #204]	; (80037c8 <xTaskGenericNotify+0x1c8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <xTaskGenericNotify+0x11a>
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	61bb      	str	r3, [r7, #24]
 8003714:	e7fe      	b.n	8003714 <xTaskGenericNotify+0x114>
                    break;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <xTaskGenericNotify+0x11c>

                    break;
 800371a:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	4618      	mov	r0, r3
 8003720:	f002 f87e 	bl	8005820 <SEGGER_SYSVIEW_ShrinkId>
 8003724:	4601      	mov	r1, r0
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	203e      	movs	r0, #62	; 0x3e
 8003732:	f001 fb83 	bl	8004e3c <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800373a:	2b01      	cmp	r3, #1
 800373c:	d13c      	bne.n	80037b8 <xTaskGenericNotify+0x1b8>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	3304      	adds	r3, #4
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe febe 	bl	80024c4 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	4618      	mov	r0, r3
 800374c:	f001 ffc6 	bl	80056dc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	2201      	movs	r2, #1
 8003756:	409a      	lsls	r2, r3
 8003758:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <xTaskGenericNotify+0x1cc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4313      	orrs	r3, r2
 800375e:	4a1b      	ldr	r2, [pc, #108]	; (80037cc <xTaskGenericNotify+0x1cc>)
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <xTaskGenericNotify+0x1d0>)
 8003770:	441a      	add	r2, r3
 8003772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003774:	3304      	adds	r3, #4
 8003776:	4619      	mov	r1, r3
 8003778:	4610      	mov	r0, r2
 800377a:	f7fe fe46 	bl	800240a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800377e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	2b00      	cmp	r3, #0
 8003784:	d009      	beq.n	800379a <xTaskGenericNotify+0x19a>
 8003786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e7fe      	b.n	8003798 <xTaskGenericNotify+0x198>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379e:	4b0d      	ldr	r3, [pc, #52]	; (80037d4 <xTaskGenericNotify+0x1d4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d907      	bls.n	80037b8 <xTaskGenericNotify+0x1b8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <xTaskGenericNotify+0x1d8>)
 80037aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80037b8:	f000 fa5a 	bl	8003c70 <vPortExitCritical>

        return xReturn;
 80037bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80037be:	4618      	mov	r0, r3
 80037c0:	3730      	adds	r7, #48	; 0x30
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000174 	.word	0x20000174
 80037cc:	20000178 	.word	0x20000178
 80037d0:	2000009c 	.word	0x2000009c
 80037d4:	20000098 	.word	0x20000098
 80037d8:	e000ed04 	.word	0xe000ed04

080037dc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80037e6:	4b32      	ldr	r3, [pc, #200]	; (80038b0 <prvAddCurrentTaskToDelayedList+0xd4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037ec:	4b31      	ldr	r3, [pc, #196]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3304      	adds	r3, #4
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe fe66 	bl	80024c4 <uxListRemove>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037fe:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	2201      	movs	r2, #1
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43da      	mvns	r2, r3
 800380c:	4b2a      	ldr	r3, [pc, #168]	; (80038b8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4013      	ands	r3, r2
 8003812:	4a29      	ldr	r2, [pc, #164]	; (80038b8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003814:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800381c:	d110      	bne.n	8003840 <prvAddCurrentTaskToDelayedList+0x64>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003824:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	211b      	movs	r1, #27
 800382a:	4618      	mov	r0, r3
 800382c:	f001 ff98 	bl	8005760 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003830:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3304      	adds	r3, #4
 8003836:	4619      	mov	r1, r3
 8003838:	4820      	ldr	r0, [pc, #128]	; (80038bc <prvAddCurrentTaskToDelayedList+0xe0>)
 800383a:	f7fe fde6 	bl	800240a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800383e:	e032      	b.n	80038a6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003848:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	429a      	cmp	r2, r3
 8003856:	d20f      	bcs.n	8003878 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003858:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2104      	movs	r1, #4
 800385e:	4618      	mov	r0, r3
 8003860:	f001 ff7e 	bl	8005760 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003864:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3304      	adds	r3, #4
 800386e:	4619      	mov	r1, r3
 8003870:	4610      	mov	r0, r2
 8003872:	f7fe fdee 	bl	8002452 <vListInsert>
}
 8003876:	e016      	b.n	80038a6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003878:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2104      	movs	r1, #4
 800387e:	4618      	mov	r0, r3
 8003880:	f001 ff6e 	bl	8005760 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003884:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b0a      	ldr	r3, [pc, #40]	; (80038b4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3304      	adds	r3, #4
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f7fe fdde 	bl	8002452 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003896:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	429a      	cmp	r2, r3
 800389e:	d202      	bcs.n	80038a6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80038a0:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <prvAddCurrentTaskToDelayedList+0xec>)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	6013      	str	r3, [r2, #0]
}
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000174 	.word	0x20000174
 80038b4:	20000098 	.word	0x20000098
 80038b8:	20000178 	.word	0x20000178
 80038bc:	2000015c 	.word	0x2000015c
 80038c0:	2000012c 	.word	0x2000012c
 80038c4:	20000128 	.word	0x20000128
 80038c8:	20000190 	.word	0x20000190

080038cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	3b04      	subs	r3, #4
 80038dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	3b04      	subs	r3, #4
 80038ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f023 0201 	bic.w	r2, r3, #1
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3b04      	subs	r3, #4
 80038fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80038fc:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <pxPortInitialiseStack+0x64>)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3b14      	subs	r3, #20
 8003906:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	3b04      	subs	r3, #4
 8003912:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f06f 0202 	mvn.w	r2, #2
 800391a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3b20      	subs	r3, #32
 8003920:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003922:	68fb      	ldr	r3, [r7, #12]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	08003935 	.word	0x08003935

08003934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800393e:	4b11      	ldr	r3, [pc, #68]	; (8003984 <prvTaskExitError+0x50>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003946:	d009      	beq.n	800395c <prvTaskExitError+0x28>
 8003948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	e7fe      	b.n	800395a <prvTaskExitError+0x26>
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800396e:	bf00      	nop
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d0fc      	beq.n	8003970 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003976:	bf00      	nop
 8003978:	3714      	adds	r7, #20
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000010 	.word	0x20000010
	...

08003990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003990:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <pxCurrentTCBConst2>)
 8003992:	6819      	ldr	r1, [r3, #0]
 8003994:	6808      	ldr	r0, [r1, #0]
 8003996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800399a:	f380 8809 	msr	PSP, r0
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f04f 0000 	mov.w	r0, #0
 80039a6:	f380 8811 	msr	BASEPRI, r0
 80039aa:	4770      	bx	lr
 80039ac:	f3af 8000 	nop.w

080039b0 <pxCurrentTCBConst2>:
 80039b0:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop

080039b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80039b8:	4808      	ldr	r0, [pc, #32]	; (80039dc <prvPortStartFirstTask+0x24>)
 80039ba:	6800      	ldr	r0, [r0, #0]
 80039bc:	6800      	ldr	r0, [r0, #0]
 80039be:	f380 8808 	msr	MSP, r0
 80039c2:	f04f 0000 	mov.w	r0, #0
 80039c6:	f380 8814 	msr	CONTROL, r0
 80039ca:	b662      	cpsie	i
 80039cc:	b661      	cpsie	f
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	df00      	svc	0
 80039d8:	bf00      	nop
 80039da:	0000      	.short	0x0000
 80039dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop

080039e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80039ea:	4b44      	ldr	r3, [pc, #272]	; (8003afc <xPortStartScheduler+0x118>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a44      	ldr	r2, [pc, #272]	; (8003b00 <xPortStartScheduler+0x11c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d109      	bne.n	8003a08 <xPortStartScheduler+0x24>
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	e7fe      	b.n	8003a06 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a08:	4b3c      	ldr	r3, [pc, #240]	; (8003afc <xPortStartScheduler+0x118>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a3d      	ldr	r2, [pc, #244]	; (8003b04 <xPortStartScheduler+0x120>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d109      	bne.n	8003a26 <xPortStartScheduler+0x42>
 8003a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	e7fe      	b.n	8003a24 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a26:	4b38      	ldr	r3, [pc, #224]	; (8003b08 <xPortStartScheduler+0x124>)
 8003a28:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	22ff      	movs	r2, #255	; 0xff
 8003a36:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	4b30      	ldr	r3, [pc, #192]	; (8003b0c <xPortStartScheduler+0x128>)
 8003a4c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a4e:	4b30      	ldr	r3, [pc, #192]	; (8003b10 <xPortStartScheduler+0x12c>)
 8003a50:	2207      	movs	r2, #7
 8003a52:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a54:	e009      	b.n	8003a6a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8003a56:	4b2e      	ldr	r3, [pc, #184]	; (8003b10 <xPortStartScheduler+0x12c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <xPortStartScheduler+0x12c>)
 8003a5e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a72:	2b80      	cmp	r3, #128	; 0x80
 8003a74:	d0ef      	beq.n	8003a56 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a76:	4b26      	ldr	r3, [pc, #152]	; (8003b10 <xPortStartScheduler+0x12c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1c3 0307 	rsb	r3, r3, #7
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d009      	beq.n	8003a96 <xPortStartScheduler+0xb2>
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	60bb      	str	r3, [r7, #8]
 8003a94:	e7fe      	b.n	8003a94 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a96:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <xPortStartScheduler+0x12c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <xPortStartScheduler+0x12c>)
 8003a9e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <xPortStartScheduler+0x12c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003aa8:	4a19      	ldr	r2, [pc, #100]	; (8003b10 <xPortStartScheduler+0x12c>)
 8003aaa:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003ab4:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <xPortStartScheduler+0x130>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <xPortStartScheduler+0x130>)
 8003aba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003abe:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <xPortStartScheduler+0x130>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <xPortStartScheduler+0x130>)
 8003ac6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003aca:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003acc:	f000 f954 	bl	8003d78 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003ad0:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <xPortStartScheduler+0x134>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003ad6:	f000 f973 	bl	8003dc0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <xPortStartScheduler+0x138>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a0f      	ldr	r2, [pc, #60]	; (8003b1c <xPortStartScheduler+0x138>)
 8003ae0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ae4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003ae6:	f7ff ff67 	bl	80039b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003aea:	f7ff fb71 	bl	80031d0 <vTaskSwitchContext>
    prvTaskExitError();
 8003aee:	f7ff ff21 	bl	8003934 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	e000ed00 	.word	0xe000ed00
 8003b00:	410fc271 	.word	0x410fc271
 8003b04:	410fc270 	.word	0x410fc270
 8003b08:	e000e400 	.word	0xe000e400
 8003b0c:	2000019c 	.word	0x2000019c
 8003b10:	200001a0 	.word	0x200001a0
 8003b14:	e000ed20 	.word	0xe000ed20
 8003b18:	20000010 	.word	0x20000010
 8003b1c:	e000ef34 	.word	0xe000ef34

08003b20 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b26:	4b35      	ldr	r3, [pc, #212]	; (8003bfc <vInitPrioGroupValue+0xdc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a35      	ldr	r2, [pc, #212]	; (8003c00 <vInitPrioGroupValue+0xe0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d109      	bne.n	8003b44 <vInitPrioGroupValue+0x24>
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e7fe      	b.n	8003b42 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b44:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <vInitPrioGroupValue+0xdc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2e      	ldr	r2, [pc, #184]	; (8003c04 <vInitPrioGroupValue+0xe4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d109      	bne.n	8003b62 <vInitPrioGroupValue+0x42>
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	e7fe      	b.n	8003b60 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b62:	4b29      	ldr	r3, [pc, #164]	; (8003c08 <vInitPrioGroupValue+0xe8>)
 8003b64:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	22ff      	movs	r2, #255	; 0xff
 8003b72:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <vInitPrioGroupValue+0xec>)
 8003b88:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b8a:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <vInitPrioGroupValue+0xf0>)
 8003b8c:	2207      	movs	r2, #7
 8003b8e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b90:	e009      	b.n	8003ba6 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8003b92:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <vInitPrioGroupValue+0xf0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	4a1d      	ldr	r2, [pc, #116]	; (8003c10 <vInitPrioGroupValue+0xf0>)
 8003b9a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ba6:	78fb      	ldrb	r3, [r7, #3]
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bae:	2b80      	cmp	r3, #128	; 0x80
 8003bb0:	d0ef      	beq.n	8003b92 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bb2:	4b17      	ldr	r3, [pc, #92]	; (8003c10 <vInitPrioGroupValue+0xf0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f1c3 0307 	rsb	r3, r3, #7
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d009      	beq.n	8003bd2 <vInitPrioGroupValue+0xb2>
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	e7fe      	b.n	8003bd0 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bd2:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <vInitPrioGroupValue+0xf0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	4a0d      	ldr	r2, [pc, #52]	; (8003c10 <vInitPrioGroupValue+0xf0>)
 8003bda:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <vInitPrioGroupValue+0xf0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003be4:	4a0a      	ldr	r2, [pc, #40]	; (8003c10 <vInitPrioGroupValue+0xf0>)
 8003be6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003bf0:	bf00      	nop
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00
 8003c00:	410fc271 	.word	0x410fc271
 8003c04:	410fc270 	.word	0x410fc270
 8003c08:	e000e400 	.word	0xe000e400
 8003c0c:	2000019c 	.word	0x2000019c
 8003c10:	200001a0 	.word	0x200001a0

08003c14 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
 8003c2a:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	; (8003c68 <vPortEnterCritical+0x54>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3301      	adds	r3, #1
 8003c32:	4a0d      	ldr	r2, [pc, #52]	; (8003c68 <vPortEnterCritical+0x54>)
 8003c34:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003c36:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <vPortEnterCritical+0x54>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d10e      	bne.n	8003c5c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003c3e:	4b0b      	ldr	r3, [pc, #44]	; (8003c6c <vPortEnterCritical+0x58>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d009      	beq.n	8003c5c <vPortEnterCritical+0x48>
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	603b      	str	r3, [r7, #0]
 8003c5a:	e7fe      	b.n	8003c5a <vPortEnterCritical+0x46>
    }
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	20000010 	.word	0x20000010
 8003c6c:	e000ed04 	.word	0xe000ed04

08003c70 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003c76:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <vPortExitCritical+0x4c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d109      	bne.n	8003c92 <vPortExitCritical+0x22>
 8003c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c82:	f383 8811 	msr	BASEPRI, r3
 8003c86:	f3bf 8f6f 	isb	sy
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	607b      	str	r3, [r7, #4]
 8003c90:	e7fe      	b.n	8003c90 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <vPortExitCritical+0x4c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	4a08      	ldr	r2, [pc, #32]	; (8003cbc <vPortExitCritical+0x4c>)
 8003c9a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003c9c:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <vPortExitCritical+0x4c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d104      	bne.n	8003cae <vPortExitCritical+0x3e>
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	20000010 	.word	0x20000010

08003cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003cc0:	f3ef 8009 	mrs	r0, PSP
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <pxCurrentTCBConst>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	f01e 0f10 	tst.w	lr, #16
 8003cd0:	bf08      	it	eq
 8003cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cda:	6010      	str	r0, [r2, #0]
 8003cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ce4:	f380 8811 	msr	BASEPRI, r0
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f7ff fa6e 	bl	80031d0 <vTaskSwitchContext>
 8003cf4:	f04f 0000 	mov.w	r0, #0
 8003cf8:	f380 8811 	msr	BASEPRI, r0
 8003cfc:	bc09      	pop	{r0, r3}
 8003cfe:	6819      	ldr	r1, [r3, #0]
 8003d00:	6808      	ldr	r0, [r1, #0]
 8003d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d06:	f01e 0f10 	tst.w	lr, #16
 8003d0a:	bf08      	it	eq
 8003d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d10:	f380 8809 	msr	PSP, r0
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	f3af 8000 	nop.w

08003d20 <pxCurrentTCBConst>:
 8003d20:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop

08003d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
        __asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003d40:	f001 fbb2 	bl	80054a8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003d44:	f7ff f988 	bl	8003058 <xTaskIncrementTick>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d006      	beq.n	8003d5c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003d4e:	f001 fc09 	bl	8005564 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d52:	4b08      	ldr	r3, [pc, #32]	; (8003d74 <SysTick_Handler+0x4c>)
 8003d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e001      	b.n	8003d60 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 8003d5c:	f001 fbe6 	bl	800552c <SEGGER_SYSVIEW_RecordExitISR>
 8003d60:	2300      	movs	r3, #0
 8003d62:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	e000ed04 	.word	0xe000ed04

08003d78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <vPortSetupTimerInterrupt+0x34>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <vPortSetupTimerInterrupt+0x38>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <vPortSetupTimerInterrupt+0x3c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <vPortSetupTimerInterrupt+0x40>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	4a09      	ldr	r2, [pc, #36]	; (8003dbc <vPortSetupTimerInterrupt+0x44>)
 8003d96:	3b01      	subs	r3, #1
 8003d98:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003d9a:	4b04      	ldr	r3, [pc, #16]	; (8003dac <vPortSetupTimerInterrupt+0x34>)
 8003d9c:	2207      	movs	r2, #7
 8003d9e:	601a      	str	r2, [r3, #0]
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	e000e010 	.word	0xe000e010
 8003db0:	e000e018 	.word	0xe000e018
 8003db4:	20000000 	.word	0x20000000
 8003db8:	10624dd3 	.word	0x10624dd3
 8003dbc:	e000e014 	.word	0xe000e014

08003dc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003dc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003dd0 <vPortEnableVFP+0x10>
 8003dc4:	6801      	ldr	r1, [r0, #0]
 8003dc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003dca:	6001      	str	r1, [r0, #0]
 8003dcc:	4770      	bx	lr
 8003dce:	0000      	.short	0x0000
 8003dd0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop

08003dd8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08a      	sub	sp, #40	; 0x28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003de4:	f7ff f87a 	bl	8002edc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003de8:	4b63      	ldr	r3, [pc, #396]	; (8003f78 <pvPortMalloc+0x1a0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003df0:	f000 f92e 	bl	8004050 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003df4:	4b61      	ldr	r3, [pc, #388]	; (8003f7c <pvPortMalloc+0x1a4>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f040 80a5 	bne.w	8003f4c <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d02c      	beq.n	8003e62 <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003e08:	2208      	movs	r2, #8
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d226      	bcs.n	8003e62 <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8003e14:	2208      	movs	r2, #8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d020      	beq.n	8003e68 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f023 0307 	bic.w	r3, r3, #7
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d213      	bcs.n	8003e5c <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f023 0307 	bic.w	r3, r3, #7
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00f      	beq.n	8003e68 <pvPortMalloc+0x90>
        __asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e7fe      	b.n	8003e5a <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e60:	e002      	b.n	8003e68 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	e000      	b.n	8003e6a <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e68:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d06d      	beq.n	8003f4c <pvPortMalloc+0x174>
 8003e70:	4b43      	ldr	r3, [pc, #268]	; (8003f80 <pvPortMalloc+0x1a8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d868      	bhi.n	8003f4c <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003e7a:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <pvPortMalloc+0x1ac>)
 8003e7c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003e7e:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <pvPortMalloc+0x1ac>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e84:	e004      	b.n	8003e90 <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d903      	bls.n	8003ea2 <pvPortMalloc+0xca>
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f1      	bne.n	8003e86 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003ea2:	4b35      	ldr	r3, [pc, #212]	; (8003f78 <pvPortMalloc+0x1a0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d04f      	beq.n	8003f4c <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	4413      	add	r3, r2
 8003eb4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	1ad2      	subs	r2, r2, r3
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d91e      	bls.n	8003f0c <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d009      	beq.n	8003ef4 <pvPortMalloc+0x11c>
 8003ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee4:	f383 8811 	msr	BASEPRI, r3
 8003ee8:	f3bf 8f6f 	isb	sy
 8003eec:	f3bf 8f4f 	dsb	sy
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	e7fe      	b.n	8003ef2 <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	1ad2      	subs	r2, r2, r3
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f06:	69b8      	ldr	r0, [r7, #24]
 8003f08:	f000 f904 	bl	8004114 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f0c:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <pvPortMalloc+0x1a8>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <pvPortMalloc+0x1a8>)
 8003f18:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f1a:	4b19      	ldr	r3, [pc, #100]	; (8003f80 <pvPortMalloc+0x1a8>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <pvPortMalloc+0x1b0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d203      	bcs.n	8003f2e <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f26:	4b16      	ldr	r3, [pc, #88]	; (8003f80 <pvPortMalloc+0x1a8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a17      	ldr	r2, [pc, #92]	; (8003f88 <pvPortMalloc+0x1b0>)
 8003f2c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <pvPortMalloc+0x1a4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <pvPortMalloc+0x1b4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3301      	adds	r3, #1
 8003f48:	4a10      	ldr	r2, [pc, #64]	; (8003f8c <pvPortMalloc+0x1b4>)
 8003f4a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003f4c:	f7fe ffd4 	bl	8002ef8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <pvPortMalloc+0x196>
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	60fb      	str	r3, [r7, #12]
 8003f6c:	e7fe      	b.n	8003f6c <pvPortMalloc+0x194>
    return pvReturn;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3728      	adds	r7, #40	; 0x28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20012dac 	.word	0x20012dac
 8003f7c:	20012dc0 	.word	0x20012dc0
 8003f80:	20012db0 	.word	0x20012db0
 8003f84:	20012da4 	.word	0x20012da4
 8003f88:	20012db4 	.word	0x20012db4
 8003f8c:	20012db8 	.word	0x20012db8

08003f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d04b      	beq.n	800403a <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003fa2:	2308      	movs	r3, #8
 8003fa4:	425b      	negs	r3, r3
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4413      	add	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	4b23      	ldr	r3, [pc, #140]	; (8004044 <vPortFree+0xb4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <vPortFree+0x42>
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	e7fe      	b.n	8003fd0 <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <vPortFree+0x5e>
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	60bb      	str	r3, [r7, #8]
 8003fec:	e7fe      	b.n	8003fec <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	4b14      	ldr	r3, [pc, #80]	; (8004044 <vPortFree+0xb4>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01e      	beq.n	800403a <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d11a      	bne.n	800403a <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <vPortFree+0xb4>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	43db      	mvns	r3, r3
 800400e:	401a      	ands	r2, r3
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004014:	f7fe ff62 	bl	8002edc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <vPortFree+0xb8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4413      	add	r3, r2
 8004022:	4a09      	ldr	r2, [pc, #36]	; (8004048 <vPortFree+0xb8>)
 8004024:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004026:	6938      	ldr	r0, [r7, #16]
 8004028:	f000 f874 	bl	8004114 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800402c:	4b07      	ldr	r3, [pc, #28]	; (800404c <vPortFree+0xbc>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	4a06      	ldr	r2, [pc, #24]	; (800404c <vPortFree+0xbc>)
 8004034:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004036:	f7fe ff5f 	bl	8002ef8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800403a:	bf00      	nop
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20012dc0 	.word	0x20012dc0
 8004048:	20012db0 	.word	0x20012db0
 800404c:	20012dbc 	.word	0x20012dbc

08004050 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004056:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800405a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800405c:	4b27      	ldr	r3, [pc, #156]	; (80040fc <prvHeapInit+0xac>)
 800405e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00c      	beq.n	8004084 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3307      	adds	r3, #7
 800406e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 0307 	bic.w	r3, r3, #7
 8004076:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004078:	68ba      	ldr	r2, [r7, #8]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <prvHeapInit+0xac>)
 8004080:	4413      	add	r3, r2
 8004082:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004088:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <prvHeapInit+0xb0>)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800408e:	4b1c      	ldr	r3, [pc, #112]	; (8004100 <prvHeapInit+0xb0>)
 8004090:	2200      	movs	r2, #0
 8004092:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	4413      	add	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800409c:	2208      	movs	r2, #8
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f023 0307 	bic.w	r3, r3, #7
 80040aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <prvHeapInit+0xb4>)
 80040b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80040b2:	4b14      	ldr	r3, [pc, #80]	; (8004104 <prvHeapInit+0xb4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2200      	movs	r2, #0
 80040b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <prvHeapInit+0xb4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	1ad2      	subs	r2, r2, r3
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80040d0:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <prvHeapInit+0xb4>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <prvHeapInit+0xb8>)
 80040de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	4a09      	ldr	r2, [pc, #36]	; (800410c <prvHeapInit+0xbc>)
 80040e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <prvHeapInit+0xc0>)
 80040ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040ee:	601a      	str	r2, [r3, #0]
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	200001a4 	.word	0x200001a4
 8004100:	20012da4 	.word	0x20012da4
 8004104:	20012dac 	.word	0x20012dac
 8004108:	20012db4 	.word	0x20012db4
 800410c:	20012db0 	.word	0x20012db0
 8004110:	20012dc0 	.word	0x20012dc0

08004114 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800411c:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <prvInsertBlockIntoFreeList+0xac>)
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	e002      	b.n	8004128 <prvInsertBlockIntoFreeList+0x14>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	429a      	cmp	r2, r3
 8004130:	d8f7      	bhi.n	8004122 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4413      	add	r3, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	429a      	cmp	r2, r3
 8004142:	d108      	bne.n	8004156 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	441a      	add	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	441a      	add	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d118      	bne.n	800419c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d00d      	beq.n	8004192 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	441a      	add	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e008      	b.n	80041a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004192:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <prvInsertBlockIntoFreeList+0xb0>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e003      	b.n	80041a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d002      	beq.n	80041b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	20012da4 	.word	0x20012da4
 80041c4:	20012dac 	.word	0x20012dac

080041c8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80041d6:	2205      	movs	r2, #5
 80041d8:	492b      	ldr	r1, [pc, #172]	; (8004288 <SYSVIEW_AddTask+0xc0>)
 80041da:	68b8      	ldr	r0, [r7, #8]
 80041dc:	f001 fc8c 	bl	8005af8 <memcmp>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d04b      	beq.n	800427e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80041e6:	4b29      	ldr	r3, [pc, #164]	; (800428c <SYSVIEW_AddTask+0xc4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b07      	cmp	r3, #7
 80041ec:	d903      	bls.n	80041f6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80041ee:	4828      	ldr	r0, [pc, #160]	; (8004290 <SYSVIEW_AddTask+0xc8>)
 80041f0:	f001 fc02 	bl	80059f8 <SEGGER_SYSVIEW_Warn>
    return;
 80041f4:	e044      	b.n	8004280 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80041f6:	4b25      	ldr	r3, [pc, #148]	; (800428c <SYSVIEW_AddTask+0xc4>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4926      	ldr	r1, [pc, #152]	; (8004294 <SYSVIEW_AddTask+0xcc>)
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800420a:	4b20      	ldr	r3, [pc, #128]	; (800428c <SYSVIEW_AddTask+0xc4>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	4921      	ldr	r1, [pc, #132]	; (8004294 <SYSVIEW_AddTask+0xcc>)
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	3304      	adds	r3, #4
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004220:	4b1a      	ldr	r3, [pc, #104]	; (800428c <SYSVIEW_AddTask+0xc4>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	491b      	ldr	r1, [pc, #108]	; (8004294 <SYSVIEW_AddTask+0xcc>)
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	3308      	adds	r3, #8
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004236:	4b15      	ldr	r3, [pc, #84]	; (800428c <SYSVIEW_AddTask+0xc4>)
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4916      	ldr	r1, [pc, #88]	; (8004294 <SYSVIEW_AddTask+0xcc>)
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	330c      	adds	r3, #12
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800424c:	4b0f      	ldr	r3, [pc, #60]	; (800428c <SYSVIEW_AddTask+0xc4>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4910      	ldr	r1, [pc, #64]	; (8004294 <SYSVIEW_AddTask+0xcc>)
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	3310      	adds	r3, #16
 800425e:	69ba      	ldr	r2, [r7, #24]
 8004260:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <SYSVIEW_AddTask+0xc4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3301      	adds	r3, #1
 8004268:	4a08      	ldr	r2, [pc, #32]	; (800428c <SYSVIEW_AddTask+0xc4>)
 800426a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 f93a 	bl	80044f0 <SYSVIEW_SendTaskInfo>
 800427c:	e000      	b.n	8004280 <SYSVIEW_AddTask+0xb8>
    return;
 800427e:	bf00      	nop

}
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	08006424 	.word	0x08006424
 800428c:	20012e64 	.word	0x20012e64
 8004290:	0800642c 	.word	0x0800642c
 8004294:	20012dc4 	.word	0x20012dc4

08004298 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80042a6:	2205      	movs	r2, #5
 80042a8:	4930      	ldr	r1, [pc, #192]	; (800436c <SYSVIEW_UpdateTask+0xd4>)
 80042aa:	68b8      	ldr	r0, [r7, #8]
 80042ac:	f001 fc24 	bl	8005af8 <memcmp>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d056      	beq.n	8004364 <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e00d      	b.n	80042d8 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 80042bc:	492c      	ldr	r1, [pc, #176]	; (8004370 <SYSVIEW_UpdateTask+0xd8>)
 80042be:	697a      	ldr	r2, [r7, #20]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d008      	beq.n	80042e4 <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	3301      	adds	r3, #1
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	4b26      	ldr	r3, [pc, #152]	; (8004374 <SYSVIEW_UpdateTask+0xdc>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d3ec      	bcc.n	80042bc <SYSVIEW_UpdateTask+0x24>
 80042e2:	e000      	b.n	80042e6 <SYSVIEW_UpdateTask+0x4e>
      break;
 80042e4:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 80042e6:	4b23      	ldr	r3, [pc, #140]	; (8004374 <SYSVIEW_UpdateTask+0xdc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d230      	bcs.n	8004352 <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 80042f0:	491f      	ldr	r1, [pc, #124]	; (8004370 <SYSVIEW_UpdateTask+0xd8>)
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	3304      	adds	r3, #4
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 8004304:	491a      	ldr	r1, [pc, #104]	; (8004370 <SYSVIEW_UpdateTask+0xd8>)
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	3308      	adds	r3, #8
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8004318:	4915      	ldr	r1, [pc, #84]	; (8004370 <SYSVIEW_UpdateTask+0xd8>)
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	330c      	adds	r3, #12
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 800432c:	4910      	ldr	r1, [pc, #64]	; (8004370 <SYSVIEW_UpdateTask+0xd8>)
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	3310      	adds	r3, #16
 800433c:	6a3a      	ldr	r2, [r7, #32]
 800433e:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f8d0 	bl	80044f0 <SYSVIEW_SendTaskInfo>
 8004350:	e009      	b.n	8004366 <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	68b9      	ldr	r1, [r7, #8]
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7ff ff33 	bl	80041c8 <SYSVIEW_AddTask>
 8004362:	e000      	b.n	8004366 <SYSVIEW_UpdateTask+0xce>
    return;
 8004364:	bf00      	nop
  }
}
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	08006424 	.word	0x08006424
 8004370:	20012dc4 	.word	0x20012dc4
 8004374:	20012e64 	.word	0x20012e64

08004378 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004380:	4b59      	ldr	r3, [pc, #356]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80ab 	beq.w	80044e0 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	e00d      	b.n	80043ac <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004390:	4956      	ldr	r1, [pc, #344]	; (80044ec <SYSVIEW_DeleteTask+0x174>)
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d008      	beq.n	80043b8 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3301      	adds	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	4b4e      	ldr	r3, [pc, #312]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d3ec      	bcc.n	8004390 <SYSVIEW_DeleteTask+0x18>
 80043b6:	e000      	b.n	80043ba <SYSVIEW_DeleteTask+0x42>
      break;
 80043b8:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 80043ba:	4b4b      	ldr	r3, [pc, #300]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3b01      	subs	r3, #1
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d111      	bne.n	80043ea <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4a46      	ldr	r2, [pc, #280]	; (80044ec <SYSVIEW_DeleteTask+0x174>)
 80043d2:	4413      	add	r3, r2
 80043d4:	2214      	movs	r2, #20
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 fba7 	bl	8005b2c <memset>
    _NumTasks--;
 80043de:	4b42      	ldr	r3, [pc, #264]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	4a40      	ldr	r2, [pc, #256]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	e07b      	b.n	80044e2 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80043ea:	4b3f      	ldr	r3, [pc, #252]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d276      	bcs.n	80044e2 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80043f4:	4b3c      	ldr	r3, [pc, #240]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	1e5a      	subs	r2, r3, #1
 80043fa:	493c      	ldr	r1, [pc, #240]	; (80044ec <SYSVIEW_DeleteTask+0x174>)
 80043fc:	4613      	mov	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	6819      	ldr	r1, [r3, #0]
 8004408:	4838      	ldr	r0, [pc, #224]	; (80044ec <SYSVIEW_DeleteTask+0x174>)
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4403      	add	r3, r0
 8004416:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004418:	4b33      	ldr	r3, [pc, #204]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	1e5a      	subs	r2, r3, #1
 800441e:	4933      	ldr	r1, [pc, #204]	; (80044ec <SYSVIEW_DeleteTask+0x174>)
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	3304      	adds	r3, #4
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	482f      	ldr	r0, [pc, #188]	; (80044ec <SYSVIEW_DeleteTask+0x174>)
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4403      	add	r3, r0
 800443c:	3304      	adds	r3, #4
 800443e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004440:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	1e5a      	subs	r2, r3, #1
 8004446:	4929      	ldr	r1, [pc, #164]	; (80044ec <SYSVIEW_DeleteTask+0x174>)
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3308      	adds	r3, #8
 8004454:	6819      	ldr	r1, [r3, #0]
 8004456:	4825      	ldr	r0, [pc, #148]	; (80044ec <SYSVIEW_DeleteTask+0x174>)
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4403      	add	r3, r0
 8004464:	3308      	adds	r3, #8
 8004466:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004468:	4b1f      	ldr	r3, [pc, #124]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	1e5a      	subs	r2, r3, #1
 800446e:	491f      	ldr	r1, [pc, #124]	; (80044ec <SYSVIEW_DeleteTask+0x174>)
 8004470:	4613      	mov	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	330c      	adds	r3, #12
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	481b      	ldr	r0, [pc, #108]	; (80044ec <SYSVIEW_DeleteTask+0x174>)
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4613      	mov	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4403      	add	r3, r0
 800448c:	330c      	adds	r3, #12
 800448e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004490:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	1e5a      	subs	r2, r3, #1
 8004496:	4915      	ldr	r1, [pc, #84]	; (80044ec <SYSVIEW_DeleteTask+0x174>)
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	3310      	adds	r3, #16
 80044a4:	6819      	ldr	r1, [r3, #0]
 80044a6:	4811      	ldr	r0, [pc, #68]	; (80044ec <SYSVIEW_DeleteTask+0x174>)
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4613      	mov	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4403      	add	r3, r0
 80044b4:	3310      	adds	r3, #16
 80044b6:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	1e5a      	subs	r2, r3, #1
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <SYSVIEW_DeleteTask+0x174>)
 80044c8:	4413      	add	r3, r2
 80044ca:	2214      	movs	r2, #20
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 fb2c 	bl	8005b2c <memset>
    _NumTasks--;
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3b01      	subs	r3, #1
 80044da:	4a03      	ldr	r2, [pc, #12]	; (80044e8 <SYSVIEW_DeleteTask+0x170>)
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e000      	b.n	80044e2 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80044e0:	bf00      	nop
  }
}
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20012e64 	.word	0x20012e64
 80044ec:	20012dc4 	.word	0x20012dc4

080044f0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	; 0x28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80044fe:	f107 0314 	add.w	r3, r7, #20
 8004502:	2214      	movs	r2, #20
 8004504:	2100      	movs	r1, #0
 8004506:	4618      	mov	r0, r3
 8004508:	f001 fb10 	bl	8005b2c <memset>
  TaskInfo.TaskID     = TaskID;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004520:	f107 0314 	add.w	r3, r7, #20
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fe97 	bl	8005258 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800452a:	bf00      	nop
 800452c:	3728      	adds	r7, #40	; 0x28
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800453a:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <USART2_IRQHandler+0x80>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	d011      	beq.n	800456e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800454a:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <USART2_IRQHandler+0x84>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f003 030b 	and.w	r3, r3, #11
 8004558:	2b00      	cmp	r3, #0
 800455a:	d108      	bne.n	800456e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 800455c:	4b17      	ldr	r3, [pc, #92]	; (80045bc <USART2_IRQHandler+0x88>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004564:	4b15      	ldr	r3, [pc, #84]	; (80045bc <USART2_IRQHandler+0x88>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	79fa      	ldrb	r2, [r7, #7]
 800456a:	4610      	mov	r0, r2
 800456c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01a      	beq.n	80045ae <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004578:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <USART2_IRQHandler+0x8c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d015      	beq.n	80045ac <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <USART2_IRQHandler+0x8c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	1dfa      	adds	r2, r7, #7
 8004586:	4610      	mov	r0, r2
 8004588:	4798      	blx	r3
 800458a:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <USART2_IRQHandler+0x90>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a0b      	ldr	r2, [pc, #44]	; (80045c4 <USART2_IRQHandler+0x90>)
 8004598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	e006      	b.n	80045ae <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <USART2_IRQHandler+0x80>)
 80045a2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80045a4:	79fa      	ldrb	r2, [r7, #7]
 80045a6:	4b04      	ldr	r3, [pc, #16]	; (80045b8 <USART2_IRQHandler+0x84>)
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	e000      	b.n	80045ae <USART2_IRQHandler+0x7a>
      return;
 80045ac:	bf00      	nop
    }
  }
}
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40004400 	.word	0x40004400
 80045b8:	40004404 	.word	0x40004404
 80045bc:	20012e68 	.word	0x20012e68
 80045c0:	20012e6c 	.word	0x20012e6c
 80045c4:	4000440c 	.word	0x4000440c

080045c8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a04      	ldr	r2, [pc, #16]	; (80045e4 <HIF_UART_EnableTXEInterrupt+0x1c>)
 80045d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045d6:	6013      	str	r3, [r2, #0]
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	4000440c 	.word	0x4000440c

080045e8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80045ee:	4b24      	ldr	r3, [pc, #144]	; (8004680 <_DoInit+0x98>)
 80045f0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2203      	movs	r2, #3
 80045f6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2203      	movs	r2, #3
 80045fc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a20      	ldr	r2, [pc, #128]	; (8004684 <_DoInit+0x9c>)
 8004602:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a20      	ldr	r2, [pc, #128]	; (8004688 <_DoInit+0xa0>)
 8004608:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004610:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a17      	ldr	r2, [pc, #92]	; (8004684 <_DoInit+0x9c>)
 8004628:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a17      	ldr	r2, [pc, #92]	; (800468c <_DoInit+0xa4>)
 800462e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2210      	movs	r2, #16
 8004634:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3307      	adds	r3, #7
 800464c:	4a10      	ldr	r2, [pc, #64]	; (8004690 <_DoInit+0xa8>)
 800464e:	6810      	ldr	r0, [r2, #0]
 8004650:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004652:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a0e      	ldr	r2, [pc, #56]	; (8004694 <_DoInit+0xac>)
 800465a:	6810      	ldr	r0, [r2, #0]
 800465c:	6018      	str	r0, [r3, #0]
 800465e:	8891      	ldrh	r1, [r2, #4]
 8004660:	7992      	ldrb	r2, [r2, #6]
 8004662:	8099      	strh	r1, [r3, #4]
 8004664:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004666:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004670:	f3bf 8f5f 	dmb	sy
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	20013418 	.word	0x20013418
 8004684:	0800647c 	.word	0x0800647c
 8004688:	20012e70 	.word	0x20012e70
 800468c:	20013270 	.word	0x20013270
 8004690:	08006488 	.word	0x08006488
 8004694:	0800648c 	.word	0x0800648c

08004698 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b08c      	sub	sp, #48	; 0x30
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80046a4:	4b3e      	ldr	r3, [pc, #248]	; (80047a0 <SEGGER_RTT_ReadNoLock+0x108>)
 80046a6:	623b      	str	r3, [r7, #32]
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <SEGGER_RTT_ReadNoLock+0x1e>
 80046b2:	f7ff ff99 	bl	80045e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4613      	mov	r3, r2
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4413      	add	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	3360      	adds	r3, #96	; 0x60
 80046c2:	4a37      	ldr	r2, [pc, #220]	; (80047a0 <SEGGER_RTT_ReadNoLock+0x108>)
 80046c4:	4413      	add	r3, r2
 80046c6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80046d8:	2300      	movs	r3, #0
 80046da:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80046dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d92b      	bls.n	800473c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	4293      	cmp	r3, r2
 80046f4:	bf28      	it	cs
 80046f6:	4613      	movcs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	4413      	add	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	6939      	ldr	r1, [r7, #16]
 8004708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800470a:	f001 fa04 	bl	8005b16 <memcpy>
    NumBytesRead += NumBytesRem;
 800470e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4413      	add	r3, r2
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	4413      	add	r3, r2
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4413      	add	r3, r2
 800472c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004734:	429a      	cmp	r2, r3
 8004736:	d101      	bne.n	800473c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004738:	2300      	movs	r3, #0
 800473a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4293      	cmp	r3, r2
 800474a:	bf28      	it	cs
 800474c:	4613      	movcs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d019      	beq.n	800478a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	4413      	add	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	6939      	ldr	r1, [r7, #16]
 8004764:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004766:	f001 f9d6 	bl	8005b16 <memcpy>
    NumBytesRead += NumBytesRem;
 800476a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	4413      	add	r3, r2
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	4413      	add	r3, r2
 8004778:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	4413      	add	r3, r2
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004794:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004798:	4618      	mov	r0, r3
 800479a:	3730      	adds	r7, #48	; 0x30
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20013418 	.word	0x20013418

080047a4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80047b4:	e002      	b.n	80047bc <_EncodeStr+0x18>
    Len++;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3301      	adds	r3, #1
 80047ba:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4413      	add	r3, r2
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1f6      	bne.n	80047b6 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d901      	bls.n	80047d4 <_EncodeStr+0x30>
    Len = Limit;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	2bfe      	cmp	r3, #254	; 0xfe
 80047d8:	d806      	bhi.n	80047e8 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	60fa      	str	r2, [r7, #12]
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e011      	b.n	800480c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	60fa      	str	r2, [r7, #12]
 80047ee:	22ff      	movs	r2, #255	; 0xff
 80047f0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	60fa      	str	r2, [r7, #12]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	0a19      	lsrs	r1, r3, #8
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	60fa      	str	r2, [r7, #12]
 8004808:	b2ca      	uxtb	r2, r1
 800480a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004810:	e00a      	b.n	8004828 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	1c53      	adds	r3, r2, #1
 8004816:	60bb      	str	r3, [r7, #8]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	1c59      	adds	r1, r3, #1
 800481c:	60f9      	str	r1, [r7, #12]
 800481e:	7812      	ldrb	r2, [r2, #0]
 8004820:	701a      	strb	r2, [r3, #0]
    n++;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	3301      	adds	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	429a      	cmp	r2, r3
 800482e:	d3f0      	bcc.n	8004812 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004830:	68fb      	ldr	r3, [r7, #12]
}
 8004832:	4618      	mov	r0, r3
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
}
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
	...

08004858 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800485e:	4b33      	ldr	r3, [pc, #204]	; (800492c <_HandleIncomingPacket+0xd4>)
 8004860:	7e1b      	ldrb	r3, [r3, #24]
 8004862:	4618      	mov	r0, r3
 8004864:	1cfb      	adds	r3, r7, #3
 8004866:	2201      	movs	r2, #1
 8004868:	4619      	mov	r1, r3
 800486a:	f7ff ff15 	bl	8004698 <SEGGER_RTT_ReadNoLock>
 800486e:	4603      	mov	r3, r0
 8004870:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	dd4d      	ble.n	8004914 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	2b05      	cmp	r3, #5
 800487c:	d022      	beq.n	80048c4 <_HandleIncomingPacket+0x6c>
 800487e:	2b05      	cmp	r3, #5
 8004880:	dc0b      	bgt.n	800489a <_HandleIncomingPacket+0x42>
 8004882:	2b02      	cmp	r3, #2
 8004884:	d015      	beq.n	80048b2 <_HandleIncomingPacket+0x5a>
 8004886:	2b02      	cmp	r3, #2
 8004888:	dc02      	bgt.n	8004890 <_HandleIncomingPacket+0x38>
 800488a:	2b01      	cmp	r3, #1
 800488c:	d00e      	beq.n	80048ac <_HandleIncomingPacket+0x54>
 800488e:	e034      	b.n	80048fa <_HandleIncomingPacket+0xa2>
 8004890:	2b03      	cmp	r3, #3
 8004892:	d011      	beq.n	80048b8 <_HandleIncomingPacket+0x60>
 8004894:	2b04      	cmp	r3, #4
 8004896:	d012      	beq.n	80048be <_HandleIncomingPacket+0x66>
 8004898:	e02f      	b.n	80048fa <_HandleIncomingPacket+0xa2>
 800489a:	2b07      	cmp	r3, #7
 800489c:	d018      	beq.n	80048d0 <_HandleIncomingPacket+0x78>
 800489e:	2b07      	cmp	r3, #7
 80048a0:	db13      	blt.n	80048ca <_HandleIncomingPacket+0x72>
 80048a2:	2b7f      	cmp	r3, #127	; 0x7f
 80048a4:	d038      	beq.n	8004918 <_HandleIncomingPacket+0xc0>
 80048a6:	2b80      	cmp	r3, #128	; 0x80
 80048a8:	d015      	beq.n	80048d6 <_HandleIncomingPacket+0x7e>
 80048aa:	e026      	b.n	80048fa <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80048ac:	f000 fb58 	bl	8004f60 <SEGGER_SYSVIEW_Start>
      break;
 80048b0:	e037      	b.n	8004922 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80048b2:	f000 fc11 	bl	80050d8 <SEGGER_SYSVIEW_Stop>
      break;
 80048b6:	e034      	b.n	8004922 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80048b8:	f000 fdc6 	bl	8005448 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80048bc:	e031      	b.n	8004922 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80048be:	f000 fdaf 	bl	8005420 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80048c2:	e02e      	b.n	8004922 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80048c4:	f000 fc2e 	bl	8005124 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80048c8:	e02b      	b.n	8004922 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80048ca:	f001 f857 	bl	800597c <SEGGER_SYSVIEW_SendNumModules>
      break;
 80048ce:	e028      	b.n	8004922 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80048d0:	f001 f836 	bl	8005940 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80048d4:	e025      	b.n	8004922 <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80048d6:	4b15      	ldr	r3, [pc, #84]	; (800492c <_HandleIncomingPacket+0xd4>)
 80048d8:	7e1b      	ldrb	r3, [r3, #24]
 80048da:	4618      	mov	r0, r3
 80048dc:	1cfb      	adds	r3, r7, #3
 80048de:	2201      	movs	r2, #1
 80048e0:	4619      	mov	r1, r3
 80048e2:	f7ff fed9 	bl	8004698 <SEGGER_RTT_ReadNoLock>
 80048e6:	4603      	mov	r3, r0
 80048e8:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	dd15      	ble.n	800491c <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80048f0:	78fb      	ldrb	r3, [r7, #3]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 ffa4 	bl	8005840 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80048f8:	e010      	b.n	800491c <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	da0e      	bge.n	8004920 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <_HandleIncomingPacket+0xd4>)
 8004904:	7e1b      	ldrb	r3, [r3, #24]
 8004906:	4618      	mov	r0, r3
 8004908:	1cfb      	adds	r3, r7, #3
 800490a:	2201      	movs	r2, #1
 800490c:	4619      	mov	r1, r3
 800490e:	f7ff fec3 	bl	8004698 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004912:	e005      	b.n	8004920 <_HandleIncomingPacket+0xc8>
    }
  }
 8004914:	bf00      	nop
 8004916:	e004      	b.n	8004922 <_HandleIncomingPacket+0xca>
      break;
 8004918:	bf00      	nop
 800491a:	e002      	b.n	8004922 <_HandleIncomingPacket+0xca>
      break;
 800491c:	bf00      	nop
 800491e:	e000      	b.n	8004922 <_HandleIncomingPacket+0xca>
      break;
 8004920:	bf00      	nop
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	20013280 	.word	0x20013280

08004930 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b08c      	sub	sp, #48	; 0x30
 8004934:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004936:	2301      	movs	r3, #1
 8004938:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800493a:	1d3b      	adds	r3, r7, #4
 800493c:	3301      	adds	r3, #1
 800493e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004944:	4b32      	ldr	r3, [pc, #200]	; (8004a10 <_TrySendOverflowPacket+0xe0>)
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
 800494a:	e00b      	b.n	8004964 <_TrySendOverflowPacket+0x34>
 800494c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494e:	b2da      	uxtb	r2, r3
 8004950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004952:	1c59      	adds	r1, r3, #1
 8004954:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004956:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	09db      	lsrs	r3, r3, #7
 8004962:	62bb      	str	r3, [r7, #40]	; 0x28
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	2b7f      	cmp	r3, #127	; 0x7f
 8004968:	d8f0      	bhi.n	800494c <_TrySendOverflowPacket+0x1c>
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800497a:	4b26      	ldr	r3, [pc, #152]	; (8004a14 <_TrySendOverflowPacket+0xe4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004980:	4b23      	ldr	r3, [pc, #140]	; (8004a10 <_TrySendOverflowPacket+0xe0>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	623b      	str	r3, [r7, #32]
 8004992:	e00b      	b.n	80049ac <_TrySendOverflowPacket+0x7c>
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499a:	1c59      	adds	r1, r3, #1
 800499c:	6279      	str	r1, [r7, #36]	; 0x24
 800499e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	09db      	lsrs	r3, r3, #7
 80049aa:	623b      	str	r3, [r7, #32]
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	2b7f      	cmp	r3, #127	; 0x7f
 80049b0:	d8f0      	bhi.n	8004994 <_TrySendOverflowPacket+0x64>
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	627a      	str	r2, [r7, #36]	; 0x24
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80049c2:	4b13      	ldr	r3, [pc, #76]	; (8004a10 <_TrySendOverflowPacket+0xe0>)
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	4618      	mov	r0, r3
 80049c8:	69fa      	ldr	r2, [r7, #28]
 80049ca:	1d3b      	adds	r3, r7, #4
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	1d3b      	adds	r3, r7, #4
 80049d2:	4619      	mov	r1, r3
 80049d4:	f7fb fbfc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80049d8:	4603      	mov	r3, r0
 80049da:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80049dc:	f7ff fdf4 	bl	80045c8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d009      	beq.n	80049fa <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80049e6:	4a0a      	ldr	r2, [pc, #40]	; (8004a10 <_TrySendOverflowPacket+0xe0>)
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80049ec:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <_TrySendOverflowPacket+0xe0>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <_TrySendOverflowPacket+0xe0>)
 80049f6:	701a      	strb	r2, [r3, #0]
 80049f8:	e004      	b.n	8004a04 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80049fa:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <_TrySendOverflowPacket+0xe0>)
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	3301      	adds	r3, #1
 8004a00:	4a03      	ldr	r2, [pc, #12]	; (8004a10 <_TrySendOverflowPacket+0xe0>)
 8004a02:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004a04:	693b      	ldr	r3, [r7, #16]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3730      	adds	r7, #48	; 0x30
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20013280 	.word	0x20013280
 8004a14:	e0001004 	.word	0xe0001004

08004a18 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004a24:	4b6d      	ldr	r3, [pc, #436]	; (8004bdc <_SendPacket+0x1c4>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d010      	beq.n	8004a4e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004a2c:	4b6b      	ldr	r3, [pc, #428]	; (8004bdc <_SendPacket+0x1c4>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80a5 	beq.w	8004b80 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004a36:	4b69      	ldr	r3, [pc, #420]	; (8004bdc <_SendPacket+0x1c4>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d109      	bne.n	8004a52 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004a3e:	f7ff ff77 	bl	8004930 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004a42:	4b66      	ldr	r3, [pc, #408]	; (8004bdc <_SendPacket+0x1c4>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	f040 809c 	bne.w	8004b84 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004a4c:	e001      	b.n	8004a52 <_SendPacket+0x3a>
    goto Send;
 8004a4e:	bf00      	nop
 8004a50:	e000      	b.n	8004a54 <_SendPacket+0x3c>
Send:
 8004a52:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b1f      	cmp	r3, #31
 8004a58:	d809      	bhi.n	8004a6e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004a5a:	4b60      	ldr	r3, [pc, #384]	; (8004bdc <_SendPacket+0x1c4>)
 8004a5c:	69da      	ldr	r2, [r3, #28]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f040 808d 	bne.w	8004b88 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b17      	cmp	r3, #23
 8004a72:	d807      	bhi.n	8004a84 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	701a      	strb	r2, [r3, #0]
 8004a82:	e03d      	b.n	8004b00 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a90:	d912      	bls.n	8004ab8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	09da      	lsrs	r2, r3, #7
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	3a01      	subs	r2, #1
 8004aaa:	60fa      	str	r2, [r7, #12]
 8004aac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	e006      	b.n	8004ac6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8004aca:	d912      	bls.n	8004af2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	09da      	lsrs	r2, r3, #7
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	3a01      	subs	r2, #1
 8004ae4:	60fa      	str	r2, [r7, #12]
 8004ae6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	701a      	strb	r2, [r3, #0]
 8004af0:	e006      	b.n	8004b00 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b00:	4b37      	ldr	r3, [pc, #220]	; (8004be0 <_SendPacket+0x1c8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004b06:	4b35      	ldr	r3, [pc, #212]	; (8004bdc <_SendPacket+0x1c4>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	623b      	str	r3, [r7, #32]
 8004b18:	e00b      	b.n	8004b32 <_SendPacket+0x11a>
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	1c59      	adds	r1, r3, #1
 8004b22:	6279      	str	r1, [r7, #36]	; 0x24
 8004b24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	09db      	lsrs	r3, r3, #7
 8004b30:	623b      	str	r3, [r7, #32]
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	2b7f      	cmp	r3, #127	; 0x7f
 8004b36:	d8f0      	bhi.n	8004b1a <_SendPacket+0x102>
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	627a      	str	r2, [r7, #36]	; 0x24
 8004b3e:	6a3a      	ldr	r2, [r7, #32]
 8004b40:	b2d2      	uxtb	r2, r2
 8004b42:	701a      	strb	r2, [r3, #0]
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004b48:	4b24      	ldr	r3, [pc, #144]	; (8004bdc <_SendPacket+0x1c4>)
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	f7fb fb3a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8004b60:	f7ff fd32 	bl	80045c8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004b6a:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <_SendPacket+0x1c4>)
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	60d3      	str	r3, [r2, #12]
 8004b70:	e00b      	b.n	8004b8a <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004b72:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <_SendPacket+0x1c4>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	3301      	adds	r3, #1
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	4b18      	ldr	r3, [pc, #96]	; (8004bdc <_SendPacket+0x1c4>)
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	e004      	b.n	8004b8a <_SendPacket+0x172>
    goto SendDone;
 8004b80:	bf00      	nop
 8004b82:	e002      	b.n	8004b8a <_SendPacket+0x172>
      goto SendDone;
 8004b84:	bf00      	nop
 8004b86:	e000      	b.n	8004b8a <_SendPacket+0x172>
      goto SendDone;
 8004b88:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004b8a:	4b14      	ldr	r3, [pc, #80]	; (8004bdc <_SendPacket+0x1c4>)
 8004b8c:	7e1b      	ldrb	r3, [r3, #24]
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4a14      	ldr	r2, [pc, #80]	; (8004be4 <_SendPacket+0x1cc>)
 8004b92:	460b      	mov	r3, r1
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	440b      	add	r3, r1
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	4413      	add	r3, r2
 8004b9c:	336c      	adds	r3, #108	; 0x6c
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	4b0e      	ldr	r3, [pc, #56]	; (8004bdc <_SendPacket+0x1c4>)
 8004ba2:	7e1b      	ldrb	r3, [r3, #24]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	490f      	ldr	r1, [pc, #60]	; (8004be4 <_SendPacket+0x1cc>)
 8004ba8:	4603      	mov	r3, r0
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	4403      	add	r3, r0
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	440b      	add	r3, r1
 8004bb2:	3370      	adds	r3, #112	; 0x70
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d00b      	beq.n	8004bd2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004bba:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <_SendPacket+0x1c4>)
 8004bbc:	789b      	ldrb	r3, [r3, #2]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d107      	bne.n	8004bd2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004bc2:	4b06      	ldr	r3, [pc, #24]	; (8004bdc <_SendPacket+0x1c4>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004bc8:	f7ff fe46 	bl	8004858 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004bcc:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <_SendPacket+0x1c4>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004bd2:	bf00      	nop
 8004bd4:	3728      	adds	r7, #40	; 0x28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20013280 	.word	0x20013280
 8004be0:	e0001004 	.word	0xe0001004
 8004be4:	20013418 	.word	0x20013418

08004be8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8004bf4:	f04f 0120 	mov.w	r1, #32
 8004bf8:	f381 8811 	msr	BASEPRI, r1
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	4808      	ldr	r0, [pc, #32]	; (8004c20 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c00:	f7ff fe1d 	bl	800483e <_PreparePacket>
 8004c04:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	68b8      	ldr	r0, [r7, #8]
 8004c0c:	f7ff ff04 	bl	8004a18 <_SendPacket>
  RECORD_END();
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f383 8811 	msr	BASEPRI, r3
}
 8004c16:	bf00      	nop
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200132b0 	.word	0x200132b0

08004c24 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c32:	f04f 0120 	mov.w	r1, #32
 8004c36:	f381 8811 	msr	BASEPRI, r1
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	4816      	ldr	r0, [pc, #88]	; (8004c98 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004c3e:	f7ff fdfe 	bl	800483e <_PreparePacket>
 8004c42:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	61fb      	str	r3, [r7, #28]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	e00b      	b.n	8004c6a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	1c59      	adds	r1, r3, #1
 8004c5a:	61f9      	str	r1, [r7, #28]
 8004c5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	09db      	lsrs	r3, r3, #7
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c6e:	d8f0      	bhi.n	8004c52 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	61fa      	str	r2, [r7, #28]
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	701a      	strb	r2, [r3, #0]
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	68f9      	ldr	r1, [r7, #12]
 8004c84:	6938      	ldr	r0, [r7, #16]
 8004c86:	f7ff fec7 	bl	8004a18 <_SendPacket>
  RECORD_END();
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f383 8811 	msr	BASEPRI, r3
}
 8004c90:	bf00      	nop
 8004c92:	3720      	adds	r7, #32
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	200132b0 	.word	0x200132b0

08004c9c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08c      	sub	sp, #48	; 0x30
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ca8:	f3ef 8311 	mrs	r3, BASEPRI
 8004cac:	f04f 0120 	mov.w	r1, #32
 8004cb0:	f381 8811 	msr	BASEPRI, r1
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	4825      	ldr	r0, [pc, #148]	; (8004d4c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004cb8:	f7ff fdc1 	bl	800483e <_PreparePacket>
 8004cbc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cca:	e00b      	b.n	8004ce4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd2:	1c59      	adds	r1, r3, #1
 8004cd4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cda:	b2d2      	uxtb	r2, r2
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce0:	09db      	lsrs	r3, r3, #7
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ce8:	d8f0      	bhi.n	8004ccc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cf2:	b2d2      	uxtb	r2, r2
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	623b      	str	r3, [r7, #32]
 8004d02:	e00b      	b.n	8004d1c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0a:	1c59      	adds	r1, r3, #1
 8004d0c:	6279      	str	r1, [r7, #36]	; 0x24
 8004d0e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	701a      	strb	r2, [r3, #0]
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	09db      	lsrs	r3, r3, #7
 8004d1a:	623b      	str	r3, [r7, #32]
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d20:	d8f0      	bhi.n	8004d04 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	627a      	str	r2, [r7, #36]	; 0x24
 8004d28:	6a3a      	ldr	r2, [r7, #32]
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	6979      	ldr	r1, [r7, #20]
 8004d36:	69b8      	ldr	r0, [r7, #24]
 8004d38:	f7ff fe6e 	bl	8004a18 <_SendPacket>
  RECORD_END();
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	f383 8811 	msr	BASEPRI, r3
}
 8004d42:	bf00      	nop
 8004d44:	3730      	adds	r7, #48	; 0x30
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	200132b0 	.word	0x200132b0

08004d50 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08e      	sub	sp, #56	; 0x38
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d62:	f04f 0120 	mov.w	r1, #32
 8004d66:	f381 8811 	msr	BASEPRI, r1
 8004d6a:	61fb      	str	r3, [r7, #28]
 8004d6c:	4832      	ldr	r0, [pc, #200]	; (8004e38 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004d6e:	f7ff fd66 	bl	800483e <_PreparePacket>
 8004d72:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d80:	e00b      	b.n	8004d9a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	1c59      	adds	r1, r3, #1
 8004d8a:	6379      	str	r1, [r7, #52]	; 0x34
 8004d8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	09db      	lsrs	r3, r3, #7
 8004d98:	633b      	str	r3, [r7, #48]	; 0x30
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d9e:	d8f0      	bhi.n	8004d82 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	637a      	str	r2, [r7, #52]	; 0x34
 8004da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004db8:	e00b      	b.n	8004dd2 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc0:	1c59      	adds	r1, r3, #1
 8004dc2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	09db      	lsrs	r3, r3, #7
 8004dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd6:	d8f0      	bhi.n	8004dba <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	623b      	str	r3, [r7, #32]
 8004df0:	e00b      	b.n	8004e0a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	1c59      	adds	r1, r3, #1
 8004dfa:	6279      	str	r1, [r7, #36]	; 0x24
 8004dfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	09db      	lsrs	r3, r3, #7
 8004e08:	623b      	str	r3, [r7, #32]
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004e0e:	d8f0      	bhi.n	8004df2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	627a      	str	r2, [r7, #36]	; 0x24
 8004e16:	6a3a      	ldr	r2, [r7, #32]
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	6979      	ldr	r1, [r7, #20]
 8004e24:	69b8      	ldr	r0, [r7, #24]
 8004e26:	f7ff fdf7 	bl	8004a18 <_SendPacket>
  RECORD_END();
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f383 8811 	msr	BASEPRI, r3
}
 8004e30:	bf00      	nop
 8004e32:	3738      	adds	r7, #56	; 0x38
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	200132b0 	.word	0x200132b0

08004e3c <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b090      	sub	sp, #64	; 0x40
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e4a:	f3ef 8311 	mrs	r3, BASEPRI
 8004e4e:	f04f 0120 	mov.w	r1, #32
 8004e52:	f381 8811 	msr	BASEPRI, r1
 8004e56:	61fb      	str	r3, [r7, #28]
 8004e58:	4840      	ldr	r0, [pc, #256]	; (8004f5c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004e5a:	f7ff fcf0 	bl	800483e <_PreparePacket>
 8004e5e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e6c:	e00b      	b.n	8004e86 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e74:	1c59      	adds	r1, r3, #1
 8004e76:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004e78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	701a      	strb	r2, [r3, #0]
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	09db      	lsrs	r3, r3, #7
 8004e84:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e88:	2b7f      	cmp	r3, #127	; 0x7f
 8004e8a:	d8f0      	bhi.n	8004e6e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	633b      	str	r3, [r7, #48]	; 0x30
 8004ea4:	e00b      	b.n	8004ebe <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eac:	1c59      	adds	r1, r3, #1
 8004eae:	6379      	str	r1, [r7, #52]	; 0x34
 8004eb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	701a      	strb	r2, [r3, #0]
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	09db      	lsrs	r3, r3, #7
 8004ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ec2:	d8f0      	bhi.n	8004ea6 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	637a      	str	r2, [r7, #52]	; 0x34
 8004eca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28
 8004edc:	e00b      	b.n	8004ef6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	1c59      	adds	r1, r3, #1
 8004ee6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004ee8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	09db      	lsrs	r3, r3, #7
 8004ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8004efa:	d8f0      	bhi.n	8004ede <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f12:	623b      	str	r3, [r7, #32]
 8004f14:	e00b      	b.n	8004f2e <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	b2da      	uxtb	r2, r3
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1c:	1c59      	adds	r1, r3, #1
 8004f1e:	6279      	str	r1, [r7, #36]	; 0x24
 8004f20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f24:	b2d2      	uxtb	r2, r2
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	09db      	lsrs	r3, r3, #7
 8004f2c:	623b      	str	r3, [r7, #32]
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	2b7f      	cmp	r3, #127	; 0x7f
 8004f32:	d8f0      	bhi.n	8004f16 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	627a      	str	r2, [r7, #36]	; 0x24
 8004f3a:	6a3a      	ldr	r2, [r7, #32]
 8004f3c:	b2d2      	uxtb	r2, r2
 8004f3e:	701a      	strb	r2, [r3, #0]
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	6979      	ldr	r1, [r7, #20]
 8004f48:	69b8      	ldr	r0, [r7, #24]
 8004f4a:	f7ff fd65 	bl	8004a18 <_SendPacket>
  RECORD_END();
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f383 8811 	msr	BASEPRI, r3
}
 8004f54:	bf00      	nop
 8004f56:	3740      	adds	r7, #64	; 0x40
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	200132b0 	.word	0x200132b0

08004f60 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08c      	sub	sp, #48	; 0x30
 8004f64:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004f66:	4b59      	ldr	r3, [pc, #356]	; (80050cc <SEGGER_SYSVIEW_Start+0x16c>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f70:	f04f 0120 	mov.w	r1, #32
 8004f74:	f381 8811 	msr	BASEPRI, r1
 8004f78:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004f7a:	4b54      	ldr	r3, [pc, #336]	; (80050cc <SEGGER_SYSVIEW_Start+0x16c>)
 8004f7c:	785b      	ldrb	r3, [r3, #1]
 8004f7e:	220a      	movs	r2, #10
 8004f80:	4953      	ldr	r1, [pc, #332]	; (80050d0 <SEGGER_SYSVIEW_Start+0x170>)
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fb f924 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004f8e:	f7ff fb1b 	bl	80045c8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004f92:	200a      	movs	r0, #10
 8004f94:	f7ff fe28 	bl	8004be8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004f98:	f3ef 8311 	mrs	r3, BASEPRI
 8004f9c:	f04f 0120 	mov.w	r1, #32
 8004fa0:	f381 8811 	msr	BASEPRI, r1
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	484b      	ldr	r0, [pc, #300]	; (80050d4 <SEGGER_SYSVIEW_Start+0x174>)
 8004fa8:	f7ff fc49 	bl	800483e <_PreparePacket>
 8004fac:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb6:	4b45      	ldr	r3, [pc, #276]	; (80050cc <SEGGER_SYSVIEW_Start+0x16c>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fbc:	e00b      	b.n	8004fd6 <SEGGER_SYSVIEW_Start+0x76>
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	1c59      	adds	r1, r3, #1
 8004fc6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004fc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	701a      	strb	r2, [r3, #0]
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	09db      	lsrs	r3, r3, #7
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	2b7f      	cmp	r3, #127	; 0x7f
 8004fda:	d8f0      	bhi.n	8004fbe <SEGGER_SYSVIEW_Start+0x5e>
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff0:	4b36      	ldr	r3, [pc, #216]	; (80050cc <SEGGER_SYSVIEW_Start+0x16c>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	623b      	str	r3, [r7, #32]
 8004ff6:	e00b      	b.n	8005010 <SEGGER_SYSVIEW_Start+0xb0>
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	1c59      	adds	r1, r3, #1
 8005000:	6279      	str	r1, [r7, #36]	; 0x24
 8005002:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	09db      	lsrs	r3, r3, #7
 800500e:	623b      	str	r3, [r7, #32]
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	2b7f      	cmp	r3, #127	; 0x7f
 8005014:	d8f0      	bhi.n	8004ff8 <SEGGER_SYSVIEW_Start+0x98>
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	627a      	str	r2, [r7, #36]	; 0x24
 800501c:	6a3a      	ldr	r2, [r7, #32]
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	4b28      	ldr	r3, [pc, #160]	; (80050cc <SEGGER_SYSVIEW_Start+0x16c>)
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	e00b      	b.n	800504a <SEGGER_SYSVIEW_Start+0xea>
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	b2da      	uxtb	r2, r3
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	1c59      	adds	r1, r3, #1
 800503a:	61f9      	str	r1, [r7, #28]
 800503c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	09db      	lsrs	r3, r3, #7
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b7f      	cmp	r3, #127	; 0x7f
 800504e:	d8f0      	bhi.n	8005032 <SEGGER_SYSVIEW_Start+0xd2>
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	61fa      	str	r2, [r7, #28]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	b2d2      	uxtb	r2, r2
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	2300      	movs	r3, #0
 8005066:	613b      	str	r3, [r7, #16]
 8005068:	e00b      	b.n	8005082 <SEGGER_SYSVIEW_Start+0x122>
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	b2da      	uxtb	r2, r3
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	1c59      	adds	r1, r3, #1
 8005072:	6179      	str	r1, [r7, #20]
 8005074:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	09db      	lsrs	r3, r3, #7
 8005080:	613b      	str	r3, [r7, #16]
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b7f      	cmp	r3, #127	; 0x7f
 8005086:	d8f0      	bhi.n	800506a <SEGGER_SYSVIEW_Start+0x10a>
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	617a      	str	r2, [r7, #20]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	701a      	strb	r2, [r3, #0]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005098:	2218      	movs	r2, #24
 800509a:	6839      	ldr	r1, [r7, #0]
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff fcbb 	bl	8004a18 <_SendPacket>
      RECORD_END();
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80050a8:	4b08      	ldr	r3, [pc, #32]	; (80050cc <SEGGER_SYSVIEW_Start+0x16c>)
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80050b0:	4b06      	ldr	r3, [pc, #24]	; (80050cc <SEGGER_SYSVIEW_Start+0x16c>)
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80050b6:	f000 f9c7 	bl	8005448 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80050ba:	f000 f9b1 	bl	8005420 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80050be:	f000 fc5d 	bl	800597c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80050c2:	bf00      	nop
 80050c4:	3730      	adds	r7, #48	; 0x30
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20013280 	.word	0x20013280
 80050d0:	080064ac 	.word	0x080064ac
 80050d4:	200132b0 	.word	0x200132b0

080050d8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050de:	f3ef 8311 	mrs	r3, BASEPRI
 80050e2:	f04f 0120 	mov.w	r1, #32
 80050e6:	f381 8811 	msr	BASEPRI, r1
 80050ea:	607b      	str	r3, [r7, #4]
 80050ec:	480b      	ldr	r0, [pc, #44]	; (800511c <SEGGER_SYSVIEW_Stop+0x44>)
 80050ee:	f7ff fba6 	bl	800483e <_PreparePacket>
 80050f2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80050f4:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <SEGGER_SYSVIEW_Stop+0x48>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d007      	beq.n	800510c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80050fc:	220b      	movs	r2, #11
 80050fe:	6839      	ldr	r1, [r7, #0]
 8005100:	6838      	ldr	r0, [r7, #0]
 8005102:	f7ff fc89 	bl	8004a18 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <SEGGER_SYSVIEW_Stop+0x48>)
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	f383 8811 	msr	BASEPRI, r3
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	200132b0 	.word	0x200132b0
 8005120:	20013280 	.word	0x20013280

08005124 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005124:	b580      	push	{r7, lr}
 8005126:	b08c      	sub	sp, #48	; 0x30
 8005128:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800512a:	f3ef 8311 	mrs	r3, BASEPRI
 800512e:	f04f 0120 	mov.w	r1, #32
 8005132:	f381 8811 	msr	BASEPRI, r1
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	4845      	ldr	r0, [pc, #276]	; (8005250 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800513a:	f7ff fb80 	bl	800483e <_PreparePacket>
 800513e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005148:	4b42      	ldr	r3, [pc, #264]	; (8005254 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
 800514e:	e00b      	b.n	8005168 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	b2da      	uxtb	r2, r3
 8005154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005156:	1c59      	adds	r1, r3, #1
 8005158:	62f9      	str	r1, [r7, #44]	; 0x2c
 800515a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800515e:	b2d2      	uxtb	r2, r2
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	09db      	lsrs	r3, r3, #7
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	2b7f      	cmp	r3, #127	; 0x7f
 800516c:	d8f0      	bhi.n	8005150 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	1c5a      	adds	r2, r3, #1
 8005172:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005176:	b2d2      	uxtb	r2, r2
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
 8005182:	4b34      	ldr	r3, [pc, #208]	; (8005254 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	623b      	str	r3, [r7, #32]
 8005188:	e00b      	b.n	80051a2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	b2da      	uxtb	r2, r3
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	1c59      	adds	r1, r3, #1
 8005192:	6279      	str	r1, [r7, #36]	; 0x24
 8005194:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	09db      	lsrs	r3, r3, #7
 80051a0:	623b      	str	r3, [r7, #32]
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	2b7f      	cmp	r3, #127	; 0x7f
 80051a6:	d8f0      	bhi.n	800518a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	627a      	str	r2, [r7, #36]	; 0x24
 80051ae:	6a3a      	ldr	r2, [r7, #32]
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	61fb      	str	r3, [r7, #28]
 80051bc:	4b25      	ldr	r3, [pc, #148]	; (8005254 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	e00b      	b.n	80051dc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	1c59      	adds	r1, r3, #1
 80051cc:	61f9      	str	r1, [r7, #28]
 80051ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	09db      	lsrs	r3, r3, #7
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b7f      	cmp	r3, #127	; 0x7f
 80051e0:	d8f0      	bhi.n	80051c4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	61fa      	str	r2, [r7, #28]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	e00b      	b.n	8005214 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	1c59      	adds	r1, r3, #1
 8005204:	6179      	str	r1, [r7, #20]
 8005206:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	09db      	lsrs	r3, r3, #7
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b7f      	cmp	r3, #127	; 0x7f
 8005218:	d8f0      	bhi.n	80051fc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	617a      	str	r2, [r7, #20]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800522a:	2218      	movs	r2, #24
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	68b8      	ldr	r0, [r7, #8]
 8005230:	f7ff fbf2 	bl	8004a18 <_SendPacket>
  RECORD_END();
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800523a:	4b06      	ldr	r3, [pc, #24]	; (8005254 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005242:	4b04      	ldr	r3, [pc, #16]	; (8005254 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	4798      	blx	r3
  }
}
 8005248:	bf00      	nop
 800524a:	3730      	adds	r7, #48	; 0x30
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	200132b0 	.word	0x200132b0
 8005254:	20013280 	.word	0x20013280

08005258 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b092      	sub	sp, #72	; 0x48
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005260:	f3ef 8311 	mrs	r3, BASEPRI
 8005264:	f04f 0120 	mov.w	r1, #32
 8005268:	f381 8811 	msr	BASEPRI, r1
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	486a      	ldr	r0, [pc, #424]	; (8005418 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005270:	f7ff fae5 	bl	800483e <_PreparePacket>
 8005274:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	647b      	str	r3, [r7, #68]	; 0x44
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b66      	ldr	r3, [pc, #408]	; (800541c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	643b      	str	r3, [r7, #64]	; 0x40
 800528a:	e00b      	b.n	80052a4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800528c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800528e:	b2da      	uxtb	r2, r3
 8005290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005292:	1c59      	adds	r1, r3, #1
 8005294:	6479      	str	r1, [r7, #68]	; 0x44
 8005296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a0:	09db      	lsrs	r3, r3, #7
 80052a2:	643b      	str	r3, [r7, #64]	; 0x40
 80052a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052a6:	2b7f      	cmp	r3, #127	; 0x7f
 80052a8:	d8f0      	bhi.n	800528c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80052aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	647a      	str	r2, [r7, #68]	; 0x44
 80052b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80052c4:	e00b      	b.n	80052de <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052cc:	1c59      	adds	r1, r3, #1
 80052ce:	63f9      	str	r1, [r7, #60]	; 0x3c
 80052d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052d4:	b2d2      	uxtb	r2, r2
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052da:	09db      	lsrs	r3, r3, #7
 80052dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80052de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e0:	2b7f      	cmp	r3, #127	; 0x7f
 80052e2:	d8f0      	bhi.n	80052c6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80052e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052ec:	b2d2      	uxtb	r2, r2
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	4619      	mov	r1, r3
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f7ff fa51 	bl	80047a4 <_EncodeStr>
 8005302:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005304:	2209      	movs	r2, #9
 8005306:	68f9      	ldr	r1, [r7, #12]
 8005308:	6938      	ldr	r0, [r7, #16]
 800530a:	f7ff fb85 	bl	8004a18 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	637b      	str	r3, [r7, #52]	; 0x34
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4b40      	ldr	r3, [pc, #256]	; (800541c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	633b      	str	r3, [r7, #48]	; 0x30
 8005322:	e00b      	b.n	800533c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005326:	b2da      	uxtb	r2, r3
 8005328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532a:	1c59      	adds	r1, r3, #1
 800532c:	6379      	str	r1, [r7, #52]	; 0x34
 800532e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005338:	09db      	lsrs	r3, r3, #7
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	2b7f      	cmp	r3, #127	; 0x7f
 8005340:	d8f0      	bhi.n	8005324 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	637a      	str	r2, [r7, #52]	; 0x34
 8005348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005350:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	62bb      	str	r3, [r7, #40]	; 0x28
 800535c:	e00b      	b.n	8005376 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	b2da      	uxtb	r2, r3
 8005362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005364:	1c59      	adds	r1, r3, #1
 8005366:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005368:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	701a      	strb	r2, [r3, #0]
 8005370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005372:	09db      	lsrs	r3, r3, #7
 8005374:	62bb      	str	r3, [r7, #40]	; 0x28
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	2b7f      	cmp	r3, #127	; 0x7f
 800537a:	d8f0      	bhi.n	800535e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	701a      	strb	r2, [r3, #0]
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	627b      	str	r3, [r7, #36]	; 0x24
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	623b      	str	r3, [r7, #32]
 8005396:	e00b      	b.n	80053b0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	b2da      	uxtb	r2, r3
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	1c59      	adds	r1, r3, #1
 80053a0:	6279      	str	r1, [r7, #36]	; 0x24
 80053a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	09db      	lsrs	r3, r3, #7
 80053ae:	623b      	str	r3, [r7, #32]
 80053b0:	6a3b      	ldr	r3, [r7, #32]
 80053b2:	2b7f      	cmp	r3, #127	; 0x7f
 80053b4:	d8f0      	bhi.n	8005398 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	627a      	str	r2, [r7, #36]	; 0x24
 80053bc:	6a3a      	ldr	r2, [r7, #32]
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	61fb      	str	r3, [r7, #28]
 80053ca:	2300      	movs	r3, #0
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	e00b      	b.n	80053e8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	1c59      	adds	r1, r3, #1
 80053d8:	61f9      	str	r1, [r7, #28]
 80053da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	09db      	lsrs	r3, r3, #7
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	2b7f      	cmp	r3, #127	; 0x7f
 80053ec:	d8f0      	bhi.n	80053d0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	61fa      	str	r2, [r7, #28]
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	b2d2      	uxtb	r2, r2
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80053fe:	2215      	movs	r2, #21
 8005400:	68f9      	ldr	r1, [r7, #12]
 8005402:	6938      	ldr	r0, [r7, #16]
 8005404:	f7ff fb08 	bl	8004a18 <_SendPacket>
  RECORD_END();
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f383 8811 	msr	BASEPRI, r3
}
 800540e:	bf00      	nop
 8005410:	3748      	adds	r7, #72	; 0x48
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	200132b0 	.word	0x200132b0
 800541c:	20013280 	.word	0x20013280

08005420 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005420:	b580      	push	{r7, lr}
 8005422:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005424:	4b07      	ldr	r3, [pc, #28]	; (8005444 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800542c:	4b05      	ldr	r3, [pc, #20]	; (8005444 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005436:	4b03      	ldr	r3, [pc, #12]	; (8005444 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	4798      	blx	r3
  }
}
 800543e:	bf00      	nop
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20013280 	.word	0x20013280

08005448 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005448:	b590      	push	{r4, r7, lr}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800544e:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d019      	beq.n	800548a <SEGGER_SYSVIEW_RecordSystime+0x42>
 8005456:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d014      	beq.n	800548a <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005460:	4b0f      	ldr	r3, [pc, #60]	; (80054a0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4798      	blx	r3
 8005468:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800546c:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800546e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	f04f 0400 	mov.w	r4, #0
 800547a:	0013      	movs	r3, r2
 800547c:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800547e:	461a      	mov	r2, r3
 8005480:	4601      	mov	r1, r0
 8005482:	200d      	movs	r0, #13
 8005484:	f7ff fc0a 	bl	8004c9c <SEGGER_SYSVIEW_RecordU32x2>
 8005488:	e005      	b.n	8005496 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800548a:	4b06      	ldr	r3, [pc, #24]	; (80054a4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4619      	mov	r1, r3
 8005490:	200c      	movs	r0, #12
 8005492:	f7ff fbc7 	bl	8004c24 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	bd90      	pop	{r4, r7, pc}
 800549e:	bf00      	nop
 80054a0:	20013280 	.word	0x20013280
 80054a4:	e0001004 	.word	0xe0001004

080054a8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054ae:	f3ef 8311 	mrs	r3, BASEPRI
 80054b2:	f04f 0120 	mov.w	r1, #32
 80054b6:	f381 8811 	msr	BASEPRI, r1
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	4819      	ldr	r0, [pc, #100]	; (8005524 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80054be:	f7ff f9be 	bl	800483e <_PreparePacket>
 80054c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80054c8:	4b17      	ldr	r3, [pc, #92]	; (8005528 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	e00b      	b.n	80054f4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	1c59      	adds	r1, r3, #1
 80054e4:	6179      	str	r1, [r7, #20]
 80054e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	09db      	lsrs	r3, r3, #7
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	2b7f      	cmp	r3, #127	; 0x7f
 80054f8:	d8f0      	bhi.n	80054dc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	617a      	str	r2, [r7, #20]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800550a:	2202      	movs	r2, #2
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	68b8      	ldr	r0, [r7, #8]
 8005510:	f7ff fa82 	bl	8004a18 <_SendPacket>
  RECORD_END();
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f383 8811 	msr	BASEPRI, r3
}
 800551a:	bf00      	nop
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	200132b0 	.word	0x200132b0
 8005528:	e000ed04 	.word	0xe000ed04

0800552c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005532:	f3ef 8311 	mrs	r3, BASEPRI
 8005536:	f04f 0120 	mov.w	r1, #32
 800553a:	f381 8811 	msr	BASEPRI, r1
 800553e:	607b      	str	r3, [r7, #4]
 8005540:	4807      	ldr	r0, [pc, #28]	; (8005560 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005542:	f7ff f97c 	bl	800483e <_PreparePacket>
 8005546:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005548:	2203      	movs	r2, #3
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	6838      	ldr	r0, [r7, #0]
 800554e:	f7ff fa63 	bl	8004a18 <_SendPacket>
  RECORD_END();
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f383 8811 	msr	BASEPRI, r3
}
 8005558:	bf00      	nop
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	200132b0 	.word	0x200132b0

08005564 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800556a:	f3ef 8311 	mrs	r3, BASEPRI
 800556e:	f04f 0120 	mov.w	r1, #32
 8005572:	f381 8811 	msr	BASEPRI, r1
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	4807      	ldr	r0, [pc, #28]	; (8005598 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800557a:	f7ff f960 	bl	800483e <_PreparePacket>
 800557e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005580:	2212      	movs	r2, #18
 8005582:	6839      	ldr	r1, [r7, #0]
 8005584:	6838      	ldr	r0, [r7, #0]
 8005586:	f7ff fa47 	bl	8004a18 <_SendPacket>
  RECORD_END();
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f383 8811 	msr	BASEPRI, r3
}
 8005590:	bf00      	nop
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	200132b0 	.word	0x200132b0

0800559c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055a2:	f3ef 8311 	mrs	r3, BASEPRI
 80055a6:	f04f 0120 	mov.w	r1, #32
 80055aa:	f381 8811 	msr	BASEPRI, r1
 80055ae:	607b      	str	r3, [r7, #4]
 80055b0:	4807      	ldr	r0, [pc, #28]	; (80055d0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80055b2:	f7ff f944 	bl	800483e <_PreparePacket>
 80055b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80055b8:	2211      	movs	r2, #17
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	6838      	ldr	r0, [r7, #0]
 80055be:	f7ff fa2b 	bl	8004a18 <_SendPacket>
  RECORD_END();
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f383 8811 	msr	BASEPRI, r3
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	200132b0 	.word	0x200132b0

080055d4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80055dc:	f3ef 8311 	mrs	r3, BASEPRI
 80055e0:	f04f 0120 	mov.w	r1, #32
 80055e4:	f381 8811 	msr	BASEPRI, r1
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	4819      	ldr	r0, [pc, #100]	; (8005650 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80055ec:	f7ff f927 	bl	800483e <_PreparePacket>
 80055f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80055f6:	4b17      	ldr	r3, [pc, #92]	; (8005654 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	61fb      	str	r3, [r7, #28]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	e00b      	b.n	8005622 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	b2da      	uxtb	r2, r3
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	1c59      	adds	r1, r3, #1
 8005612:	61f9      	str	r1, [r7, #28]
 8005614:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	09db      	lsrs	r3, r3, #7
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	2b7f      	cmp	r3, #127	; 0x7f
 8005626:	d8f0      	bhi.n	800560a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	61fa      	str	r2, [r7, #28]
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	b2d2      	uxtb	r2, r2
 8005632:	701a      	strb	r2, [r3, #0]
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005638:	2208      	movs	r2, #8
 800563a:	68f9      	ldr	r1, [r7, #12]
 800563c:	6938      	ldr	r0, [r7, #16]
 800563e:	f7ff f9eb 	bl	8004a18 <_SendPacket>
  RECORD_END();
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f383 8811 	msr	BASEPRI, r3
}
 8005648:	bf00      	nop
 800564a:	3720      	adds	r7, #32
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	200132b0 	.word	0x200132b0
 8005654:	20013280 	.word	0x20013280

08005658 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005660:	f3ef 8311 	mrs	r3, BASEPRI
 8005664:	f04f 0120 	mov.w	r1, #32
 8005668:	f381 8811 	msr	BASEPRI, r1
 800566c:	617b      	str	r3, [r7, #20]
 800566e:	4819      	ldr	r0, [pc, #100]	; (80056d4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005670:	f7ff f8e5 	bl	800483e <_PreparePacket>
 8005674:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800567a:	4b17      	ldr	r3, [pc, #92]	; (80056d8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	61fb      	str	r3, [r7, #28]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	61bb      	str	r3, [r7, #24]
 800568c:	e00b      	b.n	80056a6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	b2da      	uxtb	r2, r3
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	1c59      	adds	r1, r3, #1
 8005696:	61f9      	str	r1, [r7, #28]
 8005698:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	701a      	strb	r2, [r3, #0]
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	09db      	lsrs	r3, r3, #7
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	2b7f      	cmp	r3, #127	; 0x7f
 80056aa:	d8f0      	bhi.n	800568e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	61fa      	str	r2, [r7, #28]
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80056bc:	2204      	movs	r2, #4
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	6938      	ldr	r0, [r7, #16]
 80056c2:	f7ff f9a9 	bl	8004a18 <_SendPacket>
  RECORD_END();
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f383 8811 	msr	BASEPRI, r3
}
 80056cc:	bf00      	nop
 80056ce:	3720      	adds	r7, #32
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	200132b0 	.word	0x200132b0
 80056d8:	20013280 	.word	0x20013280

080056dc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056e4:	f3ef 8311 	mrs	r3, BASEPRI
 80056e8:	f04f 0120 	mov.w	r1, #32
 80056ec:	f381 8811 	msr	BASEPRI, r1
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	4819      	ldr	r0, [pc, #100]	; (8005758 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80056f4:	f7ff f8a3 	bl	800483e <_PreparePacket>
 80056f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056fe:	4b17      	ldr	r3, [pc, #92]	; (800575c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	61bb      	str	r3, [r7, #24]
 8005710:	e00b      	b.n	800572a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	b2da      	uxtb	r2, r3
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	1c59      	adds	r1, r3, #1
 800571a:	61f9      	str	r1, [r7, #28]
 800571c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005720:	b2d2      	uxtb	r2, r2
 8005722:	701a      	strb	r2, [r3, #0]
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	09db      	lsrs	r3, r3, #7
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	2b7f      	cmp	r3, #127	; 0x7f
 800572e:	d8f0      	bhi.n	8005712 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	61fa      	str	r2, [r7, #28]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005740:	2206      	movs	r2, #6
 8005742:	68f9      	ldr	r1, [r7, #12]
 8005744:	6938      	ldr	r0, [r7, #16]
 8005746:	f7ff f967 	bl	8004a18 <_SendPacket>
  RECORD_END();
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f383 8811 	msr	BASEPRI, r3
}
 8005750:	bf00      	nop
 8005752:	3720      	adds	r7, #32
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	200132b0 	.word	0x200132b0
 800575c:	20013280 	.word	0x20013280

08005760 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b08a      	sub	sp, #40	; 0x28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800576a:	f3ef 8311 	mrs	r3, BASEPRI
 800576e:	f04f 0120 	mov.w	r1, #32
 8005772:	f381 8811 	msr	BASEPRI, r1
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	4827      	ldr	r0, [pc, #156]	; (8005818 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800577a:	f7ff f860 	bl	800483e <_PreparePacket>
 800577e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005784:	4b25      	ldr	r3, [pc, #148]	; (800581c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	627b      	str	r3, [r7, #36]	; 0x24
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	623b      	str	r3, [r7, #32]
 8005796:	e00b      	b.n	80057b0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	b2da      	uxtb	r2, r3
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	1c59      	adds	r1, r3, #1
 80057a0:	6279      	str	r1, [r7, #36]	; 0x24
 80057a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	09db      	lsrs	r3, r3, #7
 80057ae:	623b      	str	r3, [r7, #32]
 80057b0:	6a3b      	ldr	r3, [r7, #32]
 80057b2:	2b7f      	cmp	r3, #127	; 0x7f
 80057b4:	d8f0      	bhi.n	8005798 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	627a      	str	r2, [r7, #36]	; 0x24
 80057bc:	6a3a      	ldr	r2, [r7, #32]
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	61bb      	str	r3, [r7, #24]
 80057ce:	e00b      	b.n	80057e8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	1c59      	adds	r1, r3, #1
 80057d8:	61f9      	str	r1, [r7, #28]
 80057da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	09db      	lsrs	r3, r3, #7
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	2b7f      	cmp	r3, #127	; 0x7f
 80057ec:	d8f0      	bhi.n	80057d0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	61fa      	str	r2, [r7, #28]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80057fe:	2207      	movs	r2, #7
 8005800:	68f9      	ldr	r1, [r7, #12]
 8005802:	6938      	ldr	r0, [r7, #16]
 8005804:	f7ff f908 	bl	8004a18 <_SendPacket>
  RECORD_END();
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f383 8811 	msr	BASEPRI, r3
}
 800580e:	bf00      	nop
 8005810:	3728      	adds	r7, #40	; 0x28
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	200132b0 	.word	0x200132b0
 800581c:	20013280 	.word	0x20013280

08005820 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005828:	4b04      	ldr	r3, [pc, #16]	; (800583c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	1ad3      	subs	r3, r2, r3
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	20013280 	.word	0x20013280

08005840 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005840:	b580      	push	{r7, lr}
 8005842:	b08c      	sub	sp, #48	; 0x30
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800584a:	4b3b      	ldr	r3, [pc, #236]	; (8005938 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d06d      	beq.n	800592e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8005852:	4b39      	ldr	r3, [pc, #228]	; (8005938 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005858:	2300      	movs	r3, #0
 800585a:	62bb      	str	r3, [r7, #40]	; 0x28
 800585c:	e008      	b.n	8005870 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	3301      	adds	r3, #1
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005870:	79fb      	ldrb	r3, [r7, #7]
 8005872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005874:	429a      	cmp	r2, r3
 8005876:	d3f2      	bcc.n	800585e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005878:	e000      	b.n	800587c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800587a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	2b00      	cmp	r3, #0
 8005880:	d055      	beq.n	800592e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005882:	f3ef 8311 	mrs	r3, BASEPRI
 8005886:	f04f 0120 	mov.w	r1, #32
 800588a:	f381 8811 	msr	BASEPRI, r1
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	482a      	ldr	r0, [pc, #168]	; (800593c <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005892:	f7fe ffd4 	bl	800483e <_PreparePacket>
 8005896:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	623b      	str	r3, [r7, #32]
 80058a4:	e00b      	b.n	80058be <SEGGER_SYSVIEW_SendModule+0x7e>
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	1c59      	adds	r1, r3, #1
 80058ae:	6279      	str	r1, [r7, #36]	; 0x24
 80058b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	09db      	lsrs	r3, r3, #7
 80058bc:	623b      	str	r3, [r7, #32]
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	2b7f      	cmp	r3, #127	; 0x7f
 80058c2:	d8f0      	bhi.n	80058a6 <SEGGER_SYSVIEW_SendModule+0x66>
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	627a      	str	r2, [r7, #36]	; 0x24
 80058ca:	6a3a      	ldr	r2, [r7, #32]
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	61fb      	str	r3, [r7, #28]
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	e00b      	b.n	80058f8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	1c59      	adds	r1, r3, #1
 80058e8:	61f9      	str	r1, [r7, #28]
 80058ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	09db      	lsrs	r3, r3, #7
 80058f6:	61bb      	str	r3, [r7, #24]
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	2b7f      	cmp	r3, #127	; 0x7f
 80058fc:	d8f0      	bhi.n	80058e0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	1c5a      	adds	r2, r3, #1
 8005902:	61fa      	str	r2, [r7, #28]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2280      	movs	r2, #128	; 0x80
 8005914:	4619      	mov	r1, r3
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f7fe ff44 	bl	80047a4 <_EncodeStr>
 800591c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800591e:	2216      	movs	r2, #22
 8005920:	68f9      	ldr	r1, [r7, #12]
 8005922:	6938      	ldr	r0, [r7, #16]
 8005924:	f7ff f878 	bl	8004a18 <_SendPacket>
      RECORD_END();
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800592e:	bf00      	nop
 8005930:	3730      	adds	r7, #48	; 0x30
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	200132a8 	.word	0x200132a8
 800593c:	200132b0 	.word	0x200132b0

08005940 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005946:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00f      	beq.n	800596e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800594e:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f2      	bne.n	8005954 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	200132a8 	.word	0x200132a8

0800597c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800597c:	b580      	push	{r7, lr}
 800597e:	b086      	sub	sp, #24
 8005980:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005982:	f3ef 8311 	mrs	r3, BASEPRI
 8005986:	f04f 0120 	mov.w	r1, #32
 800598a:	f381 8811 	msr	BASEPRI, r1
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	4817      	ldr	r0, [pc, #92]	; (80059f0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005992:	f7fe ff54 	bl	800483e <_PreparePacket>
 8005996:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	4b14      	ldr	r3, [pc, #80]	; (80059f4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	e00b      	b.n	80059c0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	1c59      	adds	r1, r3, #1
 80059b0:	6179      	str	r1, [r7, #20]
 80059b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	09db      	lsrs	r3, r3, #7
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	2b7f      	cmp	r3, #127	; 0x7f
 80059c4:	d8f0      	bhi.n	80059a8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	617a      	str	r2, [r7, #20]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	b2d2      	uxtb	r2, r2
 80059d0:	701a      	strb	r2, [r3, #0]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80059d6:	221b      	movs	r2, #27
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	68b8      	ldr	r0, [r7, #8]
 80059dc:	f7ff f81c 	bl	8004a18 <_SendPacket>
  RECORD_END();
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f383 8811 	msr	BASEPRI, r3
}
 80059e6:	bf00      	nop
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	200132b0 	.word	0x200132b0
 80059f4:	200132ac 	.word	0x200132ac

080059f8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08a      	sub	sp, #40	; 0x28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a00:	f3ef 8311 	mrs	r3, BASEPRI
 8005a04:	f04f 0120 	mov.w	r1, #32
 8005a08:	f381 8811 	msr	BASEPRI, r1
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	4827      	ldr	r0, [pc, #156]	; (8005aac <SEGGER_SYSVIEW_Warn+0xb4>)
 8005a10:	f7fe ff15 	bl	800483e <_PreparePacket>
 8005a14:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005a16:	2280      	movs	r2, #128	; 0x80
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	6938      	ldr	r0, [r7, #16]
 8005a1c:	f7fe fec2 	bl	80047a4 <_EncodeStr>
 8005a20:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	627b      	str	r3, [r7, #36]	; 0x24
 8005a26:	2301      	movs	r3, #1
 8005a28:	623b      	str	r3, [r7, #32]
 8005a2a:	e00b      	b.n	8005a44 <SEGGER_SYSVIEW_Warn+0x4c>
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	1c59      	adds	r1, r3, #1
 8005a34:	6279      	str	r1, [r7, #36]	; 0x24
 8005a36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a3a:	b2d2      	uxtb	r2, r2
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	09db      	lsrs	r3, r3, #7
 8005a42:	623b      	str	r3, [r7, #32]
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	2b7f      	cmp	r3, #127	; 0x7f
 8005a48:	d8f0      	bhi.n	8005a2c <SEGGER_SYSVIEW_Warn+0x34>
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	627a      	str	r2, [r7, #36]	; 0x24
 8005a50:	6a3a      	ldr	r2, [r7, #32]
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	61fb      	str	r3, [r7, #28]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	e00b      	b.n	8005a7c <SEGGER_SYSVIEW_Warn+0x84>
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	1c59      	adds	r1, r3, #1
 8005a6c:	61f9      	str	r1, [r7, #28]
 8005a6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a72:	b2d2      	uxtb	r2, r2
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	09db      	lsrs	r3, r3, #7
 8005a7a:	61bb      	str	r3, [r7, #24]
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005a80:	d8f0      	bhi.n	8005a64 <SEGGER_SYSVIEW_Warn+0x6c>
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	61fa      	str	r2, [r7, #28]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a92:	221a      	movs	r2, #26
 8005a94:	68f9      	ldr	r1, [r7, #12]
 8005a96:	6938      	ldr	r0, [r7, #16]
 8005a98:	f7fe ffbe 	bl	8004a18 <_SendPacket>
  RECORD_END();
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f383 8811 	msr	BASEPRI, r3
}
 8005aa2:	bf00      	nop
 8005aa4:	3728      	adds	r7, #40	; 0x28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	200132b0 	.word	0x200132b0

08005ab0 <__libc_init_array>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	4e0d      	ldr	r6, [pc, #52]	; (8005ae8 <__libc_init_array+0x38>)
 8005ab4:	4c0d      	ldr	r4, [pc, #52]	; (8005aec <__libc_init_array+0x3c>)
 8005ab6:	1ba4      	subs	r4, r4, r6
 8005ab8:	10a4      	asrs	r4, r4, #2
 8005aba:	2500      	movs	r5, #0
 8005abc:	42a5      	cmp	r5, r4
 8005abe:	d109      	bne.n	8005ad4 <__libc_init_array+0x24>
 8005ac0:	4e0b      	ldr	r6, [pc, #44]	; (8005af0 <__libc_init_array+0x40>)
 8005ac2:	4c0c      	ldr	r4, [pc, #48]	; (8005af4 <__libc_init_array+0x44>)
 8005ac4:	f000 fc58 	bl	8006378 <_init>
 8005ac8:	1ba4      	subs	r4, r4, r6
 8005aca:	10a4      	asrs	r4, r4, #2
 8005acc:	2500      	movs	r5, #0
 8005ace:	42a5      	cmp	r5, r4
 8005ad0:	d105      	bne.n	8005ade <__libc_init_array+0x2e>
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ad8:	4798      	blx	r3
 8005ada:	3501      	adds	r5, #1
 8005adc:	e7ee      	b.n	8005abc <__libc_init_array+0xc>
 8005ade:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ae2:	4798      	blx	r3
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	e7f2      	b.n	8005ace <__libc_init_array+0x1e>
 8005ae8:	080064f4 	.word	0x080064f4
 8005aec:	080064f4 	.word	0x080064f4
 8005af0:	080064f4 	.word	0x080064f4
 8005af4:	080064f8 	.word	0x080064f8

08005af8 <memcmp>:
 8005af8:	b530      	push	{r4, r5, lr}
 8005afa:	2400      	movs	r4, #0
 8005afc:	42a2      	cmp	r2, r4
 8005afe:	d101      	bne.n	8005b04 <memcmp+0xc>
 8005b00:	2000      	movs	r0, #0
 8005b02:	e007      	b.n	8005b14 <memcmp+0x1c>
 8005b04:	5d03      	ldrb	r3, [r0, r4]
 8005b06:	3401      	adds	r4, #1
 8005b08:	190d      	adds	r5, r1, r4
 8005b0a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8005b0e:	42ab      	cmp	r3, r5
 8005b10:	d0f4      	beq.n	8005afc <memcmp+0x4>
 8005b12:	1b58      	subs	r0, r3, r5
 8005b14:	bd30      	pop	{r4, r5, pc}

08005b16 <memcpy>:
 8005b16:	b510      	push	{r4, lr}
 8005b18:	1e43      	subs	r3, r0, #1
 8005b1a:	440a      	add	r2, r1
 8005b1c:	4291      	cmp	r1, r2
 8005b1e:	d100      	bne.n	8005b22 <memcpy+0xc>
 8005b20:	bd10      	pop	{r4, pc}
 8005b22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b2a:	e7f7      	b.n	8005b1c <memcpy+0x6>

08005b2c <memset>:
 8005b2c:	4402      	add	r2, r0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d100      	bne.n	8005b36 <memset+0xa>
 8005b34:	4770      	bx	lr
 8005b36:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3a:	e7f9      	b.n	8005b30 <memset+0x4>

08005b3c <sniprintf>:
 8005b3c:	b40c      	push	{r2, r3}
 8005b3e:	b530      	push	{r4, r5, lr}
 8005b40:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <sniprintf+0x64>)
 8005b42:	1e0c      	subs	r4, r1, #0
 8005b44:	b09d      	sub	sp, #116	; 0x74
 8005b46:	681d      	ldr	r5, [r3, #0]
 8005b48:	da08      	bge.n	8005b5c <sniprintf+0x20>
 8005b4a:	238b      	movs	r3, #139	; 0x8b
 8005b4c:	602b      	str	r3, [r5, #0]
 8005b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b52:	b01d      	add	sp, #116	; 0x74
 8005b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b58:	b002      	add	sp, #8
 8005b5a:	4770      	bx	lr
 8005b5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b64:	bf14      	ite	ne
 8005b66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b6a:	4623      	moveq	r3, r4
 8005b6c:	9304      	str	r3, [sp, #16]
 8005b6e:	9307      	str	r3, [sp, #28]
 8005b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b74:	9002      	str	r0, [sp, #8]
 8005b76:	9006      	str	r0, [sp, #24]
 8005b78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b7e:	ab21      	add	r3, sp, #132	; 0x84
 8005b80:	a902      	add	r1, sp, #8
 8005b82:	4628      	mov	r0, r5
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	f000 f867 	bl	8005c58 <_svfiprintf_r>
 8005b8a:	1c43      	adds	r3, r0, #1
 8005b8c:	bfbc      	itt	lt
 8005b8e:	238b      	movlt	r3, #139	; 0x8b
 8005b90:	602b      	strlt	r3, [r5, #0]
 8005b92:	2c00      	cmp	r4, #0
 8005b94:	d0dd      	beq.n	8005b52 <sniprintf+0x16>
 8005b96:	9b02      	ldr	r3, [sp, #8]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	e7d9      	b.n	8005b52 <sniprintf+0x16>
 8005b9e:	bf00      	nop
 8005ba0:	20000014 	.word	0x20000014

08005ba4 <__ssputs_r>:
 8005ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ba8:	688e      	ldr	r6, [r1, #8]
 8005baa:	429e      	cmp	r6, r3
 8005bac:	4682      	mov	sl, r0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	4690      	mov	r8, r2
 8005bb2:	4699      	mov	r9, r3
 8005bb4:	d837      	bhi.n	8005c26 <__ssputs_r+0x82>
 8005bb6:	898a      	ldrh	r2, [r1, #12]
 8005bb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005bbc:	d031      	beq.n	8005c22 <__ssputs_r+0x7e>
 8005bbe:	6825      	ldr	r5, [r4, #0]
 8005bc0:	6909      	ldr	r1, [r1, #16]
 8005bc2:	1a6f      	subs	r7, r5, r1
 8005bc4:	6965      	ldr	r5, [r4, #20]
 8005bc6:	2302      	movs	r3, #2
 8005bc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bcc:	fb95 f5f3 	sdiv	r5, r5, r3
 8005bd0:	f109 0301 	add.w	r3, r9, #1
 8005bd4:	443b      	add	r3, r7
 8005bd6:	429d      	cmp	r5, r3
 8005bd8:	bf38      	it	cc
 8005bda:	461d      	movcc	r5, r3
 8005bdc:	0553      	lsls	r3, r2, #21
 8005bde:	d530      	bpl.n	8005c42 <__ssputs_r+0x9e>
 8005be0:	4629      	mov	r1, r5
 8005be2:	f000 fb21 	bl	8006228 <_malloc_r>
 8005be6:	4606      	mov	r6, r0
 8005be8:	b950      	cbnz	r0, 8005c00 <__ssputs_r+0x5c>
 8005bea:	230c      	movs	r3, #12
 8005bec:	f8ca 3000 	str.w	r3, [sl]
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bf6:	81a3      	strh	r3, [r4, #12]
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c00:	463a      	mov	r2, r7
 8005c02:	6921      	ldr	r1, [r4, #16]
 8005c04:	f7ff ff87 	bl	8005b16 <memcpy>
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c12:	81a3      	strh	r3, [r4, #12]
 8005c14:	6126      	str	r6, [r4, #16]
 8005c16:	6165      	str	r5, [r4, #20]
 8005c18:	443e      	add	r6, r7
 8005c1a:	1bed      	subs	r5, r5, r7
 8005c1c:	6026      	str	r6, [r4, #0]
 8005c1e:	60a5      	str	r5, [r4, #8]
 8005c20:	464e      	mov	r6, r9
 8005c22:	454e      	cmp	r6, r9
 8005c24:	d900      	bls.n	8005c28 <__ssputs_r+0x84>
 8005c26:	464e      	mov	r6, r9
 8005c28:	4632      	mov	r2, r6
 8005c2a:	4641      	mov	r1, r8
 8005c2c:	6820      	ldr	r0, [r4, #0]
 8005c2e:	f000 fa93 	bl	8006158 <memmove>
 8005c32:	68a3      	ldr	r3, [r4, #8]
 8005c34:	1b9b      	subs	r3, r3, r6
 8005c36:	60a3      	str	r3, [r4, #8]
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	441e      	add	r6, r3
 8005c3c:	6026      	str	r6, [r4, #0]
 8005c3e:	2000      	movs	r0, #0
 8005c40:	e7dc      	b.n	8005bfc <__ssputs_r+0x58>
 8005c42:	462a      	mov	r2, r5
 8005c44:	f000 fb4a 	bl	80062dc <_realloc_r>
 8005c48:	4606      	mov	r6, r0
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d1e2      	bne.n	8005c14 <__ssputs_r+0x70>
 8005c4e:	6921      	ldr	r1, [r4, #16]
 8005c50:	4650      	mov	r0, sl
 8005c52:	f000 fa9b 	bl	800618c <_free_r>
 8005c56:	e7c8      	b.n	8005bea <__ssputs_r+0x46>

08005c58 <_svfiprintf_r>:
 8005c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5c:	461d      	mov	r5, r3
 8005c5e:	898b      	ldrh	r3, [r1, #12]
 8005c60:	061f      	lsls	r7, r3, #24
 8005c62:	b09d      	sub	sp, #116	; 0x74
 8005c64:	4680      	mov	r8, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	4616      	mov	r6, r2
 8005c6a:	d50f      	bpl.n	8005c8c <_svfiprintf_r+0x34>
 8005c6c:	690b      	ldr	r3, [r1, #16]
 8005c6e:	b96b      	cbnz	r3, 8005c8c <_svfiprintf_r+0x34>
 8005c70:	2140      	movs	r1, #64	; 0x40
 8005c72:	f000 fad9 	bl	8006228 <_malloc_r>
 8005c76:	6020      	str	r0, [r4, #0]
 8005c78:	6120      	str	r0, [r4, #16]
 8005c7a:	b928      	cbnz	r0, 8005c88 <_svfiprintf_r+0x30>
 8005c7c:	230c      	movs	r3, #12
 8005c7e:	f8c8 3000 	str.w	r3, [r8]
 8005c82:	f04f 30ff 	mov.w	r0, #4294967295
 8005c86:	e0c8      	b.n	8005e1a <_svfiprintf_r+0x1c2>
 8005c88:	2340      	movs	r3, #64	; 0x40
 8005c8a:	6163      	str	r3, [r4, #20]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c90:	2320      	movs	r3, #32
 8005c92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c96:	2330      	movs	r3, #48	; 0x30
 8005c98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c9c:	9503      	str	r5, [sp, #12]
 8005c9e:	f04f 0b01 	mov.w	fp, #1
 8005ca2:	4637      	mov	r7, r6
 8005ca4:	463d      	mov	r5, r7
 8005ca6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005caa:	b10b      	cbz	r3, 8005cb0 <_svfiprintf_r+0x58>
 8005cac:	2b25      	cmp	r3, #37	; 0x25
 8005cae:	d13e      	bne.n	8005d2e <_svfiprintf_r+0xd6>
 8005cb0:	ebb7 0a06 	subs.w	sl, r7, r6
 8005cb4:	d00b      	beq.n	8005cce <_svfiprintf_r+0x76>
 8005cb6:	4653      	mov	r3, sl
 8005cb8:	4632      	mov	r2, r6
 8005cba:	4621      	mov	r1, r4
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	f7ff ff71 	bl	8005ba4 <__ssputs_r>
 8005cc2:	3001      	adds	r0, #1
 8005cc4:	f000 80a4 	beq.w	8005e10 <_svfiprintf_r+0x1b8>
 8005cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cca:	4453      	add	r3, sl
 8005ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cce:	783b      	ldrb	r3, [r7, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 809d 	beq.w	8005e10 <_svfiprintf_r+0x1b8>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ce0:	9304      	str	r3, [sp, #16]
 8005ce2:	9307      	str	r3, [sp, #28]
 8005ce4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ce8:	931a      	str	r3, [sp, #104]	; 0x68
 8005cea:	462f      	mov	r7, r5
 8005cec:	2205      	movs	r2, #5
 8005cee:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005cf2:	4850      	ldr	r0, [pc, #320]	; (8005e34 <_svfiprintf_r+0x1dc>)
 8005cf4:	f7fa fabc 	bl	8000270 <memchr>
 8005cf8:	9b04      	ldr	r3, [sp, #16]
 8005cfa:	b9d0      	cbnz	r0, 8005d32 <_svfiprintf_r+0xda>
 8005cfc:	06d9      	lsls	r1, r3, #27
 8005cfe:	bf44      	itt	mi
 8005d00:	2220      	movmi	r2, #32
 8005d02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d06:	071a      	lsls	r2, r3, #28
 8005d08:	bf44      	itt	mi
 8005d0a:	222b      	movmi	r2, #43	; 0x2b
 8005d0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d10:	782a      	ldrb	r2, [r5, #0]
 8005d12:	2a2a      	cmp	r2, #42	; 0x2a
 8005d14:	d015      	beq.n	8005d42 <_svfiprintf_r+0xea>
 8005d16:	9a07      	ldr	r2, [sp, #28]
 8005d18:	462f      	mov	r7, r5
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	250a      	movs	r5, #10
 8005d1e:	4639      	mov	r1, r7
 8005d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d24:	3b30      	subs	r3, #48	; 0x30
 8005d26:	2b09      	cmp	r3, #9
 8005d28:	d94d      	bls.n	8005dc6 <_svfiprintf_r+0x16e>
 8005d2a:	b1b8      	cbz	r0, 8005d5c <_svfiprintf_r+0x104>
 8005d2c:	e00f      	b.n	8005d4e <_svfiprintf_r+0xf6>
 8005d2e:	462f      	mov	r7, r5
 8005d30:	e7b8      	b.n	8005ca4 <_svfiprintf_r+0x4c>
 8005d32:	4a40      	ldr	r2, [pc, #256]	; (8005e34 <_svfiprintf_r+0x1dc>)
 8005d34:	1a80      	subs	r0, r0, r2
 8005d36:	fa0b f000 	lsl.w	r0, fp, r0
 8005d3a:	4318      	orrs	r0, r3
 8005d3c:	9004      	str	r0, [sp, #16]
 8005d3e:	463d      	mov	r5, r7
 8005d40:	e7d3      	b.n	8005cea <_svfiprintf_r+0x92>
 8005d42:	9a03      	ldr	r2, [sp, #12]
 8005d44:	1d11      	adds	r1, r2, #4
 8005d46:	6812      	ldr	r2, [r2, #0]
 8005d48:	9103      	str	r1, [sp, #12]
 8005d4a:	2a00      	cmp	r2, #0
 8005d4c:	db01      	blt.n	8005d52 <_svfiprintf_r+0xfa>
 8005d4e:	9207      	str	r2, [sp, #28]
 8005d50:	e004      	b.n	8005d5c <_svfiprintf_r+0x104>
 8005d52:	4252      	negs	r2, r2
 8005d54:	f043 0302 	orr.w	r3, r3, #2
 8005d58:	9207      	str	r2, [sp, #28]
 8005d5a:	9304      	str	r3, [sp, #16]
 8005d5c:	783b      	ldrb	r3, [r7, #0]
 8005d5e:	2b2e      	cmp	r3, #46	; 0x2e
 8005d60:	d10c      	bne.n	8005d7c <_svfiprintf_r+0x124>
 8005d62:	787b      	ldrb	r3, [r7, #1]
 8005d64:	2b2a      	cmp	r3, #42	; 0x2a
 8005d66:	d133      	bne.n	8005dd0 <_svfiprintf_r+0x178>
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	1d1a      	adds	r2, r3, #4
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	9203      	str	r2, [sp, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	bfb8      	it	lt
 8005d74:	f04f 33ff 	movlt.w	r3, #4294967295
 8005d78:	3702      	adds	r7, #2
 8005d7a:	9305      	str	r3, [sp, #20]
 8005d7c:	4d2e      	ldr	r5, [pc, #184]	; (8005e38 <_svfiprintf_r+0x1e0>)
 8005d7e:	7839      	ldrb	r1, [r7, #0]
 8005d80:	2203      	movs	r2, #3
 8005d82:	4628      	mov	r0, r5
 8005d84:	f7fa fa74 	bl	8000270 <memchr>
 8005d88:	b138      	cbz	r0, 8005d9a <_svfiprintf_r+0x142>
 8005d8a:	2340      	movs	r3, #64	; 0x40
 8005d8c:	1b40      	subs	r0, r0, r5
 8005d8e:	fa03 f000 	lsl.w	r0, r3, r0
 8005d92:	9b04      	ldr	r3, [sp, #16]
 8005d94:	4303      	orrs	r3, r0
 8005d96:	3701      	adds	r7, #1
 8005d98:	9304      	str	r3, [sp, #16]
 8005d9a:	7839      	ldrb	r1, [r7, #0]
 8005d9c:	4827      	ldr	r0, [pc, #156]	; (8005e3c <_svfiprintf_r+0x1e4>)
 8005d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005da2:	2206      	movs	r2, #6
 8005da4:	1c7e      	adds	r6, r7, #1
 8005da6:	f7fa fa63 	bl	8000270 <memchr>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d038      	beq.n	8005e20 <_svfiprintf_r+0x1c8>
 8005dae:	4b24      	ldr	r3, [pc, #144]	; (8005e40 <_svfiprintf_r+0x1e8>)
 8005db0:	bb13      	cbnz	r3, 8005df8 <_svfiprintf_r+0x1a0>
 8005db2:	9b03      	ldr	r3, [sp, #12]
 8005db4:	3307      	adds	r3, #7
 8005db6:	f023 0307 	bic.w	r3, r3, #7
 8005dba:	3308      	adds	r3, #8
 8005dbc:	9303      	str	r3, [sp, #12]
 8005dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dc0:	444b      	add	r3, r9
 8005dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc4:	e76d      	b.n	8005ca2 <_svfiprintf_r+0x4a>
 8005dc6:	fb05 3202 	mla	r2, r5, r2, r3
 8005dca:	2001      	movs	r0, #1
 8005dcc:	460f      	mov	r7, r1
 8005dce:	e7a6      	b.n	8005d1e <_svfiprintf_r+0xc6>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	3701      	adds	r7, #1
 8005dd4:	9305      	str	r3, [sp, #20]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	250a      	movs	r5, #10
 8005dda:	4638      	mov	r0, r7
 8005ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005de0:	3a30      	subs	r2, #48	; 0x30
 8005de2:	2a09      	cmp	r2, #9
 8005de4:	d903      	bls.n	8005dee <_svfiprintf_r+0x196>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d0c8      	beq.n	8005d7c <_svfiprintf_r+0x124>
 8005dea:	9105      	str	r1, [sp, #20]
 8005dec:	e7c6      	b.n	8005d7c <_svfiprintf_r+0x124>
 8005dee:	fb05 2101 	mla	r1, r5, r1, r2
 8005df2:	2301      	movs	r3, #1
 8005df4:	4607      	mov	r7, r0
 8005df6:	e7f0      	b.n	8005dda <_svfiprintf_r+0x182>
 8005df8:	ab03      	add	r3, sp, #12
 8005dfa:	9300      	str	r3, [sp, #0]
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	4b11      	ldr	r3, [pc, #68]	; (8005e44 <_svfiprintf_r+0x1ec>)
 8005e00:	a904      	add	r1, sp, #16
 8005e02:	4640      	mov	r0, r8
 8005e04:	f3af 8000 	nop.w
 8005e08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e0c:	4681      	mov	r9, r0
 8005e0e:	d1d6      	bne.n	8005dbe <_svfiprintf_r+0x166>
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	065b      	lsls	r3, r3, #25
 8005e14:	f53f af35 	bmi.w	8005c82 <_svfiprintf_r+0x2a>
 8005e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e1a:	b01d      	add	sp, #116	; 0x74
 8005e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e20:	ab03      	add	r3, sp, #12
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	4622      	mov	r2, r4
 8005e26:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <_svfiprintf_r+0x1ec>)
 8005e28:	a904      	add	r1, sp, #16
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	f000 f882 	bl	8005f34 <_printf_i>
 8005e30:	e7ea      	b.n	8005e08 <_svfiprintf_r+0x1b0>
 8005e32:	bf00      	nop
 8005e34:	080064b6 	.word	0x080064b6
 8005e38:	080064bc 	.word	0x080064bc
 8005e3c:	080064c0 	.word	0x080064c0
 8005e40:	00000000 	.word	0x00000000
 8005e44:	08005ba5 	.word	0x08005ba5

08005e48 <_printf_common>:
 8005e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	4691      	mov	r9, r2
 8005e4e:	461f      	mov	r7, r3
 8005e50:	688a      	ldr	r2, [r1, #8]
 8005e52:	690b      	ldr	r3, [r1, #16]
 8005e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	bfb8      	it	lt
 8005e5c:	4613      	movlt	r3, r2
 8005e5e:	f8c9 3000 	str.w	r3, [r9]
 8005e62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e66:	4606      	mov	r6, r0
 8005e68:	460c      	mov	r4, r1
 8005e6a:	b112      	cbz	r2, 8005e72 <_printf_common+0x2a>
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	f8c9 3000 	str.w	r3, [r9]
 8005e72:	6823      	ldr	r3, [r4, #0]
 8005e74:	0699      	lsls	r1, r3, #26
 8005e76:	bf42      	ittt	mi
 8005e78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005e7c:	3302      	addmi	r3, #2
 8005e7e:	f8c9 3000 	strmi.w	r3, [r9]
 8005e82:	6825      	ldr	r5, [r4, #0]
 8005e84:	f015 0506 	ands.w	r5, r5, #6
 8005e88:	d107      	bne.n	8005e9a <_printf_common+0x52>
 8005e8a:	f104 0a19 	add.w	sl, r4, #25
 8005e8e:	68e3      	ldr	r3, [r4, #12]
 8005e90:	f8d9 2000 	ldr.w	r2, [r9]
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	42ab      	cmp	r3, r5
 8005e98:	dc28      	bgt.n	8005eec <_printf_common+0xa4>
 8005e9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005e9e:	6822      	ldr	r2, [r4, #0]
 8005ea0:	3300      	adds	r3, #0
 8005ea2:	bf18      	it	ne
 8005ea4:	2301      	movne	r3, #1
 8005ea6:	0692      	lsls	r2, r2, #26
 8005ea8:	d42d      	bmi.n	8005f06 <_printf_common+0xbe>
 8005eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005eae:	4639      	mov	r1, r7
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	47c0      	blx	r8
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	d020      	beq.n	8005efa <_printf_common+0xb2>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	68e5      	ldr	r5, [r4, #12]
 8005ebc:	f8d9 2000 	ldr.w	r2, [r9]
 8005ec0:	f003 0306 	and.w	r3, r3, #6
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	bf08      	it	eq
 8005ec8:	1aad      	subeq	r5, r5, r2
 8005eca:	68a3      	ldr	r3, [r4, #8]
 8005ecc:	6922      	ldr	r2, [r4, #16]
 8005ece:	bf0c      	ite	eq
 8005ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ed4:	2500      	movne	r5, #0
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	bfc4      	itt	gt
 8005eda:	1a9b      	subgt	r3, r3, r2
 8005edc:	18ed      	addgt	r5, r5, r3
 8005ede:	f04f 0900 	mov.w	r9, #0
 8005ee2:	341a      	adds	r4, #26
 8005ee4:	454d      	cmp	r5, r9
 8005ee6:	d11a      	bne.n	8005f1e <_printf_common+0xd6>
 8005ee8:	2000      	movs	r0, #0
 8005eea:	e008      	b.n	8005efe <_printf_common+0xb6>
 8005eec:	2301      	movs	r3, #1
 8005eee:	4652      	mov	r2, sl
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	47c0      	blx	r8
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d103      	bne.n	8005f02 <_printf_common+0xba>
 8005efa:	f04f 30ff 	mov.w	r0, #4294967295
 8005efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f02:	3501      	adds	r5, #1
 8005f04:	e7c3      	b.n	8005e8e <_printf_common+0x46>
 8005f06:	18e1      	adds	r1, r4, r3
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	2030      	movs	r0, #48	; 0x30
 8005f0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f10:	4422      	add	r2, r4
 8005f12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	e7c5      	b.n	8005eaa <_printf_common+0x62>
 8005f1e:	2301      	movs	r3, #1
 8005f20:	4622      	mov	r2, r4
 8005f22:	4639      	mov	r1, r7
 8005f24:	4630      	mov	r0, r6
 8005f26:	47c0      	blx	r8
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d0e6      	beq.n	8005efa <_printf_common+0xb2>
 8005f2c:	f109 0901 	add.w	r9, r9, #1
 8005f30:	e7d8      	b.n	8005ee4 <_printf_common+0x9c>
	...

08005f34 <_printf_i>:
 8005f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	7e09      	ldrb	r1, [r1, #24]
 8005f40:	b085      	sub	sp, #20
 8005f42:	296e      	cmp	r1, #110	; 0x6e
 8005f44:	4617      	mov	r7, r2
 8005f46:	4606      	mov	r6, r0
 8005f48:	4698      	mov	r8, r3
 8005f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f4c:	f000 80b3 	beq.w	80060b6 <_printf_i+0x182>
 8005f50:	d822      	bhi.n	8005f98 <_printf_i+0x64>
 8005f52:	2963      	cmp	r1, #99	; 0x63
 8005f54:	d036      	beq.n	8005fc4 <_printf_i+0x90>
 8005f56:	d80a      	bhi.n	8005f6e <_printf_i+0x3a>
 8005f58:	2900      	cmp	r1, #0
 8005f5a:	f000 80b9 	beq.w	80060d0 <_printf_i+0x19c>
 8005f5e:	2958      	cmp	r1, #88	; 0x58
 8005f60:	f000 8083 	beq.w	800606a <_printf_i+0x136>
 8005f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005f6c:	e032      	b.n	8005fd4 <_printf_i+0xa0>
 8005f6e:	2964      	cmp	r1, #100	; 0x64
 8005f70:	d001      	beq.n	8005f76 <_printf_i+0x42>
 8005f72:	2969      	cmp	r1, #105	; 0x69
 8005f74:	d1f6      	bne.n	8005f64 <_printf_i+0x30>
 8005f76:	6820      	ldr	r0, [r4, #0]
 8005f78:	6813      	ldr	r3, [r2, #0]
 8005f7a:	0605      	lsls	r5, r0, #24
 8005f7c:	f103 0104 	add.w	r1, r3, #4
 8005f80:	d52a      	bpl.n	8005fd8 <_printf_i+0xa4>
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	da03      	bge.n	8005f92 <_printf_i+0x5e>
 8005f8a:	222d      	movs	r2, #45	; 0x2d
 8005f8c:	425b      	negs	r3, r3
 8005f8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005f92:	486f      	ldr	r0, [pc, #444]	; (8006150 <_printf_i+0x21c>)
 8005f94:	220a      	movs	r2, #10
 8005f96:	e039      	b.n	800600c <_printf_i+0xd8>
 8005f98:	2973      	cmp	r1, #115	; 0x73
 8005f9a:	f000 809d 	beq.w	80060d8 <_printf_i+0x1a4>
 8005f9e:	d808      	bhi.n	8005fb2 <_printf_i+0x7e>
 8005fa0:	296f      	cmp	r1, #111	; 0x6f
 8005fa2:	d020      	beq.n	8005fe6 <_printf_i+0xb2>
 8005fa4:	2970      	cmp	r1, #112	; 0x70
 8005fa6:	d1dd      	bne.n	8005f64 <_printf_i+0x30>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	f043 0320 	orr.w	r3, r3, #32
 8005fae:	6023      	str	r3, [r4, #0]
 8005fb0:	e003      	b.n	8005fba <_printf_i+0x86>
 8005fb2:	2975      	cmp	r1, #117	; 0x75
 8005fb4:	d017      	beq.n	8005fe6 <_printf_i+0xb2>
 8005fb6:	2978      	cmp	r1, #120	; 0x78
 8005fb8:	d1d4      	bne.n	8005f64 <_printf_i+0x30>
 8005fba:	2378      	movs	r3, #120	; 0x78
 8005fbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fc0:	4864      	ldr	r0, [pc, #400]	; (8006154 <_printf_i+0x220>)
 8005fc2:	e055      	b.n	8006070 <_printf_i+0x13c>
 8005fc4:	6813      	ldr	r3, [r2, #0]
 8005fc6:	1d19      	adds	r1, r3, #4
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	6011      	str	r1, [r2, #0]
 8005fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e08c      	b.n	80060f2 <_printf_i+0x1be>
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6011      	str	r1, [r2, #0]
 8005fdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005fe0:	bf18      	it	ne
 8005fe2:	b21b      	sxthne	r3, r3
 8005fe4:	e7cf      	b.n	8005f86 <_printf_i+0x52>
 8005fe6:	6813      	ldr	r3, [r2, #0]
 8005fe8:	6825      	ldr	r5, [r4, #0]
 8005fea:	1d18      	adds	r0, r3, #4
 8005fec:	6010      	str	r0, [r2, #0]
 8005fee:	0628      	lsls	r0, r5, #24
 8005ff0:	d501      	bpl.n	8005ff6 <_printf_i+0xc2>
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	e002      	b.n	8005ffc <_printf_i+0xc8>
 8005ff6:	0668      	lsls	r0, r5, #25
 8005ff8:	d5fb      	bpl.n	8005ff2 <_printf_i+0xbe>
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	4854      	ldr	r0, [pc, #336]	; (8006150 <_printf_i+0x21c>)
 8005ffe:	296f      	cmp	r1, #111	; 0x6f
 8006000:	bf14      	ite	ne
 8006002:	220a      	movne	r2, #10
 8006004:	2208      	moveq	r2, #8
 8006006:	2100      	movs	r1, #0
 8006008:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800600c:	6865      	ldr	r5, [r4, #4]
 800600e:	60a5      	str	r5, [r4, #8]
 8006010:	2d00      	cmp	r5, #0
 8006012:	f2c0 8095 	blt.w	8006140 <_printf_i+0x20c>
 8006016:	6821      	ldr	r1, [r4, #0]
 8006018:	f021 0104 	bic.w	r1, r1, #4
 800601c:	6021      	str	r1, [r4, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d13d      	bne.n	800609e <_printf_i+0x16a>
 8006022:	2d00      	cmp	r5, #0
 8006024:	f040 808e 	bne.w	8006144 <_printf_i+0x210>
 8006028:	4665      	mov	r5, ip
 800602a:	2a08      	cmp	r2, #8
 800602c:	d10b      	bne.n	8006046 <_printf_i+0x112>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	07db      	lsls	r3, r3, #31
 8006032:	d508      	bpl.n	8006046 <_printf_i+0x112>
 8006034:	6923      	ldr	r3, [r4, #16]
 8006036:	6862      	ldr	r2, [r4, #4]
 8006038:	429a      	cmp	r2, r3
 800603a:	bfde      	ittt	le
 800603c:	2330      	movle	r3, #48	; 0x30
 800603e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006042:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006046:	ebac 0305 	sub.w	r3, ip, r5
 800604a:	6123      	str	r3, [r4, #16]
 800604c:	f8cd 8000 	str.w	r8, [sp]
 8006050:	463b      	mov	r3, r7
 8006052:	aa03      	add	r2, sp, #12
 8006054:	4621      	mov	r1, r4
 8006056:	4630      	mov	r0, r6
 8006058:	f7ff fef6 	bl	8005e48 <_printf_common>
 800605c:	3001      	adds	r0, #1
 800605e:	d14d      	bne.n	80060fc <_printf_i+0x1c8>
 8006060:	f04f 30ff 	mov.w	r0, #4294967295
 8006064:	b005      	add	sp, #20
 8006066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800606a:	4839      	ldr	r0, [pc, #228]	; (8006150 <_printf_i+0x21c>)
 800606c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006070:	6813      	ldr	r3, [r2, #0]
 8006072:	6821      	ldr	r1, [r4, #0]
 8006074:	1d1d      	adds	r5, r3, #4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6015      	str	r5, [r2, #0]
 800607a:	060a      	lsls	r2, r1, #24
 800607c:	d50b      	bpl.n	8006096 <_printf_i+0x162>
 800607e:	07ca      	lsls	r2, r1, #31
 8006080:	bf44      	itt	mi
 8006082:	f041 0120 	orrmi.w	r1, r1, #32
 8006086:	6021      	strmi	r1, [r4, #0]
 8006088:	b91b      	cbnz	r3, 8006092 <_printf_i+0x15e>
 800608a:	6822      	ldr	r2, [r4, #0]
 800608c:	f022 0220 	bic.w	r2, r2, #32
 8006090:	6022      	str	r2, [r4, #0]
 8006092:	2210      	movs	r2, #16
 8006094:	e7b7      	b.n	8006006 <_printf_i+0xd2>
 8006096:	064d      	lsls	r5, r1, #25
 8006098:	bf48      	it	mi
 800609a:	b29b      	uxthmi	r3, r3
 800609c:	e7ef      	b.n	800607e <_printf_i+0x14a>
 800609e:	4665      	mov	r5, ip
 80060a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80060a4:	fb02 3311 	mls	r3, r2, r1, r3
 80060a8:	5cc3      	ldrb	r3, [r0, r3]
 80060aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80060ae:	460b      	mov	r3, r1
 80060b0:	2900      	cmp	r1, #0
 80060b2:	d1f5      	bne.n	80060a0 <_printf_i+0x16c>
 80060b4:	e7b9      	b.n	800602a <_printf_i+0xf6>
 80060b6:	6813      	ldr	r3, [r2, #0]
 80060b8:	6825      	ldr	r5, [r4, #0]
 80060ba:	6961      	ldr	r1, [r4, #20]
 80060bc:	1d18      	adds	r0, r3, #4
 80060be:	6010      	str	r0, [r2, #0]
 80060c0:	0628      	lsls	r0, r5, #24
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	d501      	bpl.n	80060ca <_printf_i+0x196>
 80060c6:	6019      	str	r1, [r3, #0]
 80060c8:	e002      	b.n	80060d0 <_printf_i+0x19c>
 80060ca:	066a      	lsls	r2, r5, #25
 80060cc:	d5fb      	bpl.n	80060c6 <_printf_i+0x192>
 80060ce:	8019      	strh	r1, [r3, #0]
 80060d0:	2300      	movs	r3, #0
 80060d2:	6123      	str	r3, [r4, #16]
 80060d4:	4665      	mov	r5, ip
 80060d6:	e7b9      	b.n	800604c <_printf_i+0x118>
 80060d8:	6813      	ldr	r3, [r2, #0]
 80060da:	1d19      	adds	r1, r3, #4
 80060dc:	6011      	str	r1, [r2, #0]
 80060de:	681d      	ldr	r5, [r3, #0]
 80060e0:	6862      	ldr	r2, [r4, #4]
 80060e2:	2100      	movs	r1, #0
 80060e4:	4628      	mov	r0, r5
 80060e6:	f7fa f8c3 	bl	8000270 <memchr>
 80060ea:	b108      	cbz	r0, 80060f0 <_printf_i+0x1bc>
 80060ec:	1b40      	subs	r0, r0, r5
 80060ee:	6060      	str	r0, [r4, #4]
 80060f0:	6863      	ldr	r3, [r4, #4]
 80060f2:	6123      	str	r3, [r4, #16]
 80060f4:	2300      	movs	r3, #0
 80060f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060fa:	e7a7      	b.n	800604c <_printf_i+0x118>
 80060fc:	6923      	ldr	r3, [r4, #16]
 80060fe:	462a      	mov	r2, r5
 8006100:	4639      	mov	r1, r7
 8006102:	4630      	mov	r0, r6
 8006104:	47c0      	blx	r8
 8006106:	3001      	adds	r0, #1
 8006108:	d0aa      	beq.n	8006060 <_printf_i+0x12c>
 800610a:	6823      	ldr	r3, [r4, #0]
 800610c:	079b      	lsls	r3, r3, #30
 800610e:	d413      	bmi.n	8006138 <_printf_i+0x204>
 8006110:	68e0      	ldr	r0, [r4, #12]
 8006112:	9b03      	ldr	r3, [sp, #12]
 8006114:	4298      	cmp	r0, r3
 8006116:	bfb8      	it	lt
 8006118:	4618      	movlt	r0, r3
 800611a:	e7a3      	b.n	8006064 <_printf_i+0x130>
 800611c:	2301      	movs	r3, #1
 800611e:	464a      	mov	r2, r9
 8006120:	4639      	mov	r1, r7
 8006122:	4630      	mov	r0, r6
 8006124:	47c0      	blx	r8
 8006126:	3001      	adds	r0, #1
 8006128:	d09a      	beq.n	8006060 <_printf_i+0x12c>
 800612a:	3501      	adds	r5, #1
 800612c:	68e3      	ldr	r3, [r4, #12]
 800612e:	9a03      	ldr	r2, [sp, #12]
 8006130:	1a9b      	subs	r3, r3, r2
 8006132:	42ab      	cmp	r3, r5
 8006134:	dcf2      	bgt.n	800611c <_printf_i+0x1e8>
 8006136:	e7eb      	b.n	8006110 <_printf_i+0x1dc>
 8006138:	2500      	movs	r5, #0
 800613a:	f104 0919 	add.w	r9, r4, #25
 800613e:	e7f5      	b.n	800612c <_printf_i+0x1f8>
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1ac      	bne.n	800609e <_printf_i+0x16a>
 8006144:	7803      	ldrb	r3, [r0, #0]
 8006146:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800614a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800614e:	e76c      	b.n	800602a <_printf_i+0xf6>
 8006150:	080064c7 	.word	0x080064c7
 8006154:	080064d8 	.word	0x080064d8

08006158 <memmove>:
 8006158:	4288      	cmp	r0, r1
 800615a:	b510      	push	{r4, lr}
 800615c:	eb01 0302 	add.w	r3, r1, r2
 8006160:	d807      	bhi.n	8006172 <memmove+0x1a>
 8006162:	1e42      	subs	r2, r0, #1
 8006164:	4299      	cmp	r1, r3
 8006166:	d00a      	beq.n	800617e <memmove+0x26>
 8006168:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006170:	e7f8      	b.n	8006164 <memmove+0xc>
 8006172:	4283      	cmp	r3, r0
 8006174:	d9f5      	bls.n	8006162 <memmove+0xa>
 8006176:	1881      	adds	r1, r0, r2
 8006178:	1ad2      	subs	r2, r2, r3
 800617a:	42d3      	cmn	r3, r2
 800617c:	d100      	bne.n	8006180 <memmove+0x28>
 800617e:	bd10      	pop	{r4, pc}
 8006180:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006184:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006188:	e7f7      	b.n	800617a <memmove+0x22>
	...

0800618c <_free_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4605      	mov	r5, r0
 8006190:	2900      	cmp	r1, #0
 8006192:	d045      	beq.n	8006220 <_free_r+0x94>
 8006194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006198:	1f0c      	subs	r4, r1, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	bfb8      	it	lt
 800619e:	18e4      	addlt	r4, r4, r3
 80061a0:	f000 f8d2 	bl	8006348 <__malloc_lock>
 80061a4:	4a1f      	ldr	r2, [pc, #124]	; (8006224 <_free_r+0x98>)
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	4610      	mov	r0, r2
 80061aa:	b933      	cbnz	r3, 80061ba <_free_r+0x2e>
 80061ac:	6063      	str	r3, [r4, #4]
 80061ae:	6014      	str	r4, [r2, #0]
 80061b0:	4628      	mov	r0, r5
 80061b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061b6:	f000 b8c8 	b.w	800634a <__malloc_unlock>
 80061ba:	42a3      	cmp	r3, r4
 80061bc:	d90c      	bls.n	80061d8 <_free_r+0x4c>
 80061be:	6821      	ldr	r1, [r4, #0]
 80061c0:	1862      	adds	r2, r4, r1
 80061c2:	4293      	cmp	r3, r2
 80061c4:	bf04      	itt	eq
 80061c6:	681a      	ldreq	r2, [r3, #0]
 80061c8:	685b      	ldreq	r3, [r3, #4]
 80061ca:	6063      	str	r3, [r4, #4]
 80061cc:	bf04      	itt	eq
 80061ce:	1852      	addeq	r2, r2, r1
 80061d0:	6022      	streq	r2, [r4, #0]
 80061d2:	6004      	str	r4, [r0, #0]
 80061d4:	e7ec      	b.n	80061b0 <_free_r+0x24>
 80061d6:	4613      	mov	r3, r2
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	b10a      	cbz	r2, 80061e0 <_free_r+0x54>
 80061dc:	42a2      	cmp	r2, r4
 80061de:	d9fa      	bls.n	80061d6 <_free_r+0x4a>
 80061e0:	6819      	ldr	r1, [r3, #0]
 80061e2:	1858      	adds	r0, r3, r1
 80061e4:	42a0      	cmp	r0, r4
 80061e6:	d10b      	bne.n	8006200 <_free_r+0x74>
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	4401      	add	r1, r0
 80061ec:	1858      	adds	r0, r3, r1
 80061ee:	4282      	cmp	r2, r0
 80061f0:	6019      	str	r1, [r3, #0]
 80061f2:	d1dd      	bne.n	80061b0 <_free_r+0x24>
 80061f4:	6810      	ldr	r0, [r2, #0]
 80061f6:	6852      	ldr	r2, [r2, #4]
 80061f8:	605a      	str	r2, [r3, #4]
 80061fa:	4401      	add	r1, r0
 80061fc:	6019      	str	r1, [r3, #0]
 80061fe:	e7d7      	b.n	80061b0 <_free_r+0x24>
 8006200:	d902      	bls.n	8006208 <_free_r+0x7c>
 8006202:	230c      	movs	r3, #12
 8006204:	602b      	str	r3, [r5, #0]
 8006206:	e7d3      	b.n	80061b0 <_free_r+0x24>
 8006208:	6820      	ldr	r0, [r4, #0]
 800620a:	1821      	adds	r1, r4, r0
 800620c:	428a      	cmp	r2, r1
 800620e:	bf04      	itt	eq
 8006210:	6811      	ldreq	r1, [r2, #0]
 8006212:	6852      	ldreq	r2, [r2, #4]
 8006214:	6062      	str	r2, [r4, #4]
 8006216:	bf04      	itt	eq
 8006218:	1809      	addeq	r1, r1, r0
 800621a:	6021      	streq	r1, [r4, #0]
 800621c:	605c      	str	r4, [r3, #4]
 800621e:	e7c7      	b.n	80061b0 <_free_r+0x24>
 8006220:	bd38      	pop	{r3, r4, r5, pc}
 8006222:	bf00      	nop
 8006224:	20013394 	.word	0x20013394

08006228 <_malloc_r>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	1ccd      	adds	r5, r1, #3
 800622c:	f025 0503 	bic.w	r5, r5, #3
 8006230:	3508      	adds	r5, #8
 8006232:	2d0c      	cmp	r5, #12
 8006234:	bf38      	it	cc
 8006236:	250c      	movcc	r5, #12
 8006238:	2d00      	cmp	r5, #0
 800623a:	4606      	mov	r6, r0
 800623c:	db01      	blt.n	8006242 <_malloc_r+0x1a>
 800623e:	42a9      	cmp	r1, r5
 8006240:	d903      	bls.n	800624a <_malloc_r+0x22>
 8006242:	230c      	movs	r3, #12
 8006244:	6033      	str	r3, [r6, #0]
 8006246:	2000      	movs	r0, #0
 8006248:	bd70      	pop	{r4, r5, r6, pc}
 800624a:	f000 f87d 	bl	8006348 <__malloc_lock>
 800624e:	4a21      	ldr	r2, [pc, #132]	; (80062d4 <_malloc_r+0xac>)
 8006250:	6814      	ldr	r4, [r2, #0]
 8006252:	4621      	mov	r1, r4
 8006254:	b991      	cbnz	r1, 800627c <_malloc_r+0x54>
 8006256:	4c20      	ldr	r4, [pc, #128]	; (80062d8 <_malloc_r+0xb0>)
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	b91b      	cbnz	r3, 8006264 <_malloc_r+0x3c>
 800625c:	4630      	mov	r0, r6
 800625e:	f000 f863 	bl	8006328 <_sbrk_r>
 8006262:	6020      	str	r0, [r4, #0]
 8006264:	4629      	mov	r1, r5
 8006266:	4630      	mov	r0, r6
 8006268:	f000 f85e 	bl	8006328 <_sbrk_r>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	d124      	bne.n	80062ba <_malloc_r+0x92>
 8006270:	230c      	movs	r3, #12
 8006272:	6033      	str	r3, [r6, #0]
 8006274:	4630      	mov	r0, r6
 8006276:	f000 f868 	bl	800634a <__malloc_unlock>
 800627a:	e7e4      	b.n	8006246 <_malloc_r+0x1e>
 800627c:	680b      	ldr	r3, [r1, #0]
 800627e:	1b5b      	subs	r3, r3, r5
 8006280:	d418      	bmi.n	80062b4 <_malloc_r+0x8c>
 8006282:	2b0b      	cmp	r3, #11
 8006284:	d90f      	bls.n	80062a6 <_malloc_r+0x7e>
 8006286:	600b      	str	r3, [r1, #0]
 8006288:	50cd      	str	r5, [r1, r3]
 800628a:	18cc      	adds	r4, r1, r3
 800628c:	4630      	mov	r0, r6
 800628e:	f000 f85c 	bl	800634a <__malloc_unlock>
 8006292:	f104 000b 	add.w	r0, r4, #11
 8006296:	1d23      	adds	r3, r4, #4
 8006298:	f020 0007 	bic.w	r0, r0, #7
 800629c:	1ac3      	subs	r3, r0, r3
 800629e:	d0d3      	beq.n	8006248 <_malloc_r+0x20>
 80062a0:	425a      	negs	r2, r3
 80062a2:	50e2      	str	r2, [r4, r3]
 80062a4:	e7d0      	b.n	8006248 <_malloc_r+0x20>
 80062a6:	428c      	cmp	r4, r1
 80062a8:	684b      	ldr	r3, [r1, #4]
 80062aa:	bf16      	itet	ne
 80062ac:	6063      	strne	r3, [r4, #4]
 80062ae:	6013      	streq	r3, [r2, #0]
 80062b0:	460c      	movne	r4, r1
 80062b2:	e7eb      	b.n	800628c <_malloc_r+0x64>
 80062b4:	460c      	mov	r4, r1
 80062b6:	6849      	ldr	r1, [r1, #4]
 80062b8:	e7cc      	b.n	8006254 <_malloc_r+0x2c>
 80062ba:	1cc4      	adds	r4, r0, #3
 80062bc:	f024 0403 	bic.w	r4, r4, #3
 80062c0:	42a0      	cmp	r0, r4
 80062c2:	d005      	beq.n	80062d0 <_malloc_r+0xa8>
 80062c4:	1a21      	subs	r1, r4, r0
 80062c6:	4630      	mov	r0, r6
 80062c8:	f000 f82e 	bl	8006328 <_sbrk_r>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d0cf      	beq.n	8006270 <_malloc_r+0x48>
 80062d0:	6025      	str	r5, [r4, #0]
 80062d2:	e7db      	b.n	800628c <_malloc_r+0x64>
 80062d4:	20013394 	.word	0x20013394
 80062d8:	20013398 	.word	0x20013398

080062dc <_realloc_r>:
 80062dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062de:	4607      	mov	r7, r0
 80062e0:	4614      	mov	r4, r2
 80062e2:	460e      	mov	r6, r1
 80062e4:	b921      	cbnz	r1, 80062f0 <_realloc_r+0x14>
 80062e6:	4611      	mov	r1, r2
 80062e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80062ec:	f7ff bf9c 	b.w	8006228 <_malloc_r>
 80062f0:	b922      	cbnz	r2, 80062fc <_realloc_r+0x20>
 80062f2:	f7ff ff4b 	bl	800618c <_free_r>
 80062f6:	4625      	mov	r5, r4
 80062f8:	4628      	mov	r0, r5
 80062fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062fc:	f000 f826 	bl	800634c <_malloc_usable_size_r>
 8006300:	42a0      	cmp	r0, r4
 8006302:	d20f      	bcs.n	8006324 <_realloc_r+0x48>
 8006304:	4621      	mov	r1, r4
 8006306:	4638      	mov	r0, r7
 8006308:	f7ff ff8e 	bl	8006228 <_malloc_r>
 800630c:	4605      	mov	r5, r0
 800630e:	2800      	cmp	r0, #0
 8006310:	d0f2      	beq.n	80062f8 <_realloc_r+0x1c>
 8006312:	4631      	mov	r1, r6
 8006314:	4622      	mov	r2, r4
 8006316:	f7ff fbfe 	bl	8005b16 <memcpy>
 800631a:	4631      	mov	r1, r6
 800631c:	4638      	mov	r0, r7
 800631e:	f7ff ff35 	bl	800618c <_free_r>
 8006322:	e7e9      	b.n	80062f8 <_realloc_r+0x1c>
 8006324:	4635      	mov	r5, r6
 8006326:	e7e7      	b.n	80062f8 <_realloc_r+0x1c>

08006328 <_sbrk_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4c06      	ldr	r4, [pc, #24]	; (8006344 <_sbrk_r+0x1c>)
 800632c:	2300      	movs	r3, #0
 800632e:	4605      	mov	r5, r0
 8006330:	4608      	mov	r0, r1
 8006332:	6023      	str	r3, [r4, #0]
 8006334:	f000 f812 	bl	800635c <_sbrk>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d102      	bne.n	8006342 <_sbrk_r+0x1a>
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	b103      	cbz	r3, 8006342 <_sbrk_r+0x1a>
 8006340:	602b      	str	r3, [r5, #0]
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	200134c0 	.word	0x200134c0

08006348 <__malloc_lock>:
 8006348:	4770      	bx	lr

0800634a <__malloc_unlock>:
 800634a:	4770      	bx	lr

0800634c <_malloc_usable_size_r>:
 800634c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006350:	1f18      	subs	r0, r3, #4
 8006352:	2b00      	cmp	r3, #0
 8006354:	bfbc      	itt	lt
 8006356:	580b      	ldrlt	r3, [r1, r0]
 8006358:	18c0      	addlt	r0, r0, r3
 800635a:	4770      	bx	lr

0800635c <_sbrk>:
 800635c:	4b04      	ldr	r3, [pc, #16]	; (8006370 <_sbrk+0x14>)
 800635e:	6819      	ldr	r1, [r3, #0]
 8006360:	4602      	mov	r2, r0
 8006362:	b909      	cbnz	r1, 8006368 <_sbrk+0xc>
 8006364:	4903      	ldr	r1, [pc, #12]	; (8006374 <_sbrk+0x18>)
 8006366:	6019      	str	r1, [r3, #0]
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	4402      	add	r2, r0
 800636c:	601a      	str	r2, [r3, #0]
 800636e:	4770      	bx	lr
 8006370:	2001339c 	.word	0x2001339c
 8006374:	200134c8 	.word	0x200134c8

08006378 <_init>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	bf00      	nop
 800637c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637e:	bc08      	pop	{r3}
 8006380:	469e      	mov	lr, r3
 8006382:	4770      	bx	lr

08006384 <_fini>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	bf00      	nop
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr
