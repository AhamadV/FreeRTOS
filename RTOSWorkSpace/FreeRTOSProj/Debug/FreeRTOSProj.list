
FreeRTOSProj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d3c  08005d3c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d44  08005d44  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d48  08005d48  00015d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e20  20000078  08005dc4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e98  08005dc4  00022e98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118e5  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000271a  00000000  00000000  0003198d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef8  00000000  00000000  000340a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd0  00000000  00000000  00034fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c3b  00000000  00000000  00035d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd04  00000000  00000000  000589ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1354  00000000  00000000  000646af  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00135a03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004490  00000000  00000000  00135a80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b28 	.word	0x08005b28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08005b28 	.word	0x08005b28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f8d8 	bl	800074e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f001 fcc0 	bl	8001f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f001 fc96 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20012e10 	.word	0x20012e10

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20012e10 	.word	0x20012e10

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	b082      	sub	sp, #8
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff ff4c 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000776:	f7ff ff61 	bl	800063c <__NVIC_GetPriorityGrouping>
 800077a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	68b9      	ldr	r1, [r7, #8]
 8000780:	6978      	ldr	r0, [r7, #20]
 8000782:	f7ff ffb1 	bl	80006e8 <NVIC_EncodePriority>
 8000786:	4602      	mov	r2, r0
 8000788:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ff80 	bl	8000694 <__NVIC_SetPriority>
}
 8000794:	bf00      	nop
 8000796:	3718      	adds	r7, #24
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ff54 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b089      	sub	sp, #36	; 0x24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
 80007d2:	e16b      	b.n	8000aac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007d4:	2201      	movs	r2, #1
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	fa02 f303 	lsl.w	r3, r2, r3
 80007dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	697a      	ldr	r2, [r7, #20]
 80007e4:	4013      	ands	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007e8:	693a      	ldr	r2, [r7, #16]
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	f040 815a 	bne.w	8000aa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d00b      	beq.n	8000812 <HAL_GPIO_Init+0x5a>
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d007      	beq.n	8000812 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000806:	2b11      	cmp	r3, #17
 8000808:	d003      	beq.n	8000812 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b12      	cmp	r3, #18
 8000810:	d130      	bne.n	8000874 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000818:	69fb      	ldr	r3, [r7, #28]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	2203      	movs	r2, #3
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	4013      	ands	r3, r2
 8000828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	68da      	ldr	r2, [r3, #12]
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	69ba      	ldr	r2, [r7, #24]
 8000838:	4313      	orrs	r3, r2
 800083a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000848:	2201      	movs	r2, #1
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	69ba      	ldr	r2, [r7, #24]
 8000854:	4013      	ands	r3, r2
 8000856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	091b      	lsrs	r3, r3, #4
 800085e:	f003 0201 	and.w	r2, r3, #1
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	69ba      	ldr	r2, [r7, #24]
 800086a:	4313      	orrs	r3, r2
 800086c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	2203      	movs	r2, #3
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	4013      	ands	r3, r2
 800088a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	689a      	ldr	r2, [r3, #8]
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	4313      	orrs	r3, r2
 800089c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	69ba      	ldr	r2, [r7, #24]
 80008a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d003      	beq.n	80008b4 <HAL_GPIO_Init+0xfc>
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b12      	cmp	r3, #18
 80008b2:	d123      	bne.n	80008fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	08da      	lsrs	r2, r3, #3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3208      	adds	r2, #8
 80008bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	f003 0307 	and.w	r3, r3, #7
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	220f      	movs	r2, #15
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4013      	ands	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	691a      	ldr	r2, [r3, #16]
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	08da      	lsrs	r2, r3, #3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	3208      	adds	r2, #8
 80008f6:	69b9      	ldr	r1, [r7, #24]
 80008f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	2203      	movs	r2, #3
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	43db      	mvns	r3, r3
 800090e:	69ba      	ldr	r2, [r7, #24]
 8000910:	4013      	ands	r3, r2
 8000912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	f003 0203 	and.w	r2, r3, #3
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	4313      	orrs	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000938:	2b00      	cmp	r3, #0
 800093a:	f000 80b4 	beq.w	8000aa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	4b5f      	ldr	r3, [pc, #380]	; (8000ac0 <HAL_GPIO_Init+0x308>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	4a5e      	ldr	r2, [pc, #376]	; (8000ac0 <HAL_GPIO_Init+0x308>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094c:	6453      	str	r3, [r2, #68]	; 0x44
 800094e:	4b5c      	ldr	r3, [pc, #368]	; (8000ac0 <HAL_GPIO_Init+0x308>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800095a:	4a5a      	ldr	r2, [pc, #360]	; (8000ac4 <HAL_GPIO_Init+0x30c>)
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	089b      	lsrs	r3, r3, #2
 8000960:	3302      	adds	r3, #2
 8000962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f003 0303 	and.w	r3, r3, #3
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	220f      	movs	r2, #15
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	4013      	ands	r3, r2
 800097c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a51      	ldr	r2, [pc, #324]	; (8000ac8 <HAL_GPIO_Init+0x310>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d02b      	beq.n	80009de <HAL_GPIO_Init+0x226>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a50      	ldr	r2, [pc, #320]	; (8000acc <HAL_GPIO_Init+0x314>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d025      	beq.n	80009da <HAL_GPIO_Init+0x222>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a4f      	ldr	r2, [pc, #316]	; (8000ad0 <HAL_GPIO_Init+0x318>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d01f      	beq.n	80009d6 <HAL_GPIO_Init+0x21e>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a4e      	ldr	r2, [pc, #312]	; (8000ad4 <HAL_GPIO_Init+0x31c>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d019      	beq.n	80009d2 <HAL_GPIO_Init+0x21a>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a4d      	ldr	r2, [pc, #308]	; (8000ad8 <HAL_GPIO_Init+0x320>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d013      	beq.n	80009ce <HAL_GPIO_Init+0x216>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a4c      	ldr	r2, [pc, #304]	; (8000adc <HAL_GPIO_Init+0x324>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d00d      	beq.n	80009ca <HAL_GPIO_Init+0x212>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a4b      	ldr	r2, [pc, #300]	; (8000ae0 <HAL_GPIO_Init+0x328>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d007      	beq.n	80009c6 <HAL_GPIO_Init+0x20e>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a4a      	ldr	r2, [pc, #296]	; (8000ae4 <HAL_GPIO_Init+0x32c>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d101      	bne.n	80009c2 <HAL_GPIO_Init+0x20a>
 80009be:	2307      	movs	r3, #7
 80009c0:	e00e      	b.n	80009e0 <HAL_GPIO_Init+0x228>
 80009c2:	2308      	movs	r3, #8
 80009c4:	e00c      	b.n	80009e0 <HAL_GPIO_Init+0x228>
 80009c6:	2306      	movs	r3, #6
 80009c8:	e00a      	b.n	80009e0 <HAL_GPIO_Init+0x228>
 80009ca:	2305      	movs	r3, #5
 80009cc:	e008      	b.n	80009e0 <HAL_GPIO_Init+0x228>
 80009ce:	2304      	movs	r3, #4
 80009d0:	e006      	b.n	80009e0 <HAL_GPIO_Init+0x228>
 80009d2:	2303      	movs	r3, #3
 80009d4:	e004      	b.n	80009e0 <HAL_GPIO_Init+0x228>
 80009d6:	2302      	movs	r3, #2
 80009d8:	e002      	b.n	80009e0 <HAL_GPIO_Init+0x228>
 80009da:	2301      	movs	r3, #1
 80009dc:	e000      	b.n	80009e0 <HAL_GPIO_Init+0x228>
 80009de:	2300      	movs	r3, #0
 80009e0:	69fa      	ldr	r2, [r7, #28]
 80009e2:	f002 0203 	and.w	r2, r2, #3
 80009e6:	0092      	lsls	r2, r2, #2
 80009e8:	4093      	lsls	r3, r2
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009f0:	4934      	ldr	r1, [pc, #208]	; (8000ac4 <HAL_GPIO_Init+0x30c>)
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	3302      	adds	r3, #2
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009fe:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <HAL_GPIO_Init+0x330>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	43db      	mvns	r3, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a22:	4a31      	ldr	r2, [pc, #196]	; (8000ae8 <HAL_GPIO_Init+0x330>)
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a28:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <HAL_GPIO_Init+0x330>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	4013      	ands	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a4c:	4a26      	ldr	r2, [pc, #152]	; (8000ae8 <HAL_GPIO_Init+0x330>)
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <HAL_GPIO_Init+0x330>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <HAL_GPIO_Init+0x330>)
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <HAL_GPIO_Init+0x330>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aa0:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <HAL_GPIO_Init+0x330>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	2b0f      	cmp	r3, #15
 8000ab0:	f67f ae90 	bls.w	80007d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3724      	adds	r7, #36	; 0x24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40013800 	.word	0x40013800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40021400 	.word	0x40021400
 8000ae0:	40021800 	.word	0x40021800
 8000ae4:	40021c00 	.word	0x40021c00
 8000ae8:	40013c00 	.word	0x40013c00

08000aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	460b      	mov	r3, r1
 8000af6:	807b      	strh	r3, [r7, #2]
 8000af8:	4613      	mov	r3, r2
 8000afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000afc:	787b      	ldrb	r3, [r7, #1]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b02:	887a      	ldrh	r2, [r7, #2]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b08:	e003      	b.n	8000b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	041a      	lsls	r2, r3, #16
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	619a      	str	r2, [r3, #24]
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e25b      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d075      	beq.n	8000c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b3e:	4ba3      	ldr	r3, [pc, #652]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f003 030c 	and.w	r3, r3, #12
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d00c      	beq.n	8000b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b4a:	4ba0      	ldr	r3, [pc, #640]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b52:	2b08      	cmp	r3, #8
 8000b54:	d112      	bne.n	8000b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b56:	4b9d      	ldr	r3, [pc, #628]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b62:	d10b      	bne.n	8000b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b64:	4b99      	ldr	r3, [pc, #612]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d05b      	beq.n	8000c28 <HAL_RCC_OscConfig+0x108>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d157      	bne.n	8000c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e236      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b84:	d106      	bne.n	8000b94 <HAL_RCC_OscConfig+0x74>
 8000b86:	4b91      	ldr	r3, [pc, #580]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a90      	ldr	r2, [pc, #576]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	e01d      	b.n	8000bd0 <HAL_RCC_OscConfig+0xb0>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b9c:	d10c      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x98>
 8000b9e:	4b8b      	ldr	r3, [pc, #556]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a8a      	ldr	r2, [pc, #552]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	4b88      	ldr	r3, [pc, #544]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a87      	ldr	r2, [pc, #540]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	e00b      	b.n	8000bd0 <HAL_RCC_OscConfig+0xb0>
 8000bb8:	4b84      	ldr	r3, [pc, #528]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a83      	ldr	r2, [pc, #524]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b81      	ldr	r3, [pc, #516]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a80      	ldr	r2, [pc, #512]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d013      	beq.n	8000c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd8:	f7ff fd00 	bl	80005dc <HAL_GetTick>
 8000bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bde:	e008      	b.n	8000bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be0:	f7ff fcfc 	bl	80005dc <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	2b64      	cmp	r3, #100	; 0x64
 8000bec:	d901      	bls.n	8000bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e1fb      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf2:	4b76      	ldr	r3, [pc, #472]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0f0      	beq.n	8000be0 <HAL_RCC_OscConfig+0xc0>
 8000bfe:	e014      	b.n	8000c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c00:	f7ff fcec 	bl	80005dc <HAL_GetTick>
 8000c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c06:	e008      	b.n	8000c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c08:	f7ff fce8 	bl	80005dc <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b64      	cmp	r3, #100	; 0x64
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e1e7      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c1a:	4b6c      	ldr	r3, [pc, #432]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f0      	bne.n	8000c08 <HAL_RCC_OscConfig+0xe8>
 8000c26:	e000      	b.n	8000c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d063      	beq.n	8000cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c36:	4b65      	ldr	r3, [pc, #404]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f003 030c 	and.w	r3, r3, #12
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00b      	beq.n	8000c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c42:	4b62      	ldr	r3, [pc, #392]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c4a:	2b08      	cmp	r3, #8
 8000c4c:	d11c      	bne.n	8000c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c4e:	4b5f      	ldr	r3, [pc, #380]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d116      	bne.n	8000c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5a:	4b5c      	ldr	r3, [pc, #368]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d005      	beq.n	8000c72 <HAL_RCC_OscConfig+0x152>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d001      	beq.n	8000c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e1bb      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c72:	4b56      	ldr	r3, [pc, #344]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	4952      	ldr	r1, [pc, #328]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000c82:	4313      	orrs	r3, r2
 8000c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c86:	e03a      	b.n	8000cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d020      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c90:	4b4f      	ldr	r3, [pc, #316]	; (8000dd0 <HAL_RCC_OscConfig+0x2b0>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c96:	f7ff fca1 	bl	80005dc <HAL_GetTick>
 8000c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9c:	e008      	b.n	8000cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c9e:	f7ff fc9d 	bl	80005dc <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d901      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cac:	2303      	movs	r3, #3
 8000cae:	e19c      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb0:	4b46      	ldr	r3, [pc, #280]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0f0      	beq.n	8000c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cbc:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	4940      	ldr	r1, [pc, #256]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	600b      	str	r3, [r1, #0]
 8000cd0:	e015      	b.n	8000cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cd2:	4b3f      	ldr	r3, [pc, #252]	; (8000dd0 <HAL_RCC_OscConfig+0x2b0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fc80 	bl	80005dc <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce0:	f7ff fc7c 	bl	80005dc <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e17b      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf2:	4b36      	ldr	r3, [pc, #216]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f0      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d030      	beq.n	8000d6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d016      	beq.n	8000d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d12:	4b30      	ldr	r3, [pc, #192]	; (8000dd4 <HAL_RCC_OscConfig+0x2b4>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d18:	f7ff fc60 	bl	80005dc <HAL_GetTick>
 8000d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d1e:	e008      	b.n	8000d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d20:	f7ff fc5c 	bl	80005dc <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e15b      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0f0      	beq.n	8000d20 <HAL_RCC_OscConfig+0x200>
 8000d3e:	e015      	b.n	8000d6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <HAL_RCC_OscConfig+0x2b4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d46:	f7ff fc49 	bl	80005dc <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fc45 	bl	80005dc <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e144      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1f0      	bne.n	8000d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	f000 80a0 	beq.w	8000eba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d10f      	bne.n	8000daa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_RCC_OscConfig+0x2ac>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000da6:	2301      	movs	r3, #1
 8000da8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <HAL_RCC_OscConfig+0x2b8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d121      	bne.n	8000dfa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_RCC_OscConfig+0x2b8>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_RCC_OscConfig+0x2b8>)
 8000dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dc2:	f7ff fc0b 	bl	80005dc <HAL_GetTick>
 8000dc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc8:	e011      	b.n	8000dee <HAL_RCC_OscConfig+0x2ce>
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	42470000 	.word	0x42470000
 8000dd4:	42470e80 	.word	0x42470e80
 8000dd8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ddc:	f7ff fbfe 	bl	80005dc <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e0fd      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dee:	4b81      	ldr	r3, [pc, #516]	; (8000ff4 <HAL_RCC_OscConfig+0x4d4>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f0      	beq.n	8000ddc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d106      	bne.n	8000e10 <HAL_RCC_OscConfig+0x2f0>
 8000e02:	4b7d      	ldr	r3, [pc, #500]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e06:	4a7c      	ldr	r2, [pc, #496]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e0e:	e01c      	b.n	8000e4a <HAL_RCC_OscConfig+0x32a>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b05      	cmp	r3, #5
 8000e16:	d10c      	bne.n	8000e32 <HAL_RCC_OscConfig+0x312>
 8000e18:	4b77      	ldr	r3, [pc, #476]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e1c:	4a76      	ldr	r2, [pc, #472]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6713      	str	r3, [r2, #112]	; 0x70
 8000e24:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e28:	4a73      	ldr	r2, [pc, #460]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e30:	e00b      	b.n	8000e4a <HAL_RCC_OscConfig+0x32a>
 8000e32:	4b71      	ldr	r3, [pc, #452]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e36:	4a70      	ldr	r2, [pc, #448]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000e38:	f023 0301 	bic.w	r3, r3, #1
 8000e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e3e:	4b6e      	ldr	r3, [pc, #440]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e42:	4a6d      	ldr	r2, [pc, #436]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000e44:	f023 0304 	bic.w	r3, r3, #4
 8000e48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d015      	beq.n	8000e7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e52:	f7ff fbc3 	bl	80005dc <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e58:	e00a      	b.n	8000e70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e5a:	f7ff fbbf 	bl	80005dc <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e0bc      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e70:	4b61      	ldr	r3, [pc, #388]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e74:	f003 0302 	and.w	r3, r3, #2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0ee      	beq.n	8000e5a <HAL_RCC_OscConfig+0x33a>
 8000e7c:	e014      	b.n	8000ea8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7e:	f7ff fbad 	bl	80005dc <HAL_GetTick>
 8000e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e84:	e00a      	b.n	8000e9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e86:	f7ff fba9 	bl	80005dc <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e0a6      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e9c:	4b56      	ldr	r3, [pc, #344]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d1ee      	bne.n	8000e86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ea8:	7dfb      	ldrb	r3, [r7, #23]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d105      	bne.n	8000eba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eae:	4b52      	ldr	r3, [pc, #328]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a51      	ldr	r2, [pc, #324]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f000 8092 	beq.w	8000fe8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ec4:	4b4c      	ldr	r3, [pc, #304]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d05c      	beq.n	8000f8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d141      	bne.n	8000f5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ed8:	4b48      	ldr	r3, [pc, #288]	; (8000ffc <HAL_RCC_OscConfig+0x4dc>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ede:	f7ff fb7d 	bl	80005dc <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee6:	f7ff fb79 	bl	80005dc <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e078      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1f0      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69da      	ldr	r2, [r3, #28]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f12:	019b      	lsls	r3, r3, #6
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	085b      	lsrs	r3, r3, #1
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	041b      	lsls	r3, r3, #16
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f26:	061b      	lsls	r3, r3, #24
 8000f28:	4933      	ldr	r1, [pc, #204]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f2e:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <HAL_RCC_OscConfig+0x4dc>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fb52 	bl	80005dc <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f3c:	f7ff fb4e 	bl	80005dc <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e04d      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d0f0      	beq.n	8000f3c <HAL_RCC_OscConfig+0x41c>
 8000f5a:	e045      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f5c:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <HAL_RCC_OscConfig+0x4dc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fb3b 	bl	80005dc <HAL_GetTick>
 8000f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f6a:	f7ff fb37 	bl	80005dc <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e036      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f0      	bne.n	8000f6a <HAL_RCC_OscConfig+0x44a>
 8000f88:	e02e      	b.n	8000fe8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d101      	bne.n	8000f96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e029      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_RCC_OscConfig+0x4d8>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d11c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d115      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d10d      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d106      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d001      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40007000 	.word	0x40007000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	42470060 	.word	0x42470060

08001000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d101      	bne.n	8001014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e0cc      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001014:	4b68      	ldr	r3, [pc, #416]	; (80011b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 030f 	and.w	r3, r3, #15
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d90c      	bls.n	800103c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001022:	4b65      	ldr	r3, [pc, #404]	; (80011b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800102a:	4b63      	ldr	r3, [pc, #396]	; (80011b8 <HAL_RCC_ClockConfig+0x1b8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	429a      	cmp	r2, r3
 8001036:	d001      	beq.n	800103c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e0b8      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d020      	beq.n	800108a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001054:	4b59      	ldr	r3, [pc, #356]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	4a58      	ldr	r2, [pc, #352]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 800105a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800105e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800106c:	4b53      	ldr	r3, [pc, #332]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	4a52      	ldr	r2, [pc, #328]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001078:	4b50      	ldr	r3, [pc, #320]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	494d      	ldr	r1, [pc, #308]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001086:	4313      	orrs	r3, r2
 8001088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d044      	beq.n	8001120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d107      	bne.n	80010ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109e:	4b47      	ldr	r3, [pc, #284]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d119      	bne.n	80010de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e07f      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d003      	beq.n	80010be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d107      	bne.n	80010ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010be:	4b3f      	ldr	r3, [pc, #252]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d109      	bne.n	80010de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e06f      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e067      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010de:	4b37      	ldr	r3, [pc, #220]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f023 0203 	bic.w	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	4934      	ldr	r1, [pc, #208]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 80010ec:	4313      	orrs	r3, r2
 80010ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f0:	f7ff fa74 	bl	80005dc <HAL_GetTick>
 80010f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010f6:	e00a      	b.n	800110e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f8:	f7ff fa70 	bl	80005dc <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	f241 3288 	movw	r2, #5000	; 0x1388
 8001106:	4293      	cmp	r3, r2
 8001108:	d901      	bls.n	800110e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e04f      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800110e:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 020c 	and.w	r2, r3, #12
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	429a      	cmp	r2, r3
 800111e:	d1eb      	bne.n	80010f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 030f 	and.w	r3, r3, #15
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d20c      	bcs.n	8001148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112e:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <HAL_RCC_ClockConfig+0x1b8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	683a      	ldr	r2, [r7, #0]
 8001140:	429a      	cmp	r2, r3
 8001142:	d001      	beq.n	8001148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e032      	b.n	80011ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d008      	beq.n	8001166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	4916      	ldr	r1, [pc, #88]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001162:	4313      	orrs	r3, r2
 8001164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d009      	beq.n	8001186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	490e      	ldr	r1, [pc, #56]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	4313      	orrs	r3, r2
 8001184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001186:	f000 f821 	bl	80011cc <HAL_RCC_GetSysClockFreq>
 800118a:	4601      	mov	r1, r0
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001198:	5cd3      	ldrb	r3, [r2, r3]
 800119a:	fa21 f303 	lsr.w	r3, r1, r3
 800119e:	4a09      	ldr	r2, [pc, #36]	; (80011c4 <HAL_RCC_ClockConfig+0x1c4>)
 80011a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_RCC_ClockConfig+0x1c8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 febc 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023c00 	.word	0x40023c00
 80011bc:	40023800 	.word	0x40023800
 80011c0:	08005c8c 	.word	0x08005c8c
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20000000 	.word	0x20000000

080011cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011e2:	4b63      	ldr	r3, [pc, #396]	; (8001370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d007      	beq.n	80011fe <HAL_RCC_GetSysClockFreq+0x32>
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d008      	beq.n	8001204 <HAL_RCC_GetSysClockFreq+0x38>
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f040 80b4 	bne.w	8001360 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011f8:	4b5e      	ldr	r3, [pc, #376]	; (8001374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80011fa:	60bb      	str	r3, [r7, #8]
       break;
 80011fc:	e0b3      	b.n	8001366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80011fe:	4b5e      	ldr	r3, [pc, #376]	; (8001378 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001200:	60bb      	str	r3, [r7, #8]
      break;
 8001202:	e0b0      	b.n	8001366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001204:	4b5a      	ldr	r3, [pc, #360]	; (8001370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800120c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800120e:	4b58      	ldr	r3, [pc, #352]	; (8001370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d04a      	beq.n	80012b0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800121a:	4b55      	ldr	r3, [pc, #340]	; (8001370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	099b      	lsrs	r3, r3, #6
 8001220:	f04f 0400 	mov.w	r4, #0
 8001224:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	ea03 0501 	and.w	r5, r3, r1
 8001230:	ea04 0602 	and.w	r6, r4, r2
 8001234:	4629      	mov	r1, r5
 8001236:	4632      	mov	r2, r6
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	f04f 0400 	mov.w	r4, #0
 8001240:	0154      	lsls	r4, r2, #5
 8001242:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001246:	014b      	lsls	r3, r1, #5
 8001248:	4619      	mov	r1, r3
 800124a:	4622      	mov	r2, r4
 800124c:	1b49      	subs	r1, r1, r5
 800124e:	eb62 0206 	sbc.w	r2, r2, r6
 8001252:	f04f 0300 	mov.w	r3, #0
 8001256:	f04f 0400 	mov.w	r4, #0
 800125a:	0194      	lsls	r4, r2, #6
 800125c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001260:	018b      	lsls	r3, r1, #6
 8001262:	1a5b      	subs	r3, r3, r1
 8001264:	eb64 0402 	sbc.w	r4, r4, r2
 8001268:	f04f 0100 	mov.w	r1, #0
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	00e2      	lsls	r2, r4, #3
 8001272:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001276:	00d9      	lsls	r1, r3, #3
 8001278:	460b      	mov	r3, r1
 800127a:	4614      	mov	r4, r2
 800127c:	195b      	adds	r3, r3, r5
 800127e:	eb44 0406 	adc.w	r4, r4, r6
 8001282:	f04f 0100 	mov.w	r1, #0
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	0262      	lsls	r2, r4, #9
 800128c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001290:	0259      	lsls	r1, r3, #9
 8001292:	460b      	mov	r3, r1
 8001294:	4614      	mov	r4, r2
 8001296:	4618      	mov	r0, r3
 8001298:	4621      	mov	r1, r4
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f04f 0400 	mov.w	r4, #0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4623      	mov	r3, r4
 80012a4:	f7fe ffe4 	bl	8000270 <__aeabi_uldivmod>
 80012a8:	4603      	mov	r3, r0
 80012aa:	460c      	mov	r4, r1
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e049      	b.n	8001344 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b0:	4b2f      	ldr	r3, [pc, #188]	; (8001370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	099b      	lsrs	r3, r3, #6
 80012b6:	f04f 0400 	mov.w	r4, #0
 80012ba:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	ea03 0501 	and.w	r5, r3, r1
 80012c6:	ea04 0602 	and.w	r6, r4, r2
 80012ca:	4629      	mov	r1, r5
 80012cc:	4632      	mov	r2, r6
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	f04f 0400 	mov.w	r4, #0
 80012d6:	0154      	lsls	r4, r2, #5
 80012d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012dc:	014b      	lsls	r3, r1, #5
 80012de:	4619      	mov	r1, r3
 80012e0:	4622      	mov	r2, r4
 80012e2:	1b49      	subs	r1, r1, r5
 80012e4:	eb62 0206 	sbc.w	r2, r2, r6
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	f04f 0400 	mov.w	r4, #0
 80012f0:	0194      	lsls	r4, r2, #6
 80012f2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012f6:	018b      	lsls	r3, r1, #6
 80012f8:	1a5b      	subs	r3, r3, r1
 80012fa:	eb64 0402 	sbc.w	r4, r4, r2
 80012fe:	f04f 0100 	mov.w	r1, #0
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	00e2      	lsls	r2, r4, #3
 8001308:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800130c:	00d9      	lsls	r1, r3, #3
 800130e:	460b      	mov	r3, r1
 8001310:	4614      	mov	r4, r2
 8001312:	195b      	adds	r3, r3, r5
 8001314:	eb44 0406 	adc.w	r4, r4, r6
 8001318:	f04f 0100 	mov.w	r1, #0
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	02a2      	lsls	r2, r4, #10
 8001322:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001326:	0299      	lsls	r1, r3, #10
 8001328:	460b      	mov	r3, r1
 800132a:	4614      	mov	r4, r2
 800132c:	4618      	mov	r0, r3
 800132e:	4621      	mov	r1, r4
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f04f 0400 	mov.w	r4, #0
 8001336:	461a      	mov	r2, r3
 8001338:	4623      	mov	r3, r4
 800133a:	f7fe ff99 	bl	8000270 <__aeabi_uldivmod>
 800133e:	4603      	mov	r3, r0
 8001340:	460c      	mov	r4, r1
 8001342:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	0c1b      	lsrs	r3, r3, #16
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	3301      	adds	r3, #1
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	fbb2 f3f3 	udiv	r3, r2, r3
 800135c:	60bb      	str	r3, [r7, #8]
      break;
 800135e:	e002      	b.n	8001366 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001362:	60bb      	str	r3, [r7, #8]
      break;
 8001364:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001366:	68bb      	ldr	r3, [r7, #8]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	00f42400 	.word	0x00f42400
 8001378:	007a1200 	.word	0x007a1200

0800137c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_RCC_GetHCLKFreq+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008

08001394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001398:	f7ff fff0 	bl	800137c <HAL_RCC_GetHCLKFreq>
 800139c:	4601      	mov	r1, r0
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	0a9b      	lsrs	r3, r3, #10
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	4a03      	ldr	r2, [pc, #12]	; (80013b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013aa:	5cd3      	ldrb	r3, [r2, r3]
 80013ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	08005c9c 	.word	0x08005c9c

080013bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	220f      	movs	r2, #15
 80013ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_RCC_GetClockConfig+0x5c>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 0203 	and.w	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <HAL_RCC_GetClockConfig+0x5c>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <HAL_RCC_GetClockConfig+0x5c>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_RCC_GetClockConfig+0x5c>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013fe:	4b07      	ldr	r3, [pc, #28]	; (800141c <HAL_RCC_GetClockConfig+0x60>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 020f 	and.w	r2, r3, #15
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	601a      	str	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40023c00 	.word	0x40023c00

08001420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e01d      	b.n	800146e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d106      	bne.n	800144c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f815 	bl	8001476 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3304      	adds	r3, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f000 f968 	bl	8001734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800148a:	b480      	push	{r7}
 800148c:	b085      	sub	sp, #20
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f042 0201 	orr.w	r2, r2, #1
 80014a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2b06      	cmp	r3, #6
 80014b2:	d007      	beq.n	80014c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0201 	orr.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d122      	bne.n	800152e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d11b      	bne.n	800152e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f06f 0202 	mvn.w	r2, #2
 80014fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f8ee 	bl	80016f6 <HAL_TIM_IC_CaptureCallback>
 800151a:	e005      	b.n	8001528 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f8e0 	bl	80016e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f8f1 	bl	800170a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b04      	cmp	r3, #4
 800153a:	d122      	bne.n	8001582 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b04      	cmp	r3, #4
 8001548:	d11b      	bne.n	8001582 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f06f 0204 	mvn.w	r2, #4
 8001552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2202      	movs	r2, #2
 8001558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001564:	2b00      	cmp	r3, #0
 8001566:	d003      	beq.n	8001570 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f8c4 	bl	80016f6 <HAL_TIM_IC_CaptureCallback>
 800156e:	e005      	b.n	800157c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f8b6 	bl	80016e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f8c7 	bl	800170a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b08      	cmp	r3, #8
 800158e:	d122      	bne.n	80015d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b08      	cmp	r3, #8
 800159c:	d11b      	bne.n	80015d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f06f 0208 	mvn.w	r2, #8
 80015a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2204      	movs	r2, #4
 80015ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f89a 	bl	80016f6 <HAL_TIM_IC_CaptureCallback>
 80015c2:	e005      	b.n	80015d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f88c 	bl	80016e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f89d 	bl	800170a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	2b10      	cmp	r3, #16
 80015e2:	d122      	bne.n	800162a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	2b10      	cmp	r3, #16
 80015f0:	d11b      	bne.n	800162a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f06f 0210 	mvn.w	r2, #16
 80015fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2208      	movs	r2, #8
 8001600:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 f870 	bl	80016f6 <HAL_TIM_IC_CaptureCallback>
 8001616:	e005      	b.n	8001624 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f862 	bl	80016e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f873 	bl	800170a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	691b      	ldr	r3, [r3, #16]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b01      	cmp	r3, #1
 8001636:	d10e      	bne.n	8001656 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b01      	cmp	r3, #1
 8001644:	d107      	bne.n	8001656 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f06f 0201 	mvn.w	r2, #1
 800164e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fc25 	bl	8001ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001660:	2b80      	cmp	r3, #128	; 0x80
 8001662:	d10e      	bne.n	8001682 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166e:	2b80      	cmp	r3, #128	; 0x80
 8001670:	d107      	bne.n	8001682 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800167a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f903 	bl	8001888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800168c:	2b40      	cmp	r3, #64	; 0x40
 800168e:	d10e      	bne.n	80016ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169a:	2b40      	cmp	r3, #64	; 0x40
 800169c:	d107      	bne.n	80016ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f838 	bl	800171e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	f003 0320 	and.w	r3, r3, #32
 80016b8:	2b20      	cmp	r3, #32
 80016ba:	d10e      	bne.n	80016da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f003 0320 	and.w	r3, r3, #32
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	d107      	bne.n	80016da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f06f 0220 	mvn.w	r2, #32
 80016d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 f8cd 	bl	8001874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a40      	ldr	r2, [pc, #256]	; (8001848 <TIM_Base_SetConfig+0x114>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d013      	beq.n	8001774 <TIM_Base_SetConfig+0x40>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001752:	d00f      	beq.n	8001774 <TIM_Base_SetConfig+0x40>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a3d      	ldr	r2, [pc, #244]	; (800184c <TIM_Base_SetConfig+0x118>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d00b      	beq.n	8001774 <TIM_Base_SetConfig+0x40>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a3c      	ldr	r2, [pc, #240]	; (8001850 <TIM_Base_SetConfig+0x11c>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d007      	beq.n	8001774 <TIM_Base_SetConfig+0x40>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a3b      	ldr	r2, [pc, #236]	; (8001854 <TIM_Base_SetConfig+0x120>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d003      	beq.n	8001774 <TIM_Base_SetConfig+0x40>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a3a      	ldr	r2, [pc, #232]	; (8001858 <TIM_Base_SetConfig+0x124>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d108      	bne.n	8001786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800177a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a2f      	ldr	r2, [pc, #188]	; (8001848 <TIM_Base_SetConfig+0x114>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d02b      	beq.n	80017e6 <TIM_Base_SetConfig+0xb2>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001794:	d027      	beq.n	80017e6 <TIM_Base_SetConfig+0xb2>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a2c      	ldr	r2, [pc, #176]	; (800184c <TIM_Base_SetConfig+0x118>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d023      	beq.n	80017e6 <TIM_Base_SetConfig+0xb2>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a2b      	ldr	r2, [pc, #172]	; (8001850 <TIM_Base_SetConfig+0x11c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d01f      	beq.n	80017e6 <TIM_Base_SetConfig+0xb2>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a2a      	ldr	r2, [pc, #168]	; (8001854 <TIM_Base_SetConfig+0x120>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d01b      	beq.n	80017e6 <TIM_Base_SetConfig+0xb2>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a29      	ldr	r2, [pc, #164]	; (8001858 <TIM_Base_SetConfig+0x124>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d017      	beq.n	80017e6 <TIM_Base_SetConfig+0xb2>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a28      	ldr	r2, [pc, #160]	; (800185c <TIM_Base_SetConfig+0x128>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <TIM_Base_SetConfig+0xb2>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a27      	ldr	r2, [pc, #156]	; (8001860 <TIM_Base_SetConfig+0x12c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00f      	beq.n	80017e6 <TIM_Base_SetConfig+0xb2>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a26      	ldr	r2, [pc, #152]	; (8001864 <TIM_Base_SetConfig+0x130>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00b      	beq.n	80017e6 <TIM_Base_SetConfig+0xb2>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a25      	ldr	r2, [pc, #148]	; (8001868 <TIM_Base_SetConfig+0x134>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <TIM_Base_SetConfig+0xb2>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a24      	ldr	r2, [pc, #144]	; (800186c <TIM_Base_SetConfig+0x138>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d003      	beq.n	80017e6 <TIM_Base_SetConfig+0xb2>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a23      	ldr	r2, [pc, #140]	; (8001870 <TIM_Base_SetConfig+0x13c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d108      	bne.n	80017f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <TIM_Base_SetConfig+0x114>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d003      	beq.n	800182c <TIM_Base_SetConfig+0xf8>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a0c      	ldr	r2, [pc, #48]	; (8001858 <TIM_Base_SetConfig+0x124>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d103      	bne.n	8001834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	615a      	str	r2, [r3, #20]
}
 800183a:	bf00      	nop
 800183c:	3714      	adds	r7, #20
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40010000 	.word	0x40010000
 800184c:	40000400 	.word	0x40000400
 8001850:	40000800 	.word	0x40000800
 8001854:	40000c00 	.word	0x40000c00
 8001858:	40010400 	.word	0x40010400
 800185c:	40014000 	.word	0x40014000
 8001860:	40014400 	.word	0x40014400
 8001864:	40014800 	.word	0x40014800
 8001868:	40001800 	.word	0x40001800
 800186c:	40001c00 	.word	0x40001c00
 8001870:	40002000 	.word	0x40002000

08001874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a2:	f7fe fe65 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a6:	f000 f895 	bl	80019d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018aa:	f000 f8fd 	bl	8001aa8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  gatekeeper = xSemaphoreCreateMutex();
 80018ae:	2001      	movs	r0, #1
 80018b0:	f000 fe19 	bl	80024e6 <xQueueCreateMutex>
 80018b4:	4602      	mov	r2, r0
 80018b6:	4b39      	ldr	r3, [pc, #228]	; (800199c <main+0x100>)
 80018b8:	601a      	str	r2, [r3, #0]
  Global_Queue_Handle = xQueueCreate(10, sizeof(int));
 80018ba:	2200      	movs	r2, #0
 80018bc:	2104      	movs	r1, #4
 80018be:	200a      	movs	r0, #10
 80018c0:	f000 fd78 	bl	80023b4 <xQueueGenericCreate>
 80018c4:	4602      	mov	r2, r0
 80018c6:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <main+0x104>)
 80018c8:	601a      	str	r2, [r3, #0]
  status = xTaskCreate(Sender_Task,"Task-1",512,"Hello World from Task-1",2,&task1_handle);
 80018ca:	f107 0310 	add.w	r3, r7, #16
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	2302      	movs	r3, #2
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <main+0x108>)
 80018d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018da:	4933      	ldr	r1, [pc, #204]	; (80019a8 <main+0x10c>)
 80018dc:	4833      	ldr	r0, [pc, #204]	; (80019ac <main+0x110>)
 80018de:	f001 fb23 	bl	8002f28 <xTaskCreate>
 80018e2:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d009      	beq.n	80018fe <main+0x62>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80018ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ee:	f383 8811 	msr	BASEPRI, r3
 80018f2:	f3bf 8f6f 	isb	sy
 80018f6:	f3bf 8f4f 	dsb	sy
 80018fa:	623b      	str	r3, [r7, #32]
 80018fc:	e7fe      	b.n	80018fc <main+0x60>
  status = xTaskCreate(Receiver_Task,"Task-2",200,"Hello World from Task-2",2,&task2_handle);
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2302      	movs	r3, #2
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <main+0x114>)
 800190a:	22c8      	movs	r2, #200	; 0xc8
 800190c:	4929      	ldr	r1, [pc, #164]	; (80019b4 <main+0x118>)
 800190e:	482a      	ldr	r0, [pc, #168]	; (80019b8 <main+0x11c>)
 8001910:	f001 fb0a 	bl	8002f28 <xTaskCreate>
 8001914:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	2b01      	cmp	r3, #1
 800191a:	d009      	beq.n	8001930 <main+0x94>
 800191c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001920:	f383 8811 	msr	BASEPRI, r3
 8001924:	f3bf 8f6f 	isb	sy
 8001928:	f3bf 8f4f 	dsb	sy
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e7fe      	b.n	800192e <main+0x92>

  status =  xTaskCreate(user1, "User 1" , 512, "USer -1", 2, &user1_handle);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	2302      	movs	r3, #2
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <main+0x120>)
 800193c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001940:	491f      	ldr	r1, [pc, #124]	; (80019c0 <main+0x124>)
 8001942:	4820      	ldr	r0, [pc, #128]	; (80019c4 <main+0x128>)
 8001944:	f001 faf0 	bl	8002f28 <xTaskCreate>
 8001948:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	2b01      	cmp	r3, #1
 800194e:	d009      	beq.n	8001964 <main+0xc8>
 8001950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001954:	f383 8811 	msr	BASEPRI, r3
 8001958:	f3bf 8f6f 	isb	sy
 800195c:	f3bf 8f4f 	dsb	sy
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	e7fe      	b.n	8001962 <main+0xc6>

  status =  xTaskCreate(user2, "User 2" , 512, "USer -2", 2, &user2_handle);
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	2302      	movs	r3, #2
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	4b16      	ldr	r3, [pc, #88]	; (80019c8 <main+0x12c>)
 800196e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001972:	4916      	ldr	r1, [pc, #88]	; (80019cc <main+0x130>)
 8001974:	4816      	ldr	r0, [pc, #88]	; (80019d0 <main+0x134>)
 8001976:	f001 fad7 	bl	8002f28 <xTaskCreate>
 800197a:	6278      	str	r0, [r7, #36]	; 0x24
  configASSERT(status == pdPASS);
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	2b01      	cmp	r3, #1
 8001980:	d009      	beq.n	8001996 <main+0xfa>
 8001982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001986:	f383 8811 	msr	BASEPRI, r3
 800198a:	f3bf 8f6f 	isb	sy
 800198e:	f3bf 8f4f 	dsb	sy
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e7fe      	b.n	8001994 <main+0xf8>

  /* USER CODE END 2 */
  vTaskStartScheduler();
 8001996:	f001 fc3f 	bl	8003218 <vTaskStartScheduler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800199a:	e7fe      	b.n	800199a <main+0xfe>
 800199c:	20000098 	.word	0x20000098
 80019a0:	20000094 	.word	0x20000094
 80019a4:	08005b40 	.word	0x08005b40
 80019a8:	08005b58 	.word	0x08005b58
 80019ac:	08001e0d 	.word	0x08001e0d
 80019b0:	08005b60 	.word	0x08005b60
 80019b4:	08005b78 	.word	0x08005b78
 80019b8:	08001e59 	.word	0x08001e59
 80019bc:	08005b80 	.word	0x08005b80
 80019c0:	08005b88 	.word	0x08005b88
 80019c4:	08001d75 	.word	0x08001d75
 80019c8:	08005b90 	.word	0x08005b90
 80019cc:	08005b98 	.word	0x08005b98
 80019d0:	08001dc1 	.word	0x08001dc1

080019d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b094      	sub	sp, #80	; 0x50
 80019d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019da:	f107 0320 	add.w	r3, r7, #32
 80019de:	2230      	movs	r2, #48	; 0x30
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 f9a5 	bl	8004d32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f8:	2300      	movs	r3, #0
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <SystemClock_Config+0xcc>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	4a27      	ldr	r2, [pc, #156]	; (8001aa0 <SystemClock_Config+0xcc>)
 8001a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a06:	6413      	str	r3, [r2, #64]	; 0x40
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <SystemClock_Config+0xcc>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a14:	2300      	movs	r3, #0
 8001a16:	607b      	str	r3, [r7, #4]
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <SystemClock_Config+0xd0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <SystemClock_Config+0xd0>)
 8001a1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <SystemClock_Config+0xd0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2c:	607b      	str	r3, [r7, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a30:	2302      	movs	r3, #2
 8001a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a34:	2301      	movs	r3, #1
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a38:	2310      	movs	r3, #16
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a40:	2300      	movs	r3, #0
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a44:	2308      	movs	r3, #8
 8001a46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001a48:	2332      	movs	r3, #50	; 0x32
 8001a4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a4c:	2304      	movs	r3, #4
 8001a4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a50:	2307      	movs	r3, #7
 8001a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a54:	f107 0320 	add.w	r3, r7, #32
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff f861 	bl	8000b20 <HAL_RCC_OscConfig>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a64:	f000 fa2e 	bl	8001ec4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a68:	230f      	movs	r3, #15
 8001a6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001a74:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001a7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	2100      	movs	r1, #0
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff faba 	bl	8001000 <HAL_RCC_ClockConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a92:	f000 fa17 	bl	8001ec4 <Error_Handler>
  }
}
 8001a96:	bf00      	nop
 8001a98:	3750      	adds	r7, #80	; 0x50
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40007000 	.word	0x40007000

08001aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	; 0x30
 8001aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	4ba1      	ldr	r3, [pc, #644]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4aa0      	ldr	r2, [pc, #640]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001ac8:	f043 0310 	orr.w	r3, r3, #16
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b9e      	ldr	r3, [pc, #632]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	4b9a      	ldr	r3, [pc, #616]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a99      	ldr	r2, [pc, #612]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b97      	ldr	r3, [pc, #604]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b93      	ldr	r3, [pc, #588]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a92      	ldr	r2, [pc, #584]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b90      	ldr	r3, [pc, #576]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b8c      	ldr	r3, [pc, #560]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a8b      	ldr	r2, [pc, #556]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b89      	ldr	r3, [pc, #548]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b85      	ldr	r3, [pc, #532]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a84      	ldr	r2, [pc, #528]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b82      	ldr	r3, [pc, #520]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	4b7e      	ldr	r3, [pc, #504]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a7d      	ldr	r2, [pc, #500]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b7b      	ldr	r3, [pc, #492]	; (8001d48 <MX_GPIO_Init+0x2a0>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2108      	movs	r1, #8
 8001b6a:	4878      	ldr	r0, [pc, #480]	; (8001d4c <MX_GPIO_Init+0x2a4>)
 8001b6c:	f7fe ffbe 	bl	8000aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b70:	2201      	movs	r2, #1
 8001b72:	2101      	movs	r1, #1
 8001b74:	4876      	ldr	r0, [pc, #472]	; (8001d50 <MX_GPIO_Init+0x2a8>)
 8001b76:	f7fe ffb9 	bl	8000aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001b80:	4874      	ldr	r0, [pc, #464]	; (8001d54 <MX_GPIO_Init+0x2ac>)
 8001b82:	f7fe ffb3 	bl	8000aec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001b86:	2308      	movs	r3, #8
 8001b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	486b      	ldr	r0, [pc, #428]	; (8001d4c <MX_GPIO_Init+0x2a4>)
 8001b9e:	f7fe fe0b 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4865      	ldr	r0, [pc, #404]	; (8001d50 <MX_GPIO_Init+0x2a8>)
 8001bba:	f7fe fdfd 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bce:	2305      	movs	r3, #5
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 031c 	add.w	r3, r7, #28
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	485d      	ldr	r0, [pc, #372]	; (8001d50 <MX_GPIO_Init+0x2a8>)
 8001bda:	f7fe fded 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bde:	2301      	movs	r3, #1
 8001be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001be2:	4b5d      	ldr	r3, [pc, #372]	; (8001d58 <MX_GPIO_Init+0x2b0>)
 8001be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	485a      	ldr	r0, [pc, #360]	; (8001d5c <MX_GPIO_Init+0x2b4>)
 8001bf2:	f7fe fde1 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001bf6:	2310      	movs	r3, #16
 8001bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c06:	2306      	movs	r3, #6
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4852      	ldr	r0, [pc, #328]	; (8001d5c <MX_GPIO_Init+0x2b4>)
 8001c12:	f7fe fdd1 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001c16:	23e0      	movs	r3, #224	; 0xe0
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c26:	2305      	movs	r3, #5
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	4619      	mov	r1, r3
 8001c30:	484a      	ldr	r0, [pc, #296]	; (8001d5c <MX_GPIO_Init+0x2b4>)
 8001c32:	f7fe fdc1 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001c36:	2304      	movs	r3, #4
 8001c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4619      	mov	r1, r3
 8001c48:	4845      	ldr	r0, [pc, #276]	; (8001d60 <MX_GPIO_Init+0x2b8>)
 8001c4a:	f7fe fdb5 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c60:	2305      	movs	r3, #5
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	4619      	mov	r1, r3
 8001c6a:	483d      	ldr	r0, [pc, #244]	; (8001d60 <MX_GPIO_Init+0x2b8>)
 8001c6c:	f7fe fda4 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001c70:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001c74:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c82:	f107 031c 	add.w	r3, r7, #28
 8001c86:	4619      	mov	r1, r3
 8001c88:	4832      	ldr	r0, [pc, #200]	; (8001d54 <MX_GPIO_Init+0x2ac>)
 8001c8a:	f7fe fd95 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001c8e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c94:	2302      	movs	r3, #2
 8001c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ca0:	2306      	movs	r3, #6
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4829      	ldr	r0, [pc, #164]	; (8001d50 <MX_GPIO_Init+0x2a8>)
 8001cac:	f7fe fd84 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001cbe:	f107 031c 	add.w	r3, r7, #28
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4825      	ldr	r0, [pc, #148]	; (8001d5c <MX_GPIO_Init+0x2b4>)
 8001cc6:	f7fe fd77 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001cca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001cdc:	230a      	movs	r3, #10
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481d      	ldr	r0, [pc, #116]	; (8001d5c <MX_GPIO_Init+0x2b4>)
 8001ce8:	f7fe fd66 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001cec:	2320      	movs	r3, #32
 8001cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4815      	ldr	r0, [pc, #84]	; (8001d54 <MX_GPIO_Init+0x2ac>)
 8001d00:	f7fe fd5a 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001d04:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0a:	2312      	movs	r3, #18
 8001d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d16:	2304      	movs	r3, #4
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480f      	ldr	r0, [pc, #60]	; (8001d60 <MX_GPIO_Init+0x2b8>)
 8001d22:	f7fe fd49 	bl	80007b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_GPIO_Init+0x2b0>)
 8001d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	4804      	ldr	r0, [pc, #16]	; (8001d4c <MX_GPIO_Init+0x2a4>)
 8001d3a:	f7fe fd3d 	bl	80007b8 <HAL_GPIO_Init>

}
 8001d3e:	bf00      	nop
 8001d40:	3730      	adds	r7, #48	; 0x30
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	10120000 	.word	0x10120000
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020400 	.word	0x40020400

08001d64 <Access_Precious_Resource>:

/* USER CODE BEGIN 4 */
void Access_Precious_Resource(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <user1>:
static void user1(void* paramenters)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(xSemaphoreTake(gatekeeper, pdMS_TO_TICKS(1000)))
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <user1+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d84:	4618      	mov	r0, r3
 8001d86:	f000 fe43 	bl	8002a10 <xQueueSemaphoreTake>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00c      	beq.n	8001daa <user1+0x36>
		{
			printf("User 1 get access to precious source");
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <user1+0x44>)
 8001d92:	f002 ffd7 	bl	8004d44 <iprintf>
			Access_Precious_Resource();
 8001d96:	f7ff ffe5 	bl	8001d64 <Access_Precious_Resource>
			xSemaphoreGive(gatekeeper);
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <user1+0x40>)
 8001d9c:	6818      	ldr	r0, [r3, #0]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	f000 fbb8 	bl	8002518 <xQueueGenericSend>
 8001da8:	e7e8      	b.n	8001d7c <user1+0x8>
		}
		else
		{
			printf("Failed to get access with in 1 Sec");
 8001daa:	4804      	ldr	r0, [pc, #16]	; (8001dbc <user1+0x48>)
 8001dac:	f002 ffca 	bl	8004d44 <iprintf>
		if(xSemaphoreTake(gatekeeper, pdMS_TO_TICKS(1000)))
 8001db0:	e7e4      	b.n	8001d7c <user1+0x8>
 8001db2:	bf00      	nop
 8001db4:	20000098 	.word	0x20000098
 8001db8:	08005ba0 	.word	0x08005ba0
 8001dbc:	08005bc8 	.word	0x08005bc8

08001dc0 <user2>:
		}
	}
}

static void user2(void* paramenters)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(xSemaphoreTake(gatekeeper, pdMS_TO_TICKS(1000)))
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <user2+0x40>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 fe1d 	bl	8002a10 <xQueueSemaphoreTake>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00c      	beq.n	8001df6 <user2+0x36>
		{
			printf("User 2 get access to precious source");
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <user2+0x44>)
 8001dde:	f002 ffb1 	bl	8004d44 <iprintf>
			Access_Precious_Resource();
 8001de2:	f7ff ffbf 	bl	8001d64 <Access_Precious_Resource>
			xSemaphoreGive(gatekeeper);
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <user2+0x40>)
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	2300      	movs	r3, #0
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	f000 fb92 	bl	8002518 <xQueueGenericSend>
 8001df4:	e7e8      	b.n	8001dc8 <user2+0x8>
		}
		else
		{
			printf("Failed to get access with in 1 Sec");
 8001df6:	4804      	ldr	r0, [pc, #16]	; (8001e08 <user2+0x48>)
 8001df8:	f002 ffa4 	bl	8004d44 <iprintf>
		if(xSemaphoreTake(gatekeeper, pdMS_TO_TICKS(1000)))
 8001dfc:	e7e4      	b.n	8001dc8 <user2+0x8>
 8001dfe:	bf00      	nop
 8001e00:	20000098 	.word	0x20000098
 8001e04:	08005bec 	.word	0x08005bec
 8001e08:	08005bc8 	.word	0x08005bc8

08001e0c <Sender_Task>:
		}
	}
}

static void Sender_Task(void* parameters)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
while(1)
	{
	int i=0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
	i++;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60fb      	str	r3, [r7, #12]
	//printf("%s", (char *) parameters);
	printf("Send to Receiver");
 8001e1e:	480b      	ldr	r0, [pc, #44]	; (8001e4c <Sender_Task+0x40>)
 8001e20:	f002 ff90 	bl	8004d44 <iprintf>
	if(!( xQueueSend(Global_Queue_Handle,&i,100)) )
 8001e24:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <Sender_Task+0x44>)
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	f107 010c 	add.w	r1, r7, #12
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	2264      	movs	r2, #100	; 0x64
 8001e30:	f000 fb72 	bl	8002518 <xQueueGenericSend>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d102      	bne.n	8001e40 <Sender_Task+0x34>
			{
				printf("failed to send in Queue");
 8001e3a:	4806      	ldr	r0, [pc, #24]	; (8001e54 <Sender_Task+0x48>)
 8001e3c:	f002 ff82 	bl	8004d44 <iprintf>
			}
	vTaskDelay(pdMS_TO_TICKS(1000));
 8001e40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e44:	f001 f9b4 	bl	80031b0 <vTaskDelay>
	{
 8001e48:	e7e4      	b.n	8001e14 <Sender_Task+0x8>
 8001e4a:	bf00      	nop
 8001e4c:	08005c14 	.word	0x08005c14
 8001e50:	20000094 	.word	0x20000094
 8001e54:	08005c28 	.word	0x08005c28

08001e58 <Receiver_Task>:
	}
}

static void Receiver_Task(void* parameters)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

	while(1)
		{
		unsigned int recv_i;
		//printf("%s", (char *) parameters);
		if(  (xQueueReceive(Global_Queue_Handle, &recv_i, pdMS_TO_TICKS(1000))) )
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <Receiver_Task+0x3c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f107 010c 	add.w	r1, r7, #12
 8001e68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fcf3 	bl	8002858 <xQueueReceive>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <Receiver_Task+0x2c>
		{
			printf("Receiver receiving %d", recv_i);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4806      	ldr	r0, [pc, #24]	; (8001e98 <Receiver_Task+0x40>)
 8001e7e:	f002 ff61 	bl	8004d44 <iprintf>
 8001e82:	e002      	b.n	8001e8a <Receiver_Task+0x32>
		}
		else
		{
			printf("failed to receive in Queue");
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <Receiver_Task+0x44>)
 8001e86:	f002 ff5d 	bl	8004d44 <iprintf>
		}
		vTaskDelay(pdMS_TO_TICKS(1000));
 8001e8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e8e:	f001 f98f 	bl	80031b0 <vTaskDelay>
		{
 8001e92:	e7e5      	b.n	8001e60 <Receiver_Task+0x8>
 8001e94:	20000094 	.word	0x20000094
 8001e98:	08005c40 	.word	0x08005c40
 8001e9c:	08005c58 	.word	0x08005c58

08001ea0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a04      	ldr	r2, [pc, #16]	; (8001ec0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001eb2:	f7fe fb7f 	bl	80005b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40001000 	.word	0x40001000

08001ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	4a0f      	ldr	r2, [pc, #60]	; (8001f20 <HAL_MspInit+0x4c>)
 8001ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_MspInit+0x4c>)
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a08      	ldr	r2, [pc, #32]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_MspInit+0x4c>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	603b      	str	r3, [r7, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	2036      	movs	r0, #54	; 0x36
 8001f3a:	f7fe fc13 	bl	8000764 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001f3e:	2036      	movs	r0, #54	; 0x36
 8001f40:	f7fe fc2c 	bl	800079c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <HAL_InitTick+0xa4>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <HAL_InitTick+0xa4>)
 8001f4e:	f043 0310 	orr.w	r3, r3, #16
 8001f52:	6413      	str	r3, [r2, #64]	; 0x40
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <HAL_InitTick+0xa4>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f60:	f107 0210 	add.w	r2, r7, #16
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4611      	mov	r1, r2
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fa26 	bl	80013bc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f70:	f7ff fa10 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 8001f74:	4603      	mov	r3, r0
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	4a13      	ldr	r2, [pc, #76]	; (8001fcc <HAL_InitTick+0xa8>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9b      	lsrs	r3, r3, #18
 8001f84:	3b01      	subs	r3, #1
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <HAL_InitTick+0xb0>)
 8001f8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f94:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <HAL_InitTick+0xac>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <HAL_InitTick+0xac>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001fa8:	4809      	ldr	r0, [pc, #36]	; (8001fd0 <HAL_InitTick+0xac>)
 8001faa:	f7ff fa39 	bl	8001420 <HAL_TIM_Base_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d104      	bne.n	8001fbe <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001fb4:	4806      	ldr	r0, [pc, #24]	; (8001fd0 <HAL_InitTick+0xac>)
 8001fb6:	f7ff fa68 	bl	800148a <HAL_TIM_Base_Start_IT>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	e000      	b.n	8001fc0 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3730      	adds	r7, #48	; 0x30
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	431bde83 	.word	0x431bde83
 8001fd0:	20012e14 	.word	0x20012e14
 8001fd4:	40001000 	.word	0x40001000

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <TIM6_DAC_IRQHandler+0x10>)
 8002012:	f7ff fa5e 	bl	80014d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20012e14 	.word	0x20012e14

08002020 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	e00a      	b.n	8002048 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002032:	f3af 8000 	nop.w
 8002036:	4601      	mov	r1, r0
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	60ba      	str	r2, [r7, #8]
 800203e:	b2ca      	uxtb	r2, r1
 8002040:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3301      	adds	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	dbf0      	blt.n	8002032 <_read+0x12>
	}

return len;
 8002050:	687b      	ldr	r3, [r7, #4]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e009      	b.n	8002080 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	60ba      	str	r2, [r7, #8]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	dbf1      	blt.n	800206c <_write+0x12>
	}
	return len;
 8002088:	687b      	ldr	r3, [r7, #4]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <_close>:

int _close(int file)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
	return -1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ba:	605a      	str	r2, [r3, #4]
	return 0;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <_isatty>:

int _isatty(int file)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
	return 1;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
	return 0;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <SystemInit+0x28>)
 8002102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002106:	4a07      	ldr	r2, [pc, #28]	; (8002124 <SystemInit+0x28>)
 8002108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800210c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SystemInit+0x28>)
 8002112:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002116:	609a      	str	r2, [r3, #8]
#endif
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002128:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002160 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800212c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800212e:	e003      	b.n	8002138 <LoopCopyDataInit>

08002130 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002132:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002134:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002136:	3104      	adds	r1, #4

08002138 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002138:	480b      	ldr	r0, [pc, #44]	; (8002168 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800213a:	4b0c      	ldr	r3, [pc, #48]	; (800216c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800213c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800213e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002140:	d3f6      	bcc.n	8002130 <CopyDataInit>
  ldr  r2, =_sbss
 8002142:	4a0b      	ldr	r2, [pc, #44]	; (8002170 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002144:	e002      	b.n	800214c <LoopFillZerobss>

08002146 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002146:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002148:	f842 3b04 	str.w	r3, [r2], #4

0800214c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800214e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002150:	d3f9      	bcc.n	8002146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002152:	f7ff ffd3 	bl	80020fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002156:	f002 fdbd 	bl	8004cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215a:	f7ff fb9f 	bl	800189c <main>
  bx  lr    
 800215e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002160:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002164:	08005d4c 	.word	0x08005d4c
  ldr  r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800216c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002170:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002174:	20012e98 	.word	0x20012e98

08002178 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002178:	e7fe      	b.n	8002178 <ADC_IRQHandler>

0800217a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f103 0208 	add.w	r2, r3, #8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f04f 32ff 	mov.w	r2, #4294967295
 8002192:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f103 0208 	add.w	r2, r3, #8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f103 0208 	add.w	r2, r3, #8
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	1c5a      	adds	r2, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	601a      	str	r2, [r3, #0]
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002232:	d103      	bne.n	800223c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	e00c      	b.n	8002256 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3308      	adds	r3, #8
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	e002      	b.n	800224a <vListInsert+0x2e>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	429a      	cmp	r2, r3
 8002254:	d2f6      	bcs.n	8002244 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	1c5a      	adds	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	601a      	str	r2, [r3, #0]
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800228e:	b480      	push	{r7}
 8002290:	b085      	sub	sp, #20
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6892      	ldr	r2, [r2, #8]
 80022a4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6852      	ldr	r2, [r2, #4]
 80022ae:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d103      	bne.n	80022c2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	1e5a      	subs	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <xQueueGenericReset+0x28>
 80022f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022fc:	f383 8811 	msr	BASEPRI, r3
 8002300:	f3bf 8f6f 	isb	sy
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	e7fe      	b.n	800230a <xQueueGenericReset+0x26>

    taskENTER_CRITICAL();
 800230c:	f002 f9d0 	bl	80046b0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002318:	68f9      	ldr	r1, [r7, #12]
 800231a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	441a      	add	r2, r3
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233c:	3b01      	subs	r3, #1
 800233e:	68f9      	ldr	r1, [r7, #12]
 8002340:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002342:	fb01 f303 	mul.w	r3, r1, r3
 8002346:	441a      	add	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	22ff      	movs	r2, #255	; 0xff
 8002350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	22ff      	movs	r2, #255	; 0xff
 8002358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d114      	bne.n	800238c <xQueueGenericReset+0xa8>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01a      	beq.n	80023a0 <xQueueGenericReset+0xbc>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3310      	adds	r3, #16
 800236e:	4618      	mov	r0, r3
 8002370:	f001 f9bc 	bl	80036ec <xTaskRemoveFromEventList>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d012      	beq.n	80023a0 <xQueueGenericReset+0xbc>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800237a:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <xQueueGenericReset+0xcc>)
 800237c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	e009      	b.n	80023a0 <xQueueGenericReset+0xbc>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	3310      	adds	r3, #16
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fef2 	bl	800217a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3324      	adds	r3, #36	; 0x24
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff feed 	bl	800217a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80023a0:	f002 f9b4 	bl	800470c <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80023a4:	2301      	movs	r3, #1
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e000ed04 	.word	0xe000ed04

080023b4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08c      	sub	sp, #48	; 0x30
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	4613      	mov	r3, r2
 80023c0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d109      	bne.n	80023dc <xQueueGenericCreate+0x28>
 80023c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	e7fe      	b.n	80023da <xQueueGenericCreate+0x26>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	fb02 f303 	mul.w	r3, r2, r3
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d006      	beq.n	80023fa <xQueueGenericCreate+0x46>
 80023ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d101      	bne.n	80023fe <xQueueGenericCreate+0x4a>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <xQueueGenericCreate+0x4c>
 80023fe:	2300      	movs	r3, #0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <xQueueGenericCreate+0x64>
 8002404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	e7fe      	b.n	8002416 <xQueueGenericCreate+0x62>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800241e:	d909      	bls.n	8002434 <xQueueGenericCreate+0x80>
 8002420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002424:	f383 8811 	msr	BASEPRI, r3
 8002428:	f3bf 8f6f 	isb	sy
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	e7fe      	b.n	8002432 <xQueueGenericCreate+0x7e>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	3350      	adds	r3, #80	; 0x50
 8002438:	4618      	mov	r0, r3
 800243a:	f002 fa53 	bl	80048e4 <pvPortMalloc>
 800243e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00d      	beq.n	8002462 <xQueueGenericCreate+0xae>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3350      	adds	r3, #80	; 0x50
 800244e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002450:	79fa      	ldrb	r2, [r7, #7]
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4613      	mov	r3, r2
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f805 	bl	800246c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002462:	6a3b      	ldr	r3, [r7, #32]
    }
 8002464:	4618      	mov	r0, r3
 8002466:	3728      	adds	r7, #40	; 0x28
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d103      	bne.n	8002488 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	e002      	b.n	800248e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800249a:	2101      	movs	r1, #1
 800249c:	69b8      	ldr	r0, [r7, #24]
 800249e:	f7ff ff21 	bl	80022e4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00e      	beq.n	80024de <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80024d2:	2300      	movs	r3, #0
 80024d4:	2200      	movs	r2, #0
 80024d6:	2100      	movs	r1, #0
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f81d 	bl	8002518 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80024f0:	2301      	movs	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	2300      	movs	r3, #0
 80024f6:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	461a      	mov	r2, r3
 80024fc:	6939      	ldr	r1, [r7, #16]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff58 	bl	80023b4 <xQueueGenericCreate>
 8002504:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f7ff ffd3 	bl	80024b2 <prvInitialiseMutex>

        return xNewQueue;
 800250c:	68fb      	ldr	r3, [r7, #12]
    }
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08e      	sub	sp, #56	; 0x38
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002526:	2300      	movs	r3, #0
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800252e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002530:	2b00      	cmp	r3, #0
 8002532:	d109      	bne.n	8002548 <xQueueGenericSend+0x30>
 8002534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002538:	f383 8811 	msr	BASEPRI, r3
 800253c:	f3bf 8f6f 	isb	sy
 8002540:	f3bf 8f4f 	dsb	sy
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
 8002546:	e7fe      	b.n	8002546 <xQueueGenericSend+0x2e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d103      	bne.n	8002556 <xQueueGenericSend+0x3e>
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <xQueueGenericSend+0x42>
 8002556:	2301      	movs	r3, #1
 8002558:	e000      	b.n	800255c <xQueueGenericSend+0x44>
 800255a:	2300      	movs	r3, #0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d109      	bne.n	8002574 <xQueueGenericSend+0x5c>
 8002560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
 8002572:	e7fe      	b.n	8002572 <xQueueGenericSend+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d103      	bne.n	8002582 <xQueueGenericSend+0x6a>
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <xQueueGenericSend+0x6e>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <xQueueGenericSend+0x70>
 8002586:	2300      	movs	r3, #0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <xQueueGenericSend+0x88>
 800258c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002590:	f383 8811 	msr	BASEPRI, r3
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	623b      	str	r3, [r7, #32]
 800259e:	e7fe      	b.n	800259e <xQueueGenericSend+0x86>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025a0:	f001 fa3c 	bl	8003a1c <xTaskGetSchedulerState>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <xQueueGenericSend+0x98>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <xQueueGenericSend+0x9c>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <xQueueGenericSend+0x9e>
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <xQueueGenericSend+0xb6>
 80025ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025be:	f383 8811 	msr	BASEPRI, r3
 80025c2:	f3bf 8f6f 	isb	sy
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	61fb      	str	r3, [r7, #28]
 80025cc:	e7fe      	b.n	80025cc <xQueueGenericSend+0xb4>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025ce:	f002 f86f 	bl	80046b0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025da:	429a      	cmp	r2, r3
 80025dc:	d302      	bcc.n	80025e4 <xQueueGenericSend+0xcc>
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d129      	bne.n	8002638 <xQueueGenericSend+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025ea:	f000 fb31 	bl	8002c50 <prvCopyDataToQueue>
 80025ee:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d010      	beq.n	800261a <xQueueGenericSend+0x102>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fa:	3324      	adds	r3, #36	; 0x24
 80025fc:	4618      	mov	r0, r3
 80025fe:	f001 f875 	bl	80036ec <xTaskRemoveFromEventList>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d013      	beq.n	8002630 <xQueueGenericSend+0x118>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002608:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <xQueueGenericSend+0x1f0>)
 800260a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	e00a      	b.n	8002630 <xQueueGenericSend+0x118>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d007      	beq.n	8002630 <xQueueGenericSend+0x118>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002620:	4b39      	ldr	r3, [pc, #228]	; (8002708 <xQueueGenericSend+0x1f0>)
 8002622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002630:	f002 f86c 	bl	800470c <vPortExitCritical>
                return pdPASS;
 8002634:	2301      	movs	r3, #1
 8002636:	e063      	b.n	8002700 <xQueueGenericSend+0x1e8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <xQueueGenericSend+0x12e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800263e:	f002 f865 	bl	800470c <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002642:	2300      	movs	r3, #0
 8002644:	e05c      	b.n	8002700 <xQueueGenericSend+0x1e8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002648:	2b00      	cmp	r3, #0
 800264a:	d106      	bne.n	800265a <xQueueGenericSend+0x142>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4618      	mov	r0, r3
 8002652:	f001 f8ad 	bl	80037b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002656:	2301      	movs	r3, #1
 8002658:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800265a:	f002 f857 	bl	800470c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800265e:	f000 fe2b 	bl	80032b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002662:	f002 f825 	bl	80046b0 <vPortEnterCritical>
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800266c:	b25b      	sxtb	r3, r3
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d103      	bne.n	800267c <xQueueGenericSend+0x164>
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002682:	b25b      	sxtb	r3, r3
 8002684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002688:	d103      	bne.n	8002692 <xQueueGenericSend+0x17a>
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002692:	f002 f83b 	bl	800470c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002696:	1d3a      	adds	r2, r7, #4
 8002698:	f107 0314 	add.w	r3, r7, #20
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f001 f89c 	bl	80037dc <xTaskCheckForTimeOut>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d124      	bne.n	80026f4 <xQueueGenericSend+0x1dc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80026aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ac:	f000 fbc8 	bl	8002e40 <prvIsQueueFull>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d018      	beq.n	80026e8 <xQueueGenericSend+0x1d0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	3310      	adds	r3, #16
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 ffc6 	bl	8003650 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80026c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026c6:	f000 fb53 	bl	8002d70 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80026ca:	f000 fe03 	bl	80032d4 <xTaskResumeAll>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f47f af7c 	bne.w	80025ce <xQueueGenericSend+0xb6>
                {
                    portYIELD_WITHIN_API();
 80026d6:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <xQueueGenericSend+0x1f0>)
 80026d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	e772      	b.n	80025ce <xQueueGenericSend+0xb6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80026e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ea:	f000 fb41 	bl	8002d70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026ee:	f000 fdf1 	bl	80032d4 <xTaskResumeAll>
 80026f2:	e76c      	b.n	80025ce <xQueueGenericSend+0xb6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80026f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f6:	f000 fb3b 	bl	8002d70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026fa:	f000 fdeb 	bl	80032d4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80026fe:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002700:	4618      	mov	r0, r3
 8002702:	3738      	adds	r7, #56	; 0x38
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	e000ed04 	.word	0xe000ed04

0800270c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b090      	sub	sp, #64	; 0x40
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800271e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <xQueueGenericSendFromISR+0x2c>
 8002724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
 8002736:	e7fe      	b.n	8002736 <xQueueGenericSendFromISR+0x2a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d103      	bne.n	8002746 <xQueueGenericSendFromISR+0x3a>
 800273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <xQueueGenericSendFromISR+0x3e>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <xQueueGenericSendFromISR+0x40>
 800274a:	2300      	movs	r3, #0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <xQueueGenericSendFromISR+0x58>
 8002750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
 8002762:	e7fe      	b.n	8002762 <xQueueGenericSendFromISR+0x56>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d103      	bne.n	8002772 <xQueueGenericSendFromISR+0x66>
 800276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <xQueueGenericSendFromISR+0x6a>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <xQueueGenericSendFromISR+0x6c>
 8002776:	2300      	movs	r3, #0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d109      	bne.n	8002790 <xQueueGenericSendFromISR+0x84>
 800277c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002780:	f383 8811 	msr	BASEPRI, r3
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	f3bf 8f4f 	dsb	sy
 800278c:	623b      	str	r3, [r7, #32]
 800278e:	e7fe      	b.n	800278e <xQueueGenericSendFromISR+0x82>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002790:	f002 f86a 	bl	8004868 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002794:	f3ef 8211 	mrs	r2, BASEPRI
 8002798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	61fa      	str	r2, [r7, #28]
 80027aa:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80027ac:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d302      	bcc.n	80027c2 <xQueueGenericSendFromISR+0xb6>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d13d      	bne.n	800283e <xQueueGenericSendFromISR+0x132>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80027c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d0:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027d8:	f000 fa3a 	bl	8002c50 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80027dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d112      	bne.n	800280c <xQueueGenericSendFromISR+0x100>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d024      	beq.n	8002838 <xQueueGenericSendFromISR+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	3324      	adds	r3, #36	; 0x24
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 ff7a 	bl	80036ec <xTaskRemoveFromEventList>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01c      	beq.n	8002838 <xQueueGenericSendFromISR+0x12c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d019      	beq.n	8002838 <xQueueGenericSendFromISR+0x12c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e015      	b.n	8002838 <xQueueGenericSendFromISR+0x12c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800280c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002810:	2b7f      	cmp	r3, #127	; 0x7f
 8002812:	d109      	bne.n	8002828 <xQueueGenericSendFromISR+0x11c>
        __asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	e7fe      	b.n	8002826 <xQueueGenericSendFromISR+0x11a>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002828:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800282c:	3301      	adds	r3, #1
 800282e:	b2db      	uxtb	r3, r3
 8002830:	b25a      	sxtb	r2, r3
 8002832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002838:	2301      	movs	r3, #1
 800283a:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 800283c:	e001      	b.n	8002842 <xQueueGenericSendFromISR+0x136>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 800283e:	2300      	movs	r3, #0
 8002840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002844:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800284c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800284e:	4618      	mov	r0, r3
 8002850:	3740      	adds	r7, #64	; 0x40
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08c      	sub	sp, #48	; 0x30
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <xQueueReceive+0x2e>
        __asm volatile
 8002872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002876:	f383 8811 	msr	BASEPRI, r3
 800287a:	f3bf 8f6f 	isb	sy
 800287e:	f3bf 8f4f 	dsb	sy
 8002882:	623b      	str	r3, [r7, #32]
 8002884:	e7fe      	b.n	8002884 <xQueueReceive+0x2c>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d103      	bne.n	8002894 <xQueueReceive+0x3c>
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <xQueueReceive+0x40>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <xQueueReceive+0x42>
 8002898:	2300      	movs	r3, #0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <xQueueReceive+0x5a>
 800289e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a2:	f383 8811 	msr	BASEPRI, r3
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	f3bf 8f4f 	dsb	sy
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	e7fe      	b.n	80028b0 <xQueueReceive+0x58>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028b2:	f001 f8b3 	bl	8003a1c <xTaskGetSchedulerState>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d102      	bne.n	80028c2 <xQueueReceive+0x6a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <xQueueReceive+0x6e>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <xQueueReceive+0x70>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d109      	bne.n	80028e0 <xQueueReceive+0x88>
 80028cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	e7fe      	b.n	80028de <xQueueReceive+0x86>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028e0:	f001 fee6 	bl	80046b0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01f      	beq.n	8002930 <xQueueReceive+0xd8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028f4:	f000 fa16 	bl	8002d24 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	1e5a      	subs	r2, r3, #1
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00f      	beq.n	8002928 <xQueueReceive+0xd0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290a:	3310      	adds	r3, #16
 800290c:	4618      	mov	r0, r3
 800290e:	f000 feed 	bl	80036ec <xTaskRemoveFromEventList>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <xQueueReceive+0xd0>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002918:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <xQueueReceive+0x1b4>)
 800291a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002928:	f001 fef0 	bl	800470c <vPortExitCritical>
                return pdPASS;
 800292c:	2301      	movs	r3, #1
 800292e:	e069      	b.n	8002a04 <xQueueReceive+0x1ac>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d103      	bne.n	800293e <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002936:	f001 fee9 	bl	800470c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800293a:	2300      	movs	r3, #0
 800293c:	e062      	b.n	8002a04 <xQueueReceive+0x1ac>
                }
                else if( xEntryTimeSet == pdFALSE )
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d106      	bne.n	8002952 <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002944:	f107 0310 	add.w	r3, r7, #16
 8002948:	4618      	mov	r0, r3
 800294a:	f000 ff31 	bl	80037b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800294e:	2301      	movs	r3, #1
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002952:	f001 fedb 	bl	800470c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002956:	f000 fcaf 	bl	80032b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800295a:	f001 fea9 	bl	80046b0 <vPortEnterCritical>
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002964:	b25b      	sxtb	r3, r3
 8002966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296a:	d103      	bne.n	8002974 <xQueueReceive+0x11c>
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800297a:	b25b      	sxtb	r3, r3
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d103      	bne.n	800298a <xQueueReceive+0x132>
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800298a:	f001 febf 	bl	800470c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800298e:	1d3a      	adds	r2, r7, #4
 8002990:	f107 0310 	add.w	r3, r7, #16
 8002994:	4611      	mov	r1, r2
 8002996:	4618      	mov	r0, r3
 8002998:	f000 ff20 	bl	80037dc <xTaskCheckForTimeOut>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d123      	bne.n	80029ea <xQueueReceive+0x192>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029a4:	f000 fa36 	bl	8002e14 <prvIsQueueEmpty>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d017      	beq.n	80029de <xQueueReceive+0x186>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	3324      	adds	r3, #36	; 0x24
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fe4a 	bl	8003650 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029be:	f000 f9d7 	bl	8002d70 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80029c2:	f000 fc87 	bl	80032d4 <xTaskResumeAll>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d189      	bne.n	80028e0 <xQueueReceive+0x88>
                {
                    portYIELD_WITHIN_API();
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <xQueueReceive+0x1b4>)
 80029ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	e780      	b.n	80028e0 <xQueueReceive+0x88>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029e0:	f000 f9c6 	bl	8002d70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029e4:	f000 fc76 	bl	80032d4 <xTaskResumeAll>
 80029e8:	e77a      	b.n	80028e0 <xQueueReceive+0x88>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80029ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ec:	f000 f9c0 	bl	8002d70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029f0:	f000 fc70 	bl	80032d4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029f6:	f000 fa0d 	bl	8002e14 <prvIsQueueEmpty>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f43f af6f 	beq.w	80028e0 <xQueueReceive+0x88>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002a02:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3730      	adds	r7, #48	; 0x30
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	e000ed04 	.word	0xe000ed04

08002a10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08e      	sub	sp, #56	; 0x38
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002a22:	2300      	movs	r3, #0
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d109      	bne.n	8002a40 <xQueueSemaphoreTake+0x30>
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	623b      	str	r3, [r7, #32]
 8002a3e:	e7fe      	b.n	8002a3e <xQueueSemaphoreTake+0x2e>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d009      	beq.n	8002a5c <xQueueSemaphoreTake+0x4c>
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	e7fe      	b.n	8002a5a <xQueueSemaphoreTake+0x4a>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a5c:	f000 ffde 	bl	8003a1c <xTaskGetSchedulerState>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d102      	bne.n	8002a6c <xQueueSemaphoreTake+0x5c>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <xQueueSemaphoreTake+0x60>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <xQueueSemaphoreTake+0x62>
 8002a70:	2300      	movs	r3, #0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <xQueueSemaphoreTake+0x7a>
 8002a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7a:	f383 8811 	msr	BASEPRI, r3
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	61bb      	str	r3, [r7, #24]
 8002a88:	e7fe      	b.n	8002a88 <xQueueSemaphoreTake+0x78>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a8a:	f001 fe11 	bl	80046b0 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d024      	beq.n	8002ae4 <xQueueSemaphoreTake+0xd4>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	1e5a      	subs	r2, r3, #1
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <xQueueSemaphoreTake+0xa4>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002aaa:	f001 f94f 	bl	8003d4c <pvTaskIncrementMutexHeldCount>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00f      	beq.n	8002adc <xQueueSemaphoreTake+0xcc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	3310      	adds	r3, #16
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fe13 	bl	80036ec <xTaskRemoveFromEventList>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <xQueueSemaphoreTake+0xcc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002acc:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <xQueueSemaphoreTake+0x20c>)
 8002ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002adc:	f001 fe16 	bl	800470c <vPortExitCritical>
                return pdPASS;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e096      	b.n	8002c12 <xQueueSemaphoreTake+0x202>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d110      	bne.n	8002b0c <xQueueSemaphoreTake+0xfc>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <xQueueSemaphoreTake+0xf4>
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	617b      	str	r3, [r7, #20]
 8002b02:	e7fe      	b.n	8002b02 <xQueueSemaphoreTake+0xf2>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8002b04:	f001 fe02 	bl	800470c <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	e082      	b.n	8002c12 <xQueueSemaphoreTake+0x202>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <xQueueSemaphoreTake+0x110>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b12:	f107 030c 	add.w	r3, r7, #12
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fe4a 	bl	80037b0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b20:	f001 fdf4 	bl	800470c <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b24:	f000 fbc8 	bl	80032b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b28:	f001 fdc2 	bl	80046b0 <vPortEnterCritical>
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b32:	b25b      	sxtb	r3, r3
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d103      	bne.n	8002b42 <xQueueSemaphoreTake+0x132>
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b48:	b25b      	sxtb	r3, r3
 8002b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4e:	d103      	bne.n	8002b58 <xQueueSemaphoreTake+0x148>
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b58:	f001 fdd8 	bl	800470c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b5c:	463a      	mov	r2, r7
 8002b5e:	f107 030c 	add.w	r3, r7, #12
 8002b62:	4611      	mov	r1, r2
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fe39 	bl	80037dc <xTaskCheckForTimeOut>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d132      	bne.n	8002bd6 <xQueueSemaphoreTake+0x1c6>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b72:	f000 f94f 	bl	8002e14 <prvIsQueueEmpty>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d026      	beq.n	8002bca <xQueueSemaphoreTake+0x1ba>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <xQueueSemaphoreTake+0x188>
                        {
                            taskENTER_CRITICAL();
 8002b84:	f001 fd94 	bl	80046b0 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 ff63 	bl	8003a58 <xTaskPriorityInherit>
 8002b92:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8002b94:	f001 fdba 	bl	800470c <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	3324      	adds	r3, #36	; 0x24
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fd55 	bl	8003650 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002ba6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ba8:	f000 f8e2 	bl	8002d70 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002bac:	f000 fb92 	bl	80032d4 <xTaskResumeAll>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f47f af69 	bne.w	8002a8a <xQueueSemaphoreTake+0x7a>
                {
                    portYIELD_WITHIN_API();
 8002bb8:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <xQueueSemaphoreTake+0x20c>)
 8002bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	f3bf 8f4f 	dsb	sy
 8002bc4:	f3bf 8f6f 	isb	sy
 8002bc8:	e75f      	b.n	8002a8a <xQueueSemaphoreTake+0x7a>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002bca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bcc:	f000 f8d0 	bl	8002d70 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002bd0:	f000 fb80 	bl	80032d4 <xTaskResumeAll>
 8002bd4:	e759      	b.n	8002a8a <xQueueSemaphoreTake+0x7a>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002bd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bd8:	f000 f8ca 	bl	8002d70 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002bdc:	f000 fb7a 	bl	80032d4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002be2:	f000 f917 	bl	8002e14 <prvIsQueueEmpty>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f43f af4e 	beq.w	8002a8a <xQueueSemaphoreTake+0x7a>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00d      	beq.n	8002c10 <xQueueSemaphoreTake+0x200>
                        {
                            taskENTER_CRITICAL();
 8002bf4:	f001 fd5c 	bl	80046b0 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002bf8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bfa:	f000 f811 	bl	8002c20 <prvGetDisinheritPriorityAfterTimeout>
 8002bfe:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 f814 	bl	8003c34 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8002c0c:	f001 fd7e 	bl	800470c <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002c10:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3738      	adds	r7, #56	; 0x38
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	e000ed04 	.word	0xe000ed04

08002c20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d006      	beq.n	8002c3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f1c3 0305 	rsb	r3, r3, #5
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e001      	b.n	8002c42 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002c42:	68fb      	ldr	r3, [r7, #12]
    }
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c64:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10d      	bne.n	8002c8a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d14d      	bne.n	8002d12 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 ff62 	bl	8003b44 <xTaskPriorityDisinherit>
 8002c80:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	e043      	b.n	8002d12 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d119      	bne.n	8002cc4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6858      	ldr	r0, [r3, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68b9      	ldr	r1, [r7, #8]
 8002c9c:	f002 f83e 	bl	8004d1c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	441a      	add	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d32b      	bcc.n	8002d12 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	e026      	b.n	8002d12 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68d8      	ldr	r0, [r3, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	461a      	mov	r2, r3
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	f002 f824 	bl	8004d1c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	425b      	negs	r3, r3
 8002cde:	441a      	add	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d207      	bcs.n	8002d00 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	425b      	negs	r3, r3
 8002cfa:	441a      	add	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d105      	bne.n	8002d12 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002d1a:	697b      	ldr	r3, [r7, #20]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d018      	beq.n	8002d68 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	441a      	add	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d303      	bcc.n	8002d58 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68d9      	ldr	r1, [r3, #12]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	461a      	mov	r2, r3
 8002d62:	6838      	ldr	r0, [r7, #0]
 8002d64:	f001 ffda 	bl	8004d1c <memcpy>
    }
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d78:	f001 fc9a 	bl	80046b0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d82:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d84:	e011      	b.n	8002daa <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d012      	beq.n	8002db4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3324      	adds	r3, #36	; 0x24
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fcaa 	bl	80036ec <xTaskRemoveFromEventList>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d9e:	f000 fd81 	bl	80038a4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	dce9      	bgt.n	8002d86 <prvUnlockQueue+0x16>
 8002db2:	e000      	b.n	8002db6 <prvUnlockQueue+0x46>
                        break;
 8002db4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	22ff      	movs	r2, #255	; 0xff
 8002dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002dbe:	f001 fca5 	bl	800470c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002dc2:	f001 fc75 	bl	80046b0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dcc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dce:	e011      	b.n	8002df4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d012      	beq.n	8002dfe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3310      	adds	r3, #16
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fc85 	bl	80036ec <xTaskRemoveFromEventList>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002de8:	f000 fd5c 	bl	80038a4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002dec:	7bbb      	ldrb	r3, [r7, #14]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	dce9      	bgt.n	8002dd0 <prvUnlockQueue+0x60>
 8002dfc:	e000      	b.n	8002e00 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002dfe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	22ff      	movs	r2, #255	; 0xff
 8002e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002e08:	f001 fc80 	bl	800470c <vPortExitCritical>
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e1c:	f001 fc48 	bl	80046b0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	e001      	b.n	8002e32 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e32:	f001 fc6b 	bl	800470c <vPortExitCritical>

    return xReturn;
 8002e36:	68fb      	ldr	r3, [r7, #12]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e48:	f001 fc32 	bl	80046b0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d102      	bne.n	8002e5e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e001      	b.n	8002e62 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e62:	f001 fc53 	bl	800470c <vPortExitCritical>

    return xReturn;
 8002e66:	68fb      	ldr	r3, [r7, #12]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	e014      	b.n	8002eaa <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e80:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <vQueueAddToRegistry+0x4c>)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10b      	bne.n	8002ea4 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e8c:	490b      	ldr	r1, [pc, #44]	; (8002ebc <vQueueAddToRegistry+0x4c>)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e96:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <vQueueAddToRegistry+0x4c>)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002ea2:	e005      	b.n	8002eb0 <vQueueAddToRegistry+0x40>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b07      	cmp	r3, #7
 8002eae:	d9e7      	bls.n	8002e80 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	20012e54 	.word	0x20012e54

08002ec0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002ed0:	f001 fbee 	bl	80046b0 <vPortEnterCritical>
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eda:	b25b      	sxtb	r3, r3
 8002edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee0:	d103      	bne.n	8002eea <vQueueWaitForMessageRestricted+0x2a>
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ef0:	b25b      	sxtb	r3, r3
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d103      	bne.n	8002f00 <vQueueWaitForMessageRestricted+0x40>
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f00:	f001 fc04 	bl	800470c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d106      	bne.n	8002f1a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	3324      	adds	r3, #36	; 0x24
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68b9      	ldr	r1, [r7, #8]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fbbf 	bl	8003698 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f1a:	6978      	ldr	r0, [r7, #20]
 8002f1c:	f7ff ff28 	bl	8002d70 <prvUnlockQueue>
    }
 8002f20:	bf00      	nop
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08c      	sub	sp, #48	; 0x30
 8002f2c:	af04      	add	r7, sp, #16
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f38:	88fb      	ldrh	r3, [r7, #6]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 fcd1 	bl	80048e4 <pvPortMalloc>
 8002f42:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00e      	beq.n	8002f68 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f4a:	2058      	movs	r0, #88	; 0x58
 8002f4c:	f001 fcca 	bl	80048e4 <pvPortMalloc>
 8002f50:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f5e:	e005      	b.n	8002f6c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002f60:	6978      	ldr	r0, [r7, #20]
 8002f62:	f001 fd9b 	bl	8004a9c <vPortFree>
 8002f66:	e001      	b.n	8002f6c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d013      	beq.n	8002f9a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f72:	88fa      	ldrh	r2, [r7, #6]
 8002f74:	2300      	movs	r3, #0
 8002f76:	9303      	str	r3, [sp, #12]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	9302      	str	r3, [sp, #8]
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68b9      	ldr	r1, [r7, #8]
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f80e 	bl	8002faa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f8e:	69f8      	ldr	r0, [r7, #28]
 8002f90:	f000 f8a0 	bl	80030d4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f94:	2301      	movs	r3, #1
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	e002      	b.n	8002fa0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f9e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002fa0:	69bb      	ldr	r3, [r7, #24]
    }
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b088      	sub	sp, #32
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	21a5      	movs	r1, #165	; 0xa5
 8002fc4:	f001 feb5 	bl	8004d32 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f023 0307 	bic.w	r3, r3, #7
 8002fe0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d009      	beq.n	8003000 <prvInitialiseNewTask+0x56>
 8002fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff0:	f383 8811 	msr	BASEPRI, r3
 8002ff4:	f3bf 8f6f 	isb	sy
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e7fe      	b.n	8002ffe <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d01f      	beq.n	8003046 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	e012      	b.n	8003032 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	4413      	add	r3, r2
 8003012:	7819      	ldrb	r1, [r3, #0]
 8003014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	4413      	add	r3, r2
 800301a:	3334      	adds	r3, #52	; 0x34
 800301c:	460a      	mov	r2, r1
 800301e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4413      	add	r3, r2
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d006      	beq.n	800303a <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	3301      	adds	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	2b09      	cmp	r3, #9
 8003036:	d9e9      	bls.n	800300c <prvInitialiseNewTask+0x62>
 8003038:	e000      	b.n	800303c <prvInitialiseNewTask+0x92>
            {
                break;
 800303a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003044:	e003      	b.n	800304e <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	2b04      	cmp	r3, #4
 8003052:	d901      	bls.n	8003058 <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003054:	2304      	movs	r3, #4
 8003056:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800305c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003062:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	2200      	movs	r2, #0
 8003068:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800306a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306c:	3304      	adds	r3, #4
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff f8a3 	bl	80021ba <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003076:	3318      	adds	r3, #24
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff f89e 	bl	80021ba <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003082:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003086:	f1c3 0205 	rsb	r2, r3, #5
 800308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003092:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	3350      	adds	r3, #80	; 0x50
 8003098:	2204      	movs	r2, #4
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f001 fe48 	bl	8004d32 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80030a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a4:	3354      	adds	r3, #84	; 0x54
 80030a6:	2201      	movs	r2, #1
 80030a8:	2100      	movs	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f001 fe41 	bl	8004d32 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	68f9      	ldr	r1, [r7, #12]
 80030b4:	69b8      	ldr	r0, [r7, #24]
 80030b6:	f001 f9d1 	bl	800445c <pxPortInitialiseStack>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030be:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80030c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ca:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030cc:	bf00      	nop
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80030dc:	f001 fae8 	bl	80046b0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80030e0:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <prvAddNewTaskToReadyList+0xc0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3301      	adds	r3, #1
 80030e6:	4a2b      	ldr	r2, [pc, #172]	; (8003194 <prvAddNewTaskToReadyList+0xc0>)
 80030e8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80030ea:	4b2b      	ldr	r3, [pc, #172]	; (8003198 <prvAddNewTaskToReadyList+0xc4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80030f2:	4a29      	ldr	r2, [pc, #164]	; (8003198 <prvAddNewTaskToReadyList+0xc4>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030f8:	4b26      	ldr	r3, [pc, #152]	; (8003194 <prvAddNewTaskToReadyList+0xc0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d110      	bne.n	8003122 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003100:	f000 fbf4 	bl	80038ec <prvInitialiseTaskLists>
 8003104:	e00d      	b.n	8003122 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003106:	4b25      	ldr	r3, [pc, #148]	; (800319c <prvAddNewTaskToReadyList+0xc8>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800310e:	4b22      	ldr	r3, [pc, #136]	; (8003198 <prvAddNewTaskToReadyList+0xc4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	429a      	cmp	r2, r3
 800311a:	d802      	bhi.n	8003122 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800311c:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <prvAddNewTaskToReadyList+0xc4>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003122:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <prvAddNewTaskToReadyList+0xcc>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3301      	adds	r3, #1
 8003128:	4a1d      	ldr	r2, [pc, #116]	; (80031a0 <prvAddNewTaskToReadyList+0xcc>)
 800312a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800312c:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <prvAddNewTaskToReadyList+0xcc>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	2201      	movs	r2, #1
 800313a:	409a      	lsls	r2, r3
 800313c:	4b19      	ldr	r3, [pc, #100]	; (80031a4 <prvAddNewTaskToReadyList+0xd0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4313      	orrs	r3, r2
 8003142:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <prvAddNewTaskToReadyList+0xd0>)
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <prvAddNewTaskToReadyList+0xd4>)
 8003154:	441a      	add	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	4619      	mov	r1, r3
 800315c:	4610      	mov	r0, r2
 800315e:	f7ff f839 	bl	80021d4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003162:	f001 fad3 	bl	800470c <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003166:	4b0d      	ldr	r3, [pc, #52]	; (800319c <prvAddNewTaskToReadyList+0xc8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00e      	beq.n	800318c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800316e:	4b0a      	ldr	r3, [pc, #40]	; (8003198 <prvAddNewTaskToReadyList+0xc4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	429a      	cmp	r2, r3
 800317a:	d207      	bcs.n	800318c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800317c:	4b0b      	ldr	r3, [pc, #44]	; (80031ac <prvAddNewTaskToReadyList+0xd8>)
 800317e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800318c:	bf00      	nop
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	20000174 	.word	0x20000174
 8003198:	2000009c 	.word	0x2000009c
 800319c:	20000180 	.word	0x20000180
 80031a0:	20000190 	.word	0x20000190
 80031a4:	2000017c 	.word	0x2000017c
 80031a8:	200000a0 	.word	0x200000a0
 80031ac:	e000ed04 	.word	0xe000ed04

080031b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d016      	beq.n	80031f0 <vTaskDelay+0x40>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <vTaskDelay+0x60>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d009      	beq.n	80031de <vTaskDelay+0x2e>
 80031ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	e7fe      	b.n	80031dc <vTaskDelay+0x2c>
            vTaskSuspendAll();
 80031de:	f000 f86b 	bl	80032b8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80031e2:	2100      	movs	r1, #0
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fdc5 	bl	8003d74 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80031ea:	f000 f873 	bl	80032d4 <xTaskResumeAll>
 80031ee:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d107      	bne.n	8003206 <vTaskDelay+0x56>
        {
            portYIELD_WITHIN_API();
 80031f6:	4b07      	ldr	r3, [pc, #28]	; (8003214 <vTaskDelay+0x64>)
 80031f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fc:	601a      	str	r2, [r3, #0]
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	2000019c 	.word	0x2000019c
 8003214:	e000ed04 	.word	0xe000ed04

08003218 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800321e:	4b1f      	ldr	r3, [pc, #124]	; (800329c <vTaskStartScheduler+0x84>)
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	2300      	movs	r3, #0
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	2300      	movs	r3, #0
 8003228:	2282      	movs	r2, #130	; 0x82
 800322a:	491d      	ldr	r1, [pc, #116]	; (80032a0 <vTaskStartScheduler+0x88>)
 800322c:	481d      	ldr	r0, [pc, #116]	; (80032a4 <vTaskStartScheduler+0x8c>)
 800322e:	f7ff fe7b 	bl	8002f28 <xTaskCreate>
 8003232:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800323a:	f000 fe01 	bl	8003e40 <xTimerCreateTimerTask>
 800323e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d115      	bne.n	8003272 <vTaskStartScheduler+0x5a>
 8003246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <vTaskStartScheduler+0x90>)
 800325a:	f04f 32ff 	mov.w	r2, #4294967295
 800325e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <vTaskStartScheduler+0x94>)
 8003262:	2201      	movs	r2, #1
 8003264:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <vTaskStartScheduler+0x98>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800326c:	f001 f982 	bl	8004574 <xPortStartScheduler>
 8003270:	e00d      	b.n	800328e <vTaskStartScheduler+0x76>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d109      	bne.n	800328e <vTaskStartScheduler+0x76>
 800327a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	e7fe      	b.n	800328c <vTaskStartScheduler+0x74>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800328e:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <vTaskStartScheduler+0x9c>)
 8003290:	681b      	ldr	r3, [r3, #0]
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000198 	.word	0x20000198
 80032a0:	08005c74 	.word	0x08005c74
 80032a4:	080038bd 	.word	0x080038bd
 80032a8:	20000194 	.word	0x20000194
 80032ac:	20000180 	.word	0x20000180
 80032b0:	20000178 	.word	0x20000178
 80032b4:	2000000c 	.word	0x2000000c

080032b8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <vTaskSuspendAll+0x18>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	4a03      	ldr	r2, [pc, #12]	; (80032d0 <vTaskSuspendAll+0x18>)
 80032c4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	2000019c 	.word	0x2000019c

080032d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80032da:	2300      	movs	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80032e2:	4b41      	ldr	r3, [pc, #260]	; (80033e8 <xTaskResumeAll+0x114>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <xTaskResumeAll+0x2a>
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	e7fe      	b.n	80032fc <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80032fe:	f001 f9d7 	bl	80046b0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003302:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <xTaskResumeAll+0x114>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	3b01      	subs	r3, #1
 8003308:	4a37      	ldr	r2, [pc, #220]	; (80033e8 <xTaskResumeAll+0x114>)
 800330a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800330c:	4b36      	ldr	r3, [pc, #216]	; (80033e8 <xTaskResumeAll+0x114>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d161      	bne.n	80033d8 <xTaskResumeAll+0x104>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003314:	4b35      	ldr	r3, [pc, #212]	; (80033ec <xTaskResumeAll+0x118>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d05d      	beq.n	80033d8 <xTaskResumeAll+0x104>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800331c:	e02e      	b.n	800337c <xTaskResumeAll+0xa8>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800331e:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <xTaskResumeAll+0x11c>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	3318      	adds	r3, #24
 800332a:	4618      	mov	r0, r3
 800332c:	f7fe ffaf 	bl	800228e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	3304      	adds	r3, #4
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe ffaa 	bl	800228e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	2201      	movs	r2, #1
 8003340:	409a      	lsls	r2, r3
 8003342:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <xTaskResumeAll+0x120>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4313      	orrs	r3, r2
 8003348:	4a2a      	ldr	r2, [pc, #168]	; (80033f4 <xTaskResumeAll+0x120>)
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4a27      	ldr	r2, [pc, #156]	; (80033f8 <xTaskResumeAll+0x124>)
 800335a:	441a      	add	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	3304      	adds	r3, #4
 8003360:	4619      	mov	r1, r3
 8003362:	4610      	mov	r0, r2
 8003364:	f7fe ff36 	bl	80021d4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336c:	4b23      	ldr	r3, [pc, #140]	; (80033fc <xTaskResumeAll+0x128>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	429a      	cmp	r2, r3
 8003374:	d302      	bcc.n	800337c <xTaskResumeAll+0xa8>
                    {
                        xYieldPending = pdTRUE;
 8003376:	4b22      	ldr	r3, [pc, #136]	; (8003400 <xTaskResumeAll+0x12c>)
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800337c:	4b1c      	ldr	r3, [pc, #112]	; (80033f0 <xTaskResumeAll+0x11c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1cc      	bne.n	800331e <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <xTaskResumeAll+0xba>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800338a:	f000 fb2b 	bl	80039e4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800338e:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <xTaskResumeAll+0x130>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d010      	beq.n	80033bc <xTaskResumeAll+0xe8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800339a:	f000 f847 	bl	800342c <xTaskIncrementTick>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <xTaskResumeAll+0xd6>
                            {
                                xYieldPending = pdTRUE;
 80033a4:	4b16      	ldr	r3, [pc, #88]	; (8003400 <xTaskResumeAll+0x12c>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f1      	bne.n	800339a <xTaskResumeAll+0xc6>

                        xPendedTicks = 0;
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <xTaskResumeAll+0x130>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <xTaskResumeAll+0x12c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d009      	beq.n	80033d8 <xTaskResumeAll+0x104>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80033c4:	2301      	movs	r3, #1
 80033c6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <xTaskResumeAll+0x134>)
 80033ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80033d8:	f001 f998 	bl	800470c <vPortExitCritical>

    return xAlreadyYielded;
 80033dc:	68bb      	ldr	r3, [r7, #8]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	2000019c 	.word	0x2000019c
 80033ec:	20000174 	.word	0x20000174
 80033f0:	20000134 	.word	0x20000134
 80033f4:	2000017c 	.word	0x2000017c
 80033f8:	200000a0 	.word	0x200000a0
 80033fc:	2000009c 	.word	0x2000009c
 8003400:	20000188 	.word	0x20000188
 8003404:	20000184 	.word	0x20000184
 8003408:	e000ed04 	.word	0xe000ed04

0800340c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003412:	4b05      	ldr	r3, [pc, #20]	; (8003428 <xTaskGetTickCount+0x1c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003418:	687b      	ldr	r3, [r7, #4]
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000178 	.word	0x20000178

0800342c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003436:	4b4e      	ldr	r3, [pc, #312]	; (8003570 <xTaskIncrementTick+0x144>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f040 808d 	bne.w	800355a <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003440:	4b4c      	ldr	r3, [pc, #304]	; (8003574 <xTaskIncrementTick+0x148>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3301      	adds	r3, #1
 8003446:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003448:	4a4a      	ldr	r2, [pc, #296]	; (8003574 <xTaskIncrementTick+0x148>)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d11f      	bne.n	8003494 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8003454:	4b48      	ldr	r3, [pc, #288]	; (8003578 <xTaskIncrementTick+0x14c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <xTaskIncrementTick+0x46>
 800345e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	e7fe      	b.n	8003470 <xTaskIncrementTick+0x44>
 8003472:	4b41      	ldr	r3, [pc, #260]	; (8003578 <xTaskIncrementTick+0x14c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	4b40      	ldr	r3, [pc, #256]	; (800357c <xTaskIncrementTick+0x150>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a3e      	ldr	r2, [pc, #248]	; (8003578 <xTaskIncrementTick+0x14c>)
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4a3e      	ldr	r2, [pc, #248]	; (800357c <xTaskIncrementTick+0x150>)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	4b3e      	ldr	r3, [pc, #248]	; (8003580 <xTaskIncrementTick+0x154>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	4a3c      	ldr	r2, [pc, #240]	; (8003580 <xTaskIncrementTick+0x154>)
 800348e:	6013      	str	r3, [r2, #0]
 8003490:	f000 faa8 	bl	80039e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003494:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <xTaskIncrementTick+0x158>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	429a      	cmp	r2, r3
 800349c:	d348      	bcc.n	8003530 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800349e:	4b36      	ldr	r3, [pc, #216]	; (8003578 <xTaskIncrementTick+0x14c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a8:	4b36      	ldr	r3, [pc, #216]	; (8003584 <xTaskIncrementTick+0x158>)
 80034aa:	f04f 32ff 	mov.w	r2, #4294967295
 80034ae:	601a      	str	r2, [r3, #0]
                    break;
 80034b0:	e03e      	b.n	8003530 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034b2:	4b31      	ldr	r3, [pc, #196]	; (8003578 <xTaskIncrementTick+0x14c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d203      	bcs.n	80034d2 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80034ca:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <xTaskIncrementTick+0x158>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034d0:	e02e      	b.n	8003530 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fed9 	bl	800228e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d004      	beq.n	80034ee <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	3318      	adds	r3, #24
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fe fed0 	bl	800228e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	2201      	movs	r2, #1
 80034f4:	409a      	lsls	r2, r3
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <xTaskIncrementTick+0x15c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <xTaskIncrementTick+0x15c>)
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4a1f      	ldr	r2, [pc, #124]	; (800358c <xTaskIncrementTick+0x160>)
 800350e:	441a      	add	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	3304      	adds	r3, #4
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f7fe fe5c 	bl	80021d4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <xTaskIncrementTick+0x164>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	429a      	cmp	r2, r3
 8003528:	d3b9      	bcc.n	800349e <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 800352a:	2301      	movs	r3, #1
 800352c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800352e:	e7b6      	b.n	800349e <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003530:	4b17      	ldr	r3, [pc, #92]	; (8003590 <xTaskIncrementTick+0x164>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003536:	4915      	ldr	r1, [pc, #84]	; (800358c <xTaskIncrementTick+0x160>)
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d901      	bls.n	800354c <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8003548:	2301      	movs	r3, #1
 800354a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <xTaskIncrementTick+0x168>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8003554:	2301      	movs	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	e004      	b.n	8003564 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800355a:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <xTaskIncrementTick+0x16c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	4a0d      	ldr	r2, [pc, #52]	; (8003598 <xTaskIncrementTick+0x16c>)
 8003562:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003564:	697b      	ldr	r3, [r7, #20]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	2000019c 	.word	0x2000019c
 8003574:	20000178 	.word	0x20000178
 8003578:	2000012c 	.word	0x2000012c
 800357c:	20000130 	.word	0x20000130
 8003580:	2000018c 	.word	0x2000018c
 8003584:	20000194 	.word	0x20000194
 8003588:	2000017c 	.word	0x2000017c
 800358c:	200000a0 	.word	0x200000a0
 8003590:	2000009c 	.word	0x2000009c
 8003594:	20000188 	.word	0x20000188
 8003598:	20000184 	.word	0x20000184

0800359c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035a2:	4b26      	ldr	r3, [pc, #152]	; (800363c <vTaskSwitchContext+0xa0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80035aa:	4b25      	ldr	r3, [pc, #148]	; (8003640 <vTaskSwitchContext+0xa4>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80035b0:	e03e      	b.n	8003630 <vTaskSwitchContext+0x94>
        xYieldPending = pdFALSE;
 80035b2:	4b23      	ldr	r3, [pc, #140]	; (8003640 <vTaskSwitchContext+0xa4>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035b8:	4b22      	ldr	r3, [pc, #136]	; (8003644 <vTaskSwitchContext+0xa8>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	f1c3 031f 	rsb	r3, r3, #31
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	491e      	ldr	r1, [pc, #120]	; (8003648 <vTaskSwitchContext+0xac>)
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d109      	bne.n	80035f6 <vTaskSwitchContext+0x5a>
        __asm volatile
 80035e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e6:	f383 8811 	msr	BASEPRI, r3
 80035ea:	f3bf 8f6f 	isb	sy
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	607b      	str	r3, [r7, #4]
 80035f4:	e7fe      	b.n	80035f4 <vTaskSwitchContext+0x58>
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4a11      	ldr	r2, [pc, #68]	; (8003648 <vTaskSwitchContext+0xac>)
 8003602:	4413      	add	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	605a      	str	r2, [r3, #4]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	3308      	adds	r3, #8
 8003618:	429a      	cmp	r2, r3
 800361a:	d104      	bne.n	8003626 <vTaskSwitchContext+0x8a>
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	605a      	str	r2, [r3, #4]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	4a07      	ldr	r2, [pc, #28]	; (800364c <vTaskSwitchContext+0xb0>)
 800362e:	6013      	str	r3, [r2, #0]
}
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	2000019c 	.word	0x2000019c
 8003640:	20000188 	.word	0x20000188
 8003644:	2000017c 	.word	0x2000017c
 8003648:	200000a0 	.word	0x200000a0
 800364c:	2000009c 	.word	0x2000009c

08003650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d109      	bne.n	8003674 <vTaskPlaceOnEventList+0x24>
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	e7fe      	b.n	8003672 <vTaskPlaceOnEventList+0x22>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003674:	4b07      	ldr	r3, [pc, #28]	; (8003694 <vTaskPlaceOnEventList+0x44>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	3318      	adds	r3, #24
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7fe fdcd 	bl	800221c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003682:	2101      	movs	r1, #1
 8003684:	6838      	ldr	r0, [r7, #0]
 8003686:	f000 fb75 	bl	8003d74 <prvAddCurrentTaskToDelayedList>
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	2000009c 	.word	0x2000009c

08003698 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <vTaskPlaceOnEventListRestricted+0x26>
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	e7fe      	b.n	80036bc <vTaskPlaceOnEventListRestricted+0x24>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <vTaskPlaceOnEventListRestricted+0x50>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3318      	adds	r3, #24
 80036c4:	4619      	mov	r1, r3
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f7fe fd84 	bl	80021d4 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <vTaskPlaceOnEventListRestricted+0x40>
        {
            xTicksToWait = portMAX_DELAY;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	68b8      	ldr	r0, [r7, #8]
 80036dc:	f000 fb4a 	bl	8003d74 <prvAddCurrentTaskToDelayedList>
    }
 80036e0:	bf00      	nop
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	2000009c 	.word	0x2000009c

080036ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <xTaskRemoveFromEventList+0x2a>
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	e7fe      	b.n	8003714 <xTaskRemoveFromEventList+0x28>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3318      	adds	r3, #24
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fdb7 	bl	800228e <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <xTaskRemoveFromEventList+0xac>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d11c      	bne.n	8003762 <xTaskRemoveFromEventList+0x76>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	3304      	adds	r3, #4
 800372c:	4618      	mov	r0, r3
 800372e:	f7fe fdae 	bl	800228e <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003736:	2201      	movs	r2, #1
 8003738:	409a      	lsls	r2, r3
 800373a:	4b18      	ldr	r3, [pc, #96]	; (800379c <xTaskRemoveFromEventList+0xb0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4313      	orrs	r3, r2
 8003740:	4a16      	ldr	r2, [pc, #88]	; (800379c <xTaskRemoveFromEventList+0xb0>)
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003748:	4613      	mov	r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4a13      	ldr	r2, [pc, #76]	; (80037a0 <xTaskRemoveFromEventList+0xb4>)
 8003752:	441a      	add	r2, r3
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	3304      	adds	r3, #4
 8003758:	4619      	mov	r1, r3
 800375a:	4610      	mov	r0, r2
 800375c:	f7fe fd3a 	bl	80021d4 <vListInsertEnd>
 8003760:	e005      	b.n	800376e <xTaskRemoveFromEventList+0x82>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3318      	adds	r3, #24
 8003766:	4619      	mov	r1, r3
 8003768:	480e      	ldr	r0, [pc, #56]	; (80037a4 <xTaskRemoveFromEventList+0xb8>)
 800376a:	f7fe fd33 	bl	80021d4 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <xTaskRemoveFromEventList+0xbc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	429a      	cmp	r2, r3
 800377a:	d905      	bls.n	8003788 <xTaskRemoveFromEventList+0x9c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800377c:	2301      	movs	r3, #1
 800377e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <xTaskRemoveFromEventList+0xc0>)
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e001      	b.n	800378c <xTaskRemoveFromEventList+0xa0>
    }
    else
    {
        xReturn = pdFALSE;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800378c:	697b      	ldr	r3, [r7, #20]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	2000019c 	.word	0x2000019c
 800379c:	2000017c 	.word	0x2000017c
 80037a0:	200000a0 	.word	0x200000a0
 80037a4:	20000134 	.word	0x20000134
 80037a8:	2000009c 	.word	0x2000009c
 80037ac:	20000188 	.word	0x20000188

080037b0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <vTaskInternalSetTimeOutState+0x24>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <vTaskInternalSetTimeOutState+0x28>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	605a      	str	r2, [r3, #4]
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	2000018c 	.word	0x2000018c
 80037d8:	20000178 	.word	0x20000178

080037dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d109      	bne.n	8003800 <xTaskCheckForTimeOut+0x24>
 80037ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	e7fe      	b.n	80037fe <xTaskCheckForTimeOut+0x22>
    configASSERT( pxTicksToWait );
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <xTaskCheckForTimeOut+0x3e>
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	e7fe      	b.n	8003818 <xTaskCheckForTimeOut+0x3c>

    taskENTER_CRITICAL();
 800381a:	f000 ff49 	bl	80046b0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800381e:	4b1f      	ldr	r3, [pc, #124]	; (800389c <xTaskCheckForTimeOut+0xc0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d102      	bne.n	800383e <xTaskCheckForTimeOut+0x62>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	e026      	b.n	800388c <xTaskCheckForTimeOut+0xb0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <xTaskCheckForTimeOut+0xc4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d00a      	beq.n	8003860 <xTaskCheckForTimeOut+0x84>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	429a      	cmp	r2, r3
 8003852:	d305      	bcc.n	8003860 <xTaskCheckForTimeOut+0x84>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003854:	2301      	movs	r3, #1
 8003856:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e015      	b.n	800388c <xTaskCheckForTimeOut+0xb0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	429a      	cmp	r2, r3
 8003868:	d20b      	bcs.n	8003882 <xTaskCheckForTimeOut+0xa6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	1ad2      	subs	r2, r2, r3
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff ff9a 	bl	80037b0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	e004      	b.n	800388c <xTaskCheckForTimeOut+0xb0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003888:	2301      	movs	r3, #1
 800388a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800388c:	f000 ff3e 	bl	800470c <vPortExitCritical>

    return xReturn;
 8003890:	69fb      	ldr	r3, [r7, #28]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000178 	.word	0x20000178
 80038a0:	2000018c 	.word	0x2000018c

080038a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <vTaskMissedYield+0x14>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	20000188 	.word	0x20000188

080038bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038c4:	f000 f852 	bl	800396c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <prvIdleTask+0x28>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d9f9      	bls.n	80038c4 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80038d0:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <prvIdleTask+0x2c>)
 80038d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80038e0:	e7f0      	b.n	80038c4 <prvIdleTask+0x8>
 80038e2:	bf00      	nop
 80038e4:	200000a0 	.word	0x200000a0
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	e00c      	b.n	8003912 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4a12      	ldr	r2, [pc, #72]	; (800394c <prvInitialiseTaskLists+0x60>)
 8003904:	4413      	add	r3, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe fc37 	bl	800217a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3301      	adds	r3, #1
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b04      	cmp	r3, #4
 8003916:	d9ef      	bls.n	80038f8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003918:	480d      	ldr	r0, [pc, #52]	; (8003950 <prvInitialiseTaskLists+0x64>)
 800391a:	f7fe fc2e 	bl	800217a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800391e:	480d      	ldr	r0, [pc, #52]	; (8003954 <prvInitialiseTaskLists+0x68>)
 8003920:	f7fe fc2b 	bl	800217a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003924:	480c      	ldr	r0, [pc, #48]	; (8003958 <prvInitialiseTaskLists+0x6c>)
 8003926:	f7fe fc28 	bl	800217a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800392a:	480c      	ldr	r0, [pc, #48]	; (800395c <prvInitialiseTaskLists+0x70>)
 800392c:	f7fe fc25 	bl	800217a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003930:	480b      	ldr	r0, [pc, #44]	; (8003960 <prvInitialiseTaskLists+0x74>)
 8003932:	f7fe fc22 	bl	800217a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <prvInitialiseTaskLists+0x78>)
 8003938:	4a05      	ldr	r2, [pc, #20]	; (8003950 <prvInitialiseTaskLists+0x64>)
 800393a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <prvInitialiseTaskLists+0x7c>)
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <prvInitialiseTaskLists+0x68>)
 8003940:	601a      	str	r2, [r3, #0]
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	200000a0 	.word	0x200000a0
 8003950:	20000104 	.word	0x20000104
 8003954:	20000118 	.word	0x20000118
 8003958:	20000134 	.word	0x20000134
 800395c:	20000148 	.word	0x20000148
 8003960:	20000160 	.word	0x20000160
 8003964:	2000012c 	.word	0x2000012c
 8003968:	20000130 	.word	0x20000130

0800396c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003972:	e019      	b.n	80039a8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003974:	f000 fe9c 	bl	80046b0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <prvCheckTasksWaitingTermination+0x4c>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3304      	adds	r3, #4
 8003984:	4618      	mov	r0, r3
 8003986:	f7fe fc82 	bl	800228e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800398a:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <prvCheckTasksWaitingTermination+0x50>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	3b01      	subs	r3, #1
 8003990:	4a0a      	ldr	r2, [pc, #40]	; (80039bc <prvCheckTasksWaitingTermination+0x50>)
 8003992:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <prvCheckTasksWaitingTermination+0x54>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3b01      	subs	r3, #1
 800399a:	4a09      	ldr	r2, [pc, #36]	; (80039c0 <prvCheckTasksWaitingTermination+0x54>)
 800399c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800399e:	f000 feb5 	bl	800470c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f80e 	bl	80039c4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <prvCheckTasksWaitingTermination+0x54>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1e1      	bne.n	8003974 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000148 	.word	0x20000148
 80039bc:	20000174 	.word	0x20000174
 80039c0:	2000015c 	.word	0x2000015c

080039c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 f863 	bl	8004a9c <vPortFree>
                vPortFree( pxTCB );
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f001 f860 	bl	8004a9c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039dc:	bf00      	nop
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039e8:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <prvResetNextTaskUnblockTime+0x30>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d104      	bne.n	80039fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80039f2:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <prvResetNextTaskUnblockTime+0x34>)
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295
 80039f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039fa:	e005      	b.n	8003a08 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <prvResetNextTaskUnblockTime+0x30>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <prvResetNextTaskUnblockTime+0x34>)
 8003a06:	6013      	str	r3, [r2, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	2000012c 	.word	0x2000012c
 8003a18:	20000194 	.word	0x20000194

08003a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <xTaskGetSchedulerState+0x34>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	e008      	b.n	8003a42 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <xTaskGetSchedulerState+0x38>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	e001      	b.n	8003a42 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a42:	687b      	ldr	r3, [r7, #4]
    }
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	20000180 	.word	0x20000180
 8003a54:	2000019c 	.word	0x2000019c

08003a58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d05e      	beq.n	8003b2c <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a72:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <xTaskPriorityInherit+0xe0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d24e      	bcs.n	8003b1a <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	db06      	blt.n	8003a92 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a84:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <xTaskPriorityInherit+0xe0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	f1c3 0205 	rsb	r2, r3, #5
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	6959      	ldr	r1, [r3, #20]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4a26      	ldr	r2, [pc, #152]	; (8003b3c <xTaskPriorityInherit+0xe4>)
 8003aa4:	4413      	add	r3, r2
 8003aa6:	4299      	cmp	r1, r3
 8003aa8:	d12f      	bne.n	8003b0a <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	3304      	adds	r3, #4
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe fbed 	bl	800228e <uxListRemove>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	2201      	movs	r2, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43da      	mvns	r2, r3
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <xTaskPriorityInherit+0xe8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4013      	ands	r3, r2
 8003acc:	4a1c      	ldr	r2, [pc, #112]	; (8003b40 <xTaskPriorityInherit+0xe8>)
 8003ace:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ad0:	4b19      	ldr	r3, [pc, #100]	; (8003b38 <xTaskPriorityInherit+0xe0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	2201      	movs	r2, #1
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <xTaskPriorityInherit+0xe8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	4a15      	ldr	r2, [pc, #84]	; (8003b40 <xTaskPriorityInherit+0xe8>)
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4a10      	ldr	r2, [pc, #64]	; (8003b3c <xTaskPriorityInherit+0xe4>)
 8003afa:	441a      	add	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	3304      	adds	r3, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4610      	mov	r0, r2
 8003b04:	f7fe fb66 	bl	80021d4 <vListInsertEnd>
 8003b08:	e004      	b.n	8003b14 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <xTaskPriorityInherit+0xe0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8003b14:	2301      	movs	r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e008      	b.n	8003b2c <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b1e:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <xTaskPriorityInherit+0xe0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d201      	bcs.n	8003b2c <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
    }
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	2000009c 	.word	0x2000009c
 8003b3c:	200000a0 	.word	0x200000a0
 8003b40:	2000017c 	.word	0x2000017c

08003b44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d061      	beq.n	8003c1e <xTaskPriorityDisinherit+0xda>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003b5a:	4b33      	ldr	r3, [pc, #204]	; (8003c28 <xTaskPriorityDisinherit+0xe4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d009      	beq.n	8003b78 <xTaskPriorityDisinherit+0x34>
 8003b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	e7fe      	b.n	8003b76 <xTaskPriorityDisinherit+0x32>
            configASSERT( pxTCB->uxMutexesHeld );
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d109      	bne.n	8003b94 <xTaskPriorityDisinherit+0x50>
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	e7fe      	b.n	8003b92 <xTaskPriorityDisinherit+0x4e>
            ( pxTCB->uxMutexesHeld )--;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b98:	1e5a      	subs	r2, r3, #1
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d039      	beq.n	8003c1e <xTaskPriorityDisinherit+0xda>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d135      	bne.n	8003c1e <xTaskPriorityDisinherit+0xda>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fe fb69 	bl	800228e <uxListRemove>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10a      	bne.n	8003bd8 <xTaskPriorityDisinherit+0x94>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43da      	mvns	r2, r3
 8003bce:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <xTaskPriorityDisinherit+0xe8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <xTaskPriorityDisinherit+0xe8>)
 8003bd6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	f1c3 0205 	rsb	r2, r3, #5
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	409a      	lsls	r2, r3
 8003bf4:	4b0d      	ldr	r3, [pc, #52]	; (8003c2c <xTaskPriorityDisinherit+0xe8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	4a0c      	ldr	r2, [pc, #48]	; (8003c2c <xTaskPriorityDisinherit+0xe8>)
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c02:	4613      	mov	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4a09      	ldr	r2, [pc, #36]	; (8003c30 <xTaskPriorityDisinherit+0xec>)
 8003c0c:	441a      	add	r2, r3
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f7fe fadd 	bl	80021d4 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c1e:	697b      	ldr	r3, [r7, #20]
    }
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	2000009c 	.word	0x2000009c
 8003c2c:	2000017c 	.word	0x2000017c
 8003c30:	200000a0 	.word	0x200000a0

08003c34 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b088      	sub	sp, #32
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003c42:	2301      	movs	r3, #1
 8003c44:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d075      	beq.n	8003d38 <vTaskPriorityDisinheritAfterTimeout+0x104>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	e7fe      	b.n	8003c66 <vTaskPriorityDisinheritAfterTimeout+0x32>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d902      	bls.n	8003c78 <vTaskPriorityDisinheritAfterTimeout+0x44>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	e002      	b.n	8003c7e <vTaskPriorityDisinheritAfterTimeout+0x4a>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7c:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d057      	beq.n	8003d38 <vTaskPriorityDisinheritAfterTimeout+0x104>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d152      	bne.n	8003d38 <vTaskPriorityDisinheritAfterTimeout+0x104>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8003c92:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d109      	bne.n	8003cb0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	e7fe      	b.n	8003cae <vTaskPriorityDisinheritAfterTimeout+0x7a>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	db04      	blt.n	8003cce <vTaskPriorityDisinheritAfterTimeout+0x9a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f1c3 0205 	rsb	r2, r3, #5
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	6959      	ldr	r1, [r3, #20]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4a19      	ldr	r2, [pc, #100]	; (8003d44 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003cde:	4413      	add	r3, r2
 8003ce0:	4299      	cmp	r1, r3
 8003ce2:	d129      	bne.n	8003d38 <vTaskPriorityDisinheritAfterTimeout+0x104>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe fad0 	bl	800228e <uxListRemove>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10a      	bne.n	8003d0a <vTaskPriorityDisinheritAfterTimeout+0xd6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4013      	ands	r3, r2
 8003d06:	4a10      	ldr	r2, [pc, #64]	; (8003d48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003d08:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	2201      	movs	r2, #1
 8003d10:	409a      	lsls	r2, r3
 8003d12:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	4a0b      	ldr	r2, [pc, #44]	; (8003d48 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	4613      	mov	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4a06      	ldr	r2, [pc, #24]	; (8003d44 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8003d2a:	441a      	add	r2, r3
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	4619      	mov	r1, r3
 8003d32:	4610      	mov	r0, r2
 8003d34:	f7fe fa4e 	bl	80021d4 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003d38:	bf00      	nop
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	2000009c 	.word	0x2000009c
 8003d44:	200000a0 	.word	0x200000a0
 8003d48:	2000017c 	.word	0x2000017c

08003d4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <pvTaskIncrementMutexHeldCount+0x24>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8003d58:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <pvTaskIncrementMutexHeldCount+0x24>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d5e:	3201      	adds	r2, #1
 8003d60:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8003d62:	4b03      	ldr	r3, [pc, #12]	; (8003d70 <pvTaskIncrementMutexHeldCount+0x24>)
 8003d64:	681b      	ldr	r3, [r3, #0]
    }
 8003d66:	4618      	mov	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	2000009c 	.word	0x2000009c

08003d74 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d7e:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d84:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fe fa7f 	bl	800228e <uxListRemove>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10b      	bne.n	8003dae <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d96:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43da      	mvns	r2, r3
 8003da4:	4b21      	ldr	r3, [pc, #132]	; (8003e2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4013      	ands	r3, r2
 8003daa:	4a20      	ldr	r2, [pc, #128]	; (8003e2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003dac:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d10a      	bne.n	8003dcc <prvAddCurrentTaskToDelayedList+0x58>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dbc:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	481a      	ldr	r0, [pc, #104]	; (8003e30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003dc6:	f7fe fa05 	bl	80021d4 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003dca:	e026      	b.n	8003e1a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dd4:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d209      	bcs.n	8003df8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003de4:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3304      	adds	r3, #4
 8003dee:	4619      	mov	r1, r3
 8003df0:	4610      	mov	r0, r2
 8003df2:	f7fe fa13 	bl	800221c <vListInsert>
}
 8003df6:	e010      	b.n	8003e1a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	4b0a      	ldr	r3, [pc, #40]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3304      	adds	r3, #4
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f7fe fa09 	bl	800221c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d202      	bcs.n	8003e1a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003e14:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	6013      	str	r3, [r2, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000178 	.word	0x20000178
 8003e28:	2000009c 	.word	0x2000009c
 8003e2c:	2000017c 	.word	0x2000017c
 8003e30:	20000160 	.word	0x20000160
 8003e34:	20000130 	.word	0x20000130
 8003e38:	2000012c 	.word	0x2000012c
 8003e3c:	20000194 	.word	0x20000194

08003e40 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e4a:	f000 fad1 	bl	80043f0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <xTimerCreateTimerTask+0x54>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00b      	beq.n	8003e6e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003e56:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <xTimerCreateTimerTask+0x58>)
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e64:	490d      	ldr	r1, [pc, #52]	; (8003e9c <xTimerCreateTimerTask+0x5c>)
 8003e66:	480e      	ldr	r0, [pc, #56]	; (8003ea0 <xTimerCreateTimerTask+0x60>)
 8003e68:	f7ff f85e 	bl	8002f28 <xTaskCreate>
 8003e6c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d109      	bne.n	8003e88 <xTimerCreateTimerTask+0x48>
 8003e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	e7fe      	b.n	8003e86 <xTimerCreateTimerTask+0x46>
        return xReturn;
 8003e88:	687b      	ldr	r3, [r7, #4]
    }
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	200001d0 	.word	0x200001d0
 8003e98:	200001d4 	.word	0x200001d4
 8003e9c:	08005c7c 	.word	0x08005c7c
 8003ea0:	08003fd5 	.word	0x08003fd5

08003ea4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	; 0x28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <xTimerGenericCommand+0x2c>
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	623b      	str	r3, [r7, #32]
 8003ece:	e7fe      	b.n	8003ece <xTimerGenericCommand+0x2a>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003ed0:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <xTimerGenericCommand+0x94>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d02a      	beq.n	8003f2e <xTimerGenericCommand+0x8a>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	dc18      	bgt.n	8003f1c <xTimerGenericCommand+0x78>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003eea:	f7ff fd97 	bl	8003a1c <xTaskGetSchedulerState>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d109      	bne.n	8003f08 <xTimerGenericCommand+0x64>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ef4:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <xTimerGenericCommand+0x94>)
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	f107 0114 	add.w	r1, r7, #20
 8003efc:	2300      	movs	r3, #0
 8003efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f00:	f7fe fb0a 	bl	8002518 <xQueueGenericSend>
 8003f04:	6278      	str	r0, [r7, #36]	; 0x24
 8003f06:	e012      	b.n	8003f2e <xTimerGenericCommand+0x8a>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <xTimerGenericCommand+0x94>)
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	f107 0114 	add.w	r1, r7, #20
 8003f10:	2300      	movs	r3, #0
 8003f12:	2200      	movs	r2, #0
 8003f14:	f7fe fb00 	bl	8002518 <xQueueGenericSend>
 8003f18:	6278      	str	r0, [r7, #36]	; 0x24
 8003f1a:	e008      	b.n	8003f2e <xTimerGenericCommand+0x8a>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <xTimerGenericCommand+0x94>)
 8003f1e:	6818      	ldr	r0, [r3, #0]
 8003f20:	f107 0114 	add.w	r1, r7, #20
 8003f24:	2300      	movs	r3, #0
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	f7fe fbf0 	bl	800270c <xQueueGenericSendFromISR>
 8003f2c:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003f30:	4618      	mov	r0, r3
 8003f32:	3728      	adds	r7, #40	; 0x28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	200001d0 	.word	0x200001d0

08003f3c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f46:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <prvProcessExpiredTimer+0x94>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe f99a 	bl	800228e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d021      	beq.n	8003fac <prvProcessExpiredTimer+0x70>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	699a      	ldr	r2, [r3, #24]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	18d1      	adds	r1, r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	6978      	ldr	r0, [r7, #20]
 8003f76:	f000 f8d1 	bl	800411c <prvInsertTimerInActiveList>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01e      	beq.n	8003fbe <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f80:	2300      	movs	r3, #0
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	2300      	movs	r3, #0
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	2100      	movs	r1, #0
 8003f8a:	6978      	ldr	r0, [r7, #20]
 8003f8c:	f7ff ff8a 	bl	8003ea4 <xTimerGenericCommand>
 8003f90:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d112      	bne.n	8003fbe <prvProcessExpiredTimer+0x82>
 8003f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	60fb      	str	r3, [r7, #12]
 8003faa:	e7fe      	b.n	8003faa <prvProcessExpiredTimer+0x6e>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	6978      	ldr	r0, [r7, #20]
 8003fc4:	4798      	blx	r3
    }
 8003fc6:	bf00      	nop
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	200001c8 	.word	0x200001c8

08003fd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fdc:	f107 0308 	add.w	r3, r7, #8
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 f857 	bl	8004094 <prvGetNextExpireTime>
 8003fe6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4619      	mov	r1, r3
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f803 	bl	8003ff8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ff2:	f000 f8d5 	bl	80041a0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ff6:	e7f1      	b.n	8003fdc <prvTimerTask+0x8>

08003ff8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004002:	f7ff f959 	bl	80032b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004006:	f107 0308 	add.w	r3, r7, #8
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f866 	bl	80040dc <prvSampleTimeNow>
 8004010:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d130      	bne.n	800407a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <prvProcessTimerOrBlockTask+0x3c>
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	429a      	cmp	r2, r3
 8004024:	d806      	bhi.n	8004034 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004026:	f7ff f955 	bl	80032d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800402a:	68f9      	ldr	r1, [r7, #12]
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff ff85 	bl	8003f3c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004032:	e024      	b.n	800407e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800403a:	4b13      	ldr	r3, [pc, #76]	; (8004088 <prvProcessTimerOrBlockTask+0x90>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <prvProcessTimerOrBlockTask+0x50>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <prvProcessTimerOrBlockTask+0x52>
 8004048:	2300      	movs	r3, #0
 800404a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <prvProcessTimerOrBlockTask+0x94>)
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	4619      	mov	r1, r3
 800405a:	f7fe ff31 	bl	8002ec0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800405e:	f7ff f939 	bl	80032d4 <xTaskResumeAll>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004068:	4b09      	ldr	r3, [pc, #36]	; (8004090 <prvProcessTimerOrBlockTask+0x98>)
 800406a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	f3bf 8f6f 	isb	sy
    }
 8004078:	e001      	b.n	800407e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800407a:	f7ff f92b 	bl	80032d4 <xTaskResumeAll>
    }
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	200001cc 	.word	0x200001cc
 800408c:	200001d0 	.word	0x200001d0
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800409c:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <prvGetNextExpireTime+0x44>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <prvGetNextExpireTime+0x16>
 80040a6:	2201      	movs	r2, #1
 80040a8:	e000      	b.n	80040ac <prvGetNextExpireTime+0x18>
 80040aa:	2200      	movs	r2, #0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <prvGetNextExpireTime+0x44>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	e001      	b.n	80040c8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80040c8:	68fb      	ldr	r3, [r7, #12]
    }
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	200001c8 	.word	0x200001c8

080040dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80040e4:	f7ff f992 	bl	800340c <xTaskGetTickCount>
 80040e8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <prvSampleTimeNow+0x3c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d205      	bcs.n	8004100 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80040f4:	f000 f918 	bl	8004328 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e002      	b.n	8004106 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004106:	4a04      	ldr	r2, [pc, #16]	; (8004118 <prvSampleTimeNow+0x3c>)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800410c:	68fb      	ldr	r3, [r7, #12]
    }
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	200001d8 	.word	0x200001d8

0800411c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	429a      	cmp	r2, r3
 8004140:	d812      	bhi.n	8004168 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	1ad2      	subs	r2, r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	429a      	cmp	r2, r3
 800414e:	d302      	bcc.n	8004156 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004150:	2301      	movs	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e01b      	b.n	800418e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <prvInsertTimerInActiveList+0x7c>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3304      	adds	r3, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f7fe f85b 	bl	800221c <vListInsert>
 8004166:	e012      	b.n	800418e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d206      	bcs.n	800417e <prvInsertTimerInActiveList+0x62>
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d302      	bcc.n	800417e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004178:	2301      	movs	r3, #1
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	e007      	b.n	800418e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <prvInsertTimerInActiveList+0x80>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3304      	adds	r3, #4
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f7fe f847 	bl	800221c <vListInsert>
            }
        }

        return xProcessTimerNow;
 800418e:	697b      	ldr	r3, [r7, #20]
    }
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	200001cc 	.word	0x200001cc
 800419c:	200001c8 	.word	0x200001c8

080041a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08c      	sub	sp, #48	; 0x30
 80041a4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041a6:	e0ac      	b.n	8004302 <prvProcessReceivedCommands+0x162>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f2c0 80a8 	blt.w	8004300 <prvProcessReceivedCommands+0x160>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d004      	beq.n	80041c6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	3304      	adds	r3, #4
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe f864 	bl	800228e <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041c6:	1d3b      	adds	r3, r7, #4
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff87 	bl	80040dc <prvSampleTimeNow>
 80041ce:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b09      	cmp	r3, #9
 80041d4:	f200 8095 	bhi.w	8004302 <prvProcessReceivedCommands+0x162>
 80041d8:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <prvProcessReceivedCommands+0x40>)
 80041da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041de:	bf00      	nop
 80041e0:	08004209 	.word	0x08004209
 80041e4:	08004209 	.word	0x08004209
 80041e8:	08004209 	.word	0x08004209
 80041ec:	0800427b 	.word	0x0800427b
 80041f0:	0800428f 	.word	0x0800428f
 80041f4:	080042d7 	.word	0x080042d7
 80041f8:	08004209 	.word	0x08004209
 80041fc:	08004209 	.word	0x08004209
 8004200:	0800427b 	.word	0x0800427b
 8004204:	0800428f 	.word	0x0800428f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	b2da      	uxtb	r2, r3
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	18d1      	adds	r1, r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a3a      	ldr	r2, [r7, #32]
 8004226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004228:	f7ff ff78 	bl	800411c <prvInsertTimerInActiveList>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d067      	beq.n	8004302 <prvProcessReceivedCommands+0x162>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004238:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d05c      	beq.n	8004302 <prvProcessReceivedCommands+0x162>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	441a      	add	r2, r3
 8004250:	2300      	movs	r3, #0
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2300      	movs	r3, #0
 8004256:	2100      	movs	r1, #0
 8004258:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800425a:	f7ff fe23 	bl	8003ea4 <xTimerGenericCommand>
 800425e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d14d      	bne.n	8004302 <prvProcessReceivedCommands+0x162>
 8004266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	e7fe      	b.n	8004278 <prvProcessReceivedCommands+0xd8>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004280:	f023 0301 	bic.w	r3, r3, #1
 8004284:	b2da      	uxtb	r2, r3
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800428c:	e039      	b.n	8004302 <prvProcessReceivedCommands+0x162>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004294:	f043 0301 	orr.w	r3, r3, #1
 8004298:	b2da      	uxtb	r2, r3
 800429a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <prvProcessReceivedCommands+0x122>
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	e7fe      	b.n	80042c0 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	18d1      	adds	r1, r2, r3
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	6a3a      	ldr	r2, [r7, #32]
 80042ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042d0:	f7ff ff24 	bl	800411c <prvInsertTimerInActiveList>
                        break;
 80042d4:	e015      	b.n	8004302 <prvProcessReceivedCommands+0x162>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d103      	bne.n	80042ec <prvProcessReceivedCommands+0x14c>
                                {
                                    vPortFree( pxTimer );
 80042e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042e6:	f000 fbd9 	bl	8004a9c <vPortFree>
 80042ea:	e00a      	b.n	8004302 <prvProcessReceivedCommands+0x162>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042f2:	f023 0301 	bic.w	r3, r3, #1
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80042fe:	e000      	b.n	8004302 <prvProcessReceivedCommands+0x162>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004300:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <prvProcessReceivedCommands+0x184>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f107 0108 	add.w	r1, r7, #8
 800430a:	2200      	movs	r2, #0
 800430c:	4618      	mov	r0, r3
 800430e:	f7fe faa3 	bl	8002858 <xQueueReceive>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	f47f af47 	bne.w	80041a8 <prvProcessReceivedCommands+0x8>
        }
    }
 800431a:	bf00      	nop
 800431c:	3728      	adds	r7, #40	; 0x28
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	200001d0 	.word	0x200001d0

08004328 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800432e:	e047      	b.n	80043c0 <prvSwitchTimerLists+0x98>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004330:	4b2d      	ldr	r3, [pc, #180]	; (80043e8 <prvSwitchTimerLists+0xc0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800433a:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <prvSwitchTimerLists+0xc0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3304      	adds	r3, #4
 8004348:	4618      	mov	r0, r3
 800434a:	f7fd ffa0 	bl	800228e <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d02d      	beq.n	80043c0 <prvSwitchTimerLists+0x98>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4413      	add	r3, r2
 800436c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	429a      	cmp	r2, r3
 8004374:	d90e      	bls.n	8004394 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004382:	4b19      	ldr	r3, [pc, #100]	; (80043e8 <prvSwitchTimerLists+0xc0>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3304      	adds	r3, #4
 800438a:	4619      	mov	r1, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f7fd ff45 	bl	800221c <vListInsert>
 8004392:	e015      	b.n	80043c0 <prvSwitchTimerLists+0x98>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004394:	2300      	movs	r3, #0
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	2300      	movs	r3, #0
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	2100      	movs	r1, #0
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f7ff fd80 	bl	8003ea4 <xTimerGenericCommand>
 80043a4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d109      	bne.n	80043c0 <prvSwitchTimerLists+0x98>
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	603b      	str	r3, [r7, #0]
 80043be:	e7fe      	b.n	80043be <prvSwitchTimerLists+0x96>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043c0:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <prvSwitchTimerLists+0xc0>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1b2      	bne.n	8004330 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <prvSwitchTimerLists+0xc0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <prvSwitchTimerLists+0xc4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <prvSwitchTimerLists+0xc0>)
 80043d6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <prvSwitchTimerLists+0xc4>)
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	6013      	str	r3, [r2, #0]
    }
 80043de:	bf00      	nop
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	200001c8 	.word	0x200001c8
 80043ec:	200001cc 	.word	0x200001cc

080043f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80043f4:	f000 f95c 	bl	80046b0 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80043f8:	4b12      	ldr	r3, [pc, #72]	; (8004444 <prvCheckForValidListAndQueue+0x54>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d11d      	bne.n	800443c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004400:	4811      	ldr	r0, [pc, #68]	; (8004448 <prvCheckForValidListAndQueue+0x58>)
 8004402:	f7fd feba 	bl	800217a <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004406:	4811      	ldr	r0, [pc, #68]	; (800444c <prvCheckForValidListAndQueue+0x5c>)
 8004408:	f7fd feb7 	bl	800217a <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <prvCheckForValidListAndQueue+0x60>)
 800440e:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <prvCheckForValidListAndQueue+0x58>)
 8004410:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <prvCheckForValidListAndQueue+0x64>)
 8004414:	4a0d      	ldr	r2, [pc, #52]	; (800444c <prvCheckForValidListAndQueue+0x5c>)
 8004416:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004418:	2200      	movs	r2, #0
 800441a:	210c      	movs	r1, #12
 800441c:	200a      	movs	r0, #10
 800441e:	f7fd ffc9 	bl	80023b4 <xQueueGenericCreate>
 8004422:	4602      	mov	r2, r0
 8004424:	4b07      	ldr	r3, [pc, #28]	; (8004444 <prvCheckForValidListAndQueue+0x54>)
 8004426:	601a      	str	r2, [r3, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <prvCheckForValidListAndQueue+0x54>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004430:	4b04      	ldr	r3, [pc, #16]	; (8004444 <prvCheckForValidListAndQueue+0x54>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4908      	ldr	r1, [pc, #32]	; (8004458 <prvCheckForValidListAndQueue+0x68>)
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe fd1a 	bl	8002e70 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800443c:	f000 f966 	bl	800470c <vPortExitCritical>
    }
 8004440:	bf00      	nop
 8004442:	bd80      	pop	{r7, pc}
 8004444:	200001d0 	.word	0x200001d0
 8004448:	200001a0 	.word	0x200001a0
 800444c:	200001b4 	.word	0x200001b4
 8004450:	200001c8 	.word	0x200001c8
 8004454:	200001cc 	.word	0x200001cc
 8004458:	08005c84 	.word	0x08005c84

0800445c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3b04      	subs	r3, #4
 800446c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004474:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3b04      	subs	r3, #4
 800447a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	f023 0201 	bic.w	r2, r3, #1
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3b04      	subs	r3, #4
 800448a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800448c:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <pxPortInitialiseStack+0x64>)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	3b14      	subs	r3, #20
 8004496:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3b04      	subs	r3, #4
 80044a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f06f 0202 	mvn.w	r2, #2
 80044aa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3b20      	subs	r3, #32
 80044b0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80044b2:	68fb      	ldr	r3, [r7, #12]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	080044c5 	.word	0x080044c5

080044c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80044ce:	4b11      	ldr	r3, [pc, #68]	; (8004514 <prvTaskExitError+0x50>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d009      	beq.n	80044ec <prvTaskExitError+0x28>
 80044d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e7fe      	b.n	80044ea <prvTaskExitError+0x26>
 80044ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f0:	f383 8811 	msr	BASEPRI, r3
 80044f4:	f3bf 8f6f 	isb	sy
 80044f8:	f3bf 8f4f 	dsb	sy
 80044fc:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80044fe:	bf00      	nop
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d0fc      	beq.n	8004500 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004506:	bf00      	nop
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	20000010 	.word	0x20000010
	...

08004520 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004520:	4b07      	ldr	r3, [pc, #28]	; (8004540 <pxCurrentTCBConst2>)
 8004522:	6819      	ldr	r1, [r3, #0]
 8004524:	6808      	ldr	r0, [r1, #0]
 8004526:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452a:	f380 8809 	msr	PSP, r0
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f04f 0000 	mov.w	r0, #0
 8004536:	f380 8811 	msr	BASEPRI, r0
 800453a:	4770      	bx	lr
 800453c:	f3af 8000 	nop.w

08004540 <pxCurrentTCBConst2>:
 8004540:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop

08004548 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004548:	4808      	ldr	r0, [pc, #32]	; (800456c <prvPortStartFirstTask+0x24>)
 800454a:	6800      	ldr	r0, [r0, #0]
 800454c:	6800      	ldr	r0, [r0, #0]
 800454e:	f380 8808 	msr	MSP, r0
 8004552:	f04f 0000 	mov.w	r0, #0
 8004556:	f380 8814 	msr	CONTROL, r0
 800455a:	b662      	cpsie	i
 800455c:	b661      	cpsie	f
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	df00      	svc	0
 8004568:	bf00      	nop
 800456a:	0000      	.short	0x0000
 800456c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop

08004574 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800457a:	4b44      	ldr	r3, [pc, #272]	; (800468c <xPortStartScheduler+0x118>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a44      	ldr	r2, [pc, #272]	; (8004690 <xPortStartScheduler+0x11c>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d109      	bne.n	8004598 <xPortStartScheduler+0x24>
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	613b      	str	r3, [r7, #16]
 8004596:	e7fe      	b.n	8004596 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004598:	4b3c      	ldr	r3, [pc, #240]	; (800468c <xPortStartScheduler+0x118>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a3d      	ldr	r2, [pc, #244]	; (8004694 <xPortStartScheduler+0x120>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d109      	bne.n	80045b6 <xPortStartScheduler+0x42>
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	e7fe      	b.n	80045b4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045b6:	4b38      	ldr	r3, [pc, #224]	; (8004698 <xPortStartScheduler+0x124>)
 80045b8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	22ff      	movs	r2, #255	; 0xff
 80045c6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	4b30      	ldr	r3, [pc, #192]	; (800469c <xPortStartScheduler+0x128>)
 80045dc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045de:	4b30      	ldr	r3, [pc, #192]	; (80046a0 <xPortStartScheduler+0x12c>)
 80045e0:	2207      	movs	r2, #7
 80045e2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045e4:	e009      	b.n	80045fa <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 80045e6:	4b2e      	ldr	r3, [pc, #184]	; (80046a0 <xPortStartScheduler+0x12c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	4a2c      	ldr	r2, [pc, #176]	; (80046a0 <xPortStartScheduler+0x12c>)
 80045ee:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004602:	2b80      	cmp	r3, #128	; 0x80
 8004604:	d0ef      	beq.n	80045e6 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004606:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <xPortStartScheduler+0x12c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f1c3 0307 	rsb	r3, r3, #7
 800460e:	2b04      	cmp	r3, #4
 8004610:	d009      	beq.n	8004626 <xPortStartScheduler+0xb2>
 8004612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004616:	f383 8811 	msr	BASEPRI, r3
 800461a:	f3bf 8f6f 	isb	sy
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	e7fe      	b.n	8004624 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004626:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <xPortStartScheduler+0x12c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	4a1c      	ldr	r2, [pc, #112]	; (80046a0 <xPortStartScheduler+0x12c>)
 800462e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <xPortStartScheduler+0x12c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004638:	4a19      	ldr	r2, [pc, #100]	; (80046a0 <xPortStartScheduler+0x12c>)
 800463a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	b2da      	uxtb	r2, r3
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004644:	4b17      	ldr	r3, [pc, #92]	; (80046a4 <xPortStartScheduler+0x130>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a16      	ldr	r2, [pc, #88]	; (80046a4 <xPortStartScheduler+0x130>)
 800464a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800464e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004650:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <xPortStartScheduler+0x130>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a13      	ldr	r2, [pc, #76]	; (80046a4 <xPortStartScheduler+0x130>)
 8004656:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800465a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800465c:	f000 f8d4 	bl	8004808 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004660:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <xPortStartScheduler+0x134>)
 8004662:	2200      	movs	r2, #0
 8004664:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004666:	f000 f8f3 	bl	8004850 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800466a:	4b10      	ldr	r3, [pc, #64]	; (80046ac <xPortStartScheduler+0x138>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a0f      	ldr	r2, [pc, #60]	; (80046ac <xPortStartScheduler+0x138>)
 8004670:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004674:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004676:	f7ff ff67 	bl	8004548 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800467a:	f7fe ff8f 	bl	800359c <vTaskSwitchContext>
    prvTaskExitError();
 800467e:	f7ff ff21 	bl	80044c4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	e000ed00 	.word	0xe000ed00
 8004690:	410fc271 	.word	0x410fc271
 8004694:	410fc270 	.word	0x410fc270
 8004698:	e000e400 	.word	0xe000e400
 800469c:	200001dc 	.word	0x200001dc
 80046a0:	200001e0 	.word	0x200001e0
 80046a4:	e000ed20 	.word	0xe000ed20
 80046a8:	20000010 	.word	0x20000010
 80046ac:	e000ef34 	.word	0xe000ef34

080046b0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046c8:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <vPortEnterCritical+0x54>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3301      	adds	r3, #1
 80046ce:	4a0d      	ldr	r2, [pc, #52]	; (8004704 <vPortEnterCritical+0x54>)
 80046d0:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80046d2:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <vPortEnterCritical+0x54>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d10e      	bne.n	80046f8 <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <vPortEnterCritical+0x58>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d009      	beq.n	80046f8 <vPortEnterCritical+0x48>
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	e7fe      	b.n	80046f6 <vPortEnterCritical+0x46>
    }
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	20000010 	.word	0x20000010
 8004708:	e000ed04 	.word	0xe000ed04

0800470c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004712:	4b11      	ldr	r3, [pc, #68]	; (8004758 <vPortExitCritical+0x4c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <vPortExitCritical+0x22>
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	e7fe      	b.n	800472c <vPortExitCritical+0x20>
    uxCriticalNesting--;
 800472e:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <vPortExitCritical+0x4c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3b01      	subs	r3, #1
 8004734:	4a08      	ldr	r2, [pc, #32]	; (8004758 <vPortExitCritical+0x4c>)
 8004736:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004738:	4b07      	ldr	r3, [pc, #28]	; (8004758 <vPortExitCritical+0x4c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d104      	bne.n	800474a <vPortExitCritical+0x3e>
 8004740:	2300      	movs	r3, #0
 8004742:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20000010 	.word	0x20000010
 800475c:	00000000 	.word	0x00000000

08004760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004760:	f3ef 8009 	mrs	r0, PSP
 8004764:	f3bf 8f6f 	isb	sy
 8004768:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <pxCurrentTCBConst>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	f01e 0f10 	tst.w	lr, #16
 8004770:	bf08      	it	eq
 8004772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477a:	6010      	str	r0, [r2, #0]
 800477c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004784:	f380 8811 	msr	BASEPRI, r0
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f7fe ff04 	bl	800359c <vTaskSwitchContext>
 8004794:	f04f 0000 	mov.w	r0, #0
 8004798:	f380 8811 	msr	BASEPRI, r0
 800479c:	bc09      	pop	{r0, r3}
 800479e:	6819      	ldr	r1, [r3, #0]
 80047a0:	6808      	ldr	r0, [r1, #0]
 80047a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a6:	f01e 0f10 	tst.w	lr, #16
 80047aa:	bf08      	it	eq
 80047ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047b0:	f380 8809 	msr	PSP, r0
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	f3af 8000 	nop.w

080047c0 <pxCurrentTCBConst>:
 80047c0:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop

080047c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
        __asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	607b      	str	r3, [r7, #4]
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80047e0:	f7fe fe24 	bl	800342c <xTaskIncrementTick>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <SysTick_Handler+0x2a>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047ea:	4b06      	ldr	r3, [pc, #24]	; (8004804 <SysTick_Handler+0x3c>)
 80047ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	2300      	movs	r3, #0
 80047f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	e000ed04 	.word	0xe000ed04

08004808 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <vPortSetupTimerInterrupt+0x34>)
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <vPortSetupTimerInterrupt+0x38>)
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004818:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <vPortSetupTimerInterrupt+0x3c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <vPortSetupTimerInterrupt+0x40>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	4a09      	ldr	r2, [pc, #36]	; (800484c <vPortSetupTimerInterrupt+0x44>)
 8004826:	3b01      	subs	r3, #1
 8004828:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800482a:	4b04      	ldr	r3, [pc, #16]	; (800483c <vPortSetupTimerInterrupt+0x34>)
 800482c:	2207      	movs	r2, #7
 800482e:	601a      	str	r2, [r3, #0]
}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	e000e010 	.word	0xe000e010
 8004840:	e000e018 	.word	0xe000e018
 8004844:	20000008 	.word	0x20000008
 8004848:	10624dd3 	.word	0x10624dd3
 800484c:	e000e014 	.word	0xe000e014

08004850 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004850:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004860 <vPortEnableVFP+0x10>
 8004854:	6801      	ldr	r1, [r0, #0]
 8004856:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800485a:	6001      	str	r1, [r0, #0]
 800485c:	4770      	bx	lr
 800485e:	0000      	.short	0x0000
 8004860:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop

08004868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800486e:	f3ef 8305 	mrs	r3, IPSR
 8004872:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b0f      	cmp	r3, #15
 8004878:	d913      	bls.n	80048a2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800487a:	4a16      	ldr	r2, [pc, #88]	; (80048d4 <vPortValidateInterruptPriority+0x6c>)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004884:	4b14      	ldr	r3, [pc, #80]	; (80048d8 <vPortValidateInterruptPriority+0x70>)
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	7afa      	ldrb	r2, [r7, #11]
 800488a:	429a      	cmp	r2, r3
 800488c:	d209      	bcs.n	80048a2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	e7fe      	b.n	80048a0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048a2:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <vPortValidateInterruptPriority+0x74>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048aa:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <vPortValidateInterruptPriority+0x78>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d909      	bls.n	80048c6 <vPortValidateInterruptPriority+0x5e>
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	603b      	str	r3, [r7, #0]
 80048c4:	e7fe      	b.n	80048c4 <vPortValidateInterruptPriority+0x5c>
    }
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	e000e3f0 	.word	0xe000e3f0
 80048d8:	200001dc 	.word	0x200001dc
 80048dc:	e000ed0c 	.word	0xe000ed0c
 80048e0:	200001e0 	.word	0x200001e0

080048e4 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80048ec:	2300      	movs	r3, #0
 80048ee:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80048f0:	f7fe fce2 	bl	80032b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80048f4:	4b63      	ldr	r3, [pc, #396]	; (8004a84 <pvPortMalloc+0x1a0>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80048fc:	f000 f92e 	bl	8004b5c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004900:	4b61      	ldr	r3, [pc, #388]	; (8004a88 <pvPortMalloc+0x1a4>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	f040 80a5 	bne.w	8004a58 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d02c      	beq.n	800496e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004914:	2208      	movs	r2, #8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	d226      	bcs.n	800496e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8004920:	2208      	movs	r2, #8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	2b00      	cmp	r3, #0
 8004930:	d020      	beq.n	8004974 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f023 0307 	bic.w	r3, r3, #7
 8004938:	3308      	adds	r3, #8
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d213      	bcs.n	8004968 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f023 0307 	bic.w	r3, r3, #7
 8004946:	3308      	adds	r3, #8
 8004948:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00f      	beq.n	8004974 <pvPortMalloc+0x90>
 8004954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004958:	f383 8811 	msr	BASEPRI, r3
 800495c:	f3bf 8f6f 	isb	sy
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	e7fe      	b.n	8004966 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800496c:	e002      	b.n	8004974 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]
 8004972:	e000      	b.n	8004976 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004974:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d06d      	beq.n	8004a58 <pvPortMalloc+0x174>
 800497c:	4b43      	ldr	r3, [pc, #268]	; (8004a8c <pvPortMalloc+0x1a8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	429a      	cmp	r2, r3
 8004984:	d868      	bhi.n	8004a58 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004986:	4b42      	ldr	r3, [pc, #264]	; (8004a90 <pvPortMalloc+0x1ac>)
 8004988:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800498a:	4b41      	ldr	r3, [pc, #260]	; (8004a90 <pvPortMalloc+0x1ac>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004990:	e004      	b.n	800499c <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d903      	bls.n	80049ae <pvPortMalloc+0xca>
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f1      	bne.n	8004992 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049ae:	4b35      	ldr	r3, [pc, #212]	; (8004a84 <pvPortMalloc+0x1a0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d04f      	beq.n	8004a58 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2208      	movs	r2, #8
 80049be:	4413      	add	r3, r2
 80049c0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	1ad2      	subs	r2, r2, r3
 80049d2:	2308      	movs	r3, #8
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d91e      	bls.n	8004a18 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4413      	add	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d009      	beq.n	8004a00 <pvPortMalloc+0x11c>
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	e7fe      	b.n	80049fe <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	1ad2      	subs	r2, r2, r3
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a12:	69b8      	ldr	r0, [r7, #24]
 8004a14:	f000 f904 	bl	8004c20 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a18:	4b1c      	ldr	r3, [pc, #112]	; (8004a8c <pvPortMalloc+0x1a8>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	4a1a      	ldr	r2, [pc, #104]	; (8004a8c <pvPortMalloc+0x1a8>)
 8004a24:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a26:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <pvPortMalloc+0x1a8>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <pvPortMalloc+0x1b0>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d203      	bcs.n	8004a3a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a32:	4b16      	ldr	r3, [pc, #88]	; (8004a8c <pvPortMalloc+0x1a8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <pvPortMalloc+0x1b0>)
 8004a38:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	4b12      	ldr	r3, [pc, #72]	; (8004a88 <pvPortMalloc+0x1a4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a4e:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <pvPortMalloc+0x1b4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3301      	adds	r3, #1
 8004a54:	4a10      	ldr	r2, [pc, #64]	; (8004a98 <pvPortMalloc+0x1b4>)
 8004a56:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a58:	f7fe fc3c 	bl	80032d4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d009      	beq.n	8004a7a <pvPortMalloc+0x196>
 8004a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e7fe      	b.n	8004a78 <pvPortMalloc+0x194>
    return pvReturn;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3728      	adds	r7, #40	; 0x28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20012dec 	.word	0x20012dec
 8004a88:	20012e00 	.word	0x20012e00
 8004a8c:	20012df0 	.word	0x20012df0
 8004a90:	20012de4 	.word	0x20012de4
 8004a94:	20012df4 	.word	0x20012df4
 8004a98:	20012df8 	.word	0x20012df8

08004a9c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d04b      	beq.n	8004b46 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004aae:	2308      	movs	r3, #8
 8004ab0:	425b      	negs	r3, r3
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <vPortFree+0xb4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d109      	bne.n	8004ade <vPortFree+0x42>
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	e7fe      	b.n	8004adc <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d009      	beq.n	8004afa <vPortFree+0x5e>
 8004ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	60bb      	str	r3, [r7, #8]
 8004af8:	e7fe      	b.n	8004af8 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	685a      	ldr	r2, [r3, #4]
 8004afe:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <vPortFree+0xb4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01e      	beq.n	8004b46 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d11a      	bne.n	8004b46 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <vPortFree+0xb4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	43db      	mvns	r3, r3
 8004b1a:	401a      	ands	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004b20:	f7fe fbca 	bl	80032b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <vPortFree+0xb8>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	4a09      	ldr	r2, [pc, #36]	; (8004b54 <vPortFree+0xb8>)
 8004b30:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b32:	6938      	ldr	r0, [r7, #16]
 8004b34:	f000 f874 	bl	8004c20 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b38:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <vPortFree+0xbc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	4a06      	ldr	r2, [pc, #24]	; (8004b58 <vPortFree+0xbc>)
 8004b40:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b42:	f7fe fbc7 	bl	80032d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b46:	bf00      	nop
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20012e00 	.word	0x20012e00
 8004b54:	20012df0 	.word	0x20012df0
 8004b58:	20012dfc 	.word	0x20012dfc

08004b5c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b62:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004b66:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004b68:	4b27      	ldr	r3, [pc, #156]	; (8004c08 <prvHeapInit+0xac>)
 8004b6a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00c      	beq.n	8004b90 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3307      	adds	r3, #7
 8004b7a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0307 	bic.w	r3, r3, #7
 8004b82:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	4a1f      	ldr	r2, [pc, #124]	; (8004c08 <prvHeapInit+0xac>)
 8004b8c:	4413      	add	r3, r2
 8004b8e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b94:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <prvHeapInit+0xb0>)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004b9a:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <prvHeapInit+0xb0>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004ba8:	2208      	movs	r2, #8
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0307 	bic.w	r3, r3, #7
 8004bb6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4a15      	ldr	r2, [pc, #84]	; (8004c10 <prvHeapInit+0xb4>)
 8004bbc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004bbe:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <prvHeapInit+0xb4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004bc6:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <prvHeapInit+0xb4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	1ad2      	subs	r2, r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <prvHeapInit+0xb4>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4a0a      	ldr	r2, [pc, #40]	; (8004c14 <prvHeapInit+0xb8>)
 8004bea:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <prvHeapInit+0xbc>)
 8004bf2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004bf4:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <prvHeapInit+0xc0>)
 8004bf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004bfa:	601a      	str	r2, [r3, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	200001e4 	.word	0x200001e4
 8004c0c:	20012de4 	.word	0x20012de4
 8004c10:	20012dec 	.word	0x20012dec
 8004c14:	20012df4 	.word	0x20012df4
 8004c18:	20012df0 	.word	0x20012df0
 8004c1c:	20012e00 	.word	0x20012e00

08004c20 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c28:	4b28      	ldr	r3, [pc, #160]	; (8004ccc <prvInsertBlockIntoFreeList+0xac>)
 8004c2a:	60fb      	str	r3, [r7, #12]
 8004c2c:	e002      	b.n	8004c34 <prvInsertBlockIntoFreeList+0x14>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d8f7      	bhi.n	8004c2e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	4413      	add	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d108      	bne.n	8004c62 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	441a      	add	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	441a      	add	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d118      	bne.n	8004ca8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4b15      	ldr	r3, [pc, #84]	; (8004cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d00d      	beq.n	8004c9e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	441a      	add	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	e008      	b.n	8004cb0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <prvInsertBlockIntoFreeList+0xb0>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	e003      	b.n	8004cb0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d002      	beq.n	8004cbe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20012de4 	.word	0x20012de4
 8004cd0:	20012dec 	.word	0x20012dec

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4e0d      	ldr	r6, [pc, #52]	; (8004d0c <__libc_init_array+0x38>)
 8004cd8:	4c0d      	ldr	r4, [pc, #52]	; (8004d10 <__libc_init_array+0x3c>)
 8004cda:	1ba4      	subs	r4, r4, r6
 8004cdc:	10a4      	asrs	r4, r4, #2
 8004cde:	2500      	movs	r5, #0
 8004ce0:	42a5      	cmp	r5, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	4e0b      	ldr	r6, [pc, #44]	; (8004d14 <__libc_init_array+0x40>)
 8004ce6:	4c0c      	ldr	r4, [pc, #48]	; (8004d18 <__libc_init_array+0x44>)
 8004ce8:	f000 ff1e 	bl	8005b28 <_init>
 8004cec:	1ba4      	subs	r4, r4, r6
 8004cee:	10a4      	asrs	r4, r4, #2
 8004cf0:	2500      	movs	r5, #0
 8004cf2:	42a5      	cmp	r5, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004cfc:	4798      	blx	r3
 8004cfe:	3501      	adds	r5, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d06:	4798      	blx	r3
 8004d08:	3501      	adds	r5, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	08005d44 	.word	0x08005d44
 8004d10:	08005d44 	.word	0x08005d44
 8004d14:	08005d44 	.word	0x08005d44
 8004d18:	08005d48 	.word	0x08005d48

08004d1c <memcpy>:
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	1e43      	subs	r3, r0, #1
 8004d20:	440a      	add	r2, r1
 8004d22:	4291      	cmp	r1, r2
 8004d24:	d100      	bne.n	8004d28 <memcpy+0xc>
 8004d26:	bd10      	pop	{r4, pc}
 8004d28:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d30:	e7f7      	b.n	8004d22 <memcpy+0x6>

08004d32 <memset>:
 8004d32:	4402      	add	r2, r0
 8004d34:	4603      	mov	r3, r0
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d100      	bne.n	8004d3c <memset+0xa>
 8004d3a:	4770      	bx	lr
 8004d3c:	f803 1b01 	strb.w	r1, [r3], #1
 8004d40:	e7f9      	b.n	8004d36 <memset+0x4>
	...

08004d44 <iprintf>:
 8004d44:	b40f      	push	{r0, r1, r2, r3}
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <iprintf+0x2c>)
 8004d48:	b513      	push	{r0, r1, r4, lr}
 8004d4a:	681c      	ldr	r4, [r3, #0]
 8004d4c:	b124      	cbz	r4, 8004d58 <iprintf+0x14>
 8004d4e:	69a3      	ldr	r3, [r4, #24]
 8004d50:	b913      	cbnz	r3, 8004d58 <iprintf+0x14>
 8004d52:	4620      	mov	r0, r4
 8004d54:	f000 f84e 	bl	8004df4 <__sinit>
 8004d58:	ab05      	add	r3, sp, #20
 8004d5a:	9a04      	ldr	r2, [sp, #16]
 8004d5c:	68a1      	ldr	r1, [r4, #8]
 8004d5e:	9301      	str	r3, [sp, #4]
 8004d60:	4620      	mov	r0, r4
 8004d62:	f000 f955 	bl	8005010 <_vfiprintf_r>
 8004d66:	b002      	add	sp, #8
 8004d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d6c:	b004      	add	sp, #16
 8004d6e:	4770      	bx	lr
 8004d70:	20000014 	.word	0x20000014

08004d74 <std>:
 8004d74:	2300      	movs	r3, #0
 8004d76:	b510      	push	{r4, lr}
 8004d78:	4604      	mov	r4, r0
 8004d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8004d7e:	6083      	str	r3, [r0, #8]
 8004d80:	8181      	strh	r1, [r0, #12]
 8004d82:	6643      	str	r3, [r0, #100]	; 0x64
 8004d84:	81c2      	strh	r2, [r0, #14]
 8004d86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d8a:	6183      	str	r3, [r0, #24]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	2208      	movs	r2, #8
 8004d90:	305c      	adds	r0, #92	; 0x5c
 8004d92:	f7ff ffce 	bl	8004d32 <memset>
 8004d96:	4b05      	ldr	r3, [pc, #20]	; (8004dac <std+0x38>)
 8004d98:	6263      	str	r3, [r4, #36]	; 0x24
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <std+0x3c>)
 8004d9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d9e:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <std+0x40>)
 8004da0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <std+0x44>)
 8004da4:	6224      	str	r4, [r4, #32]
 8004da6:	6323      	str	r3, [r4, #48]	; 0x30
 8004da8:	bd10      	pop	{r4, pc}
 8004daa:	bf00      	nop
 8004dac:	0800556d 	.word	0x0800556d
 8004db0:	0800558f 	.word	0x0800558f
 8004db4:	080055c7 	.word	0x080055c7
 8004db8:	080055eb 	.word	0x080055eb

08004dbc <_cleanup_r>:
 8004dbc:	4901      	ldr	r1, [pc, #4]	; (8004dc4 <_cleanup_r+0x8>)
 8004dbe:	f000 b885 	b.w	8004ecc <_fwalk_reent>
 8004dc2:	bf00      	nop
 8004dc4:	080058c5 	.word	0x080058c5

08004dc8 <__sfmoreglue>:
 8004dc8:	b570      	push	{r4, r5, r6, lr}
 8004dca:	1e4a      	subs	r2, r1, #1
 8004dcc:	2568      	movs	r5, #104	; 0x68
 8004dce:	4355      	muls	r5, r2
 8004dd0:	460e      	mov	r6, r1
 8004dd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dd6:	f000 f897 	bl	8004f08 <_malloc_r>
 8004dda:	4604      	mov	r4, r0
 8004ddc:	b140      	cbz	r0, 8004df0 <__sfmoreglue+0x28>
 8004dde:	2100      	movs	r1, #0
 8004de0:	e9c0 1600 	strd	r1, r6, [r0]
 8004de4:	300c      	adds	r0, #12
 8004de6:	60a0      	str	r0, [r4, #8]
 8004de8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004dec:	f7ff ffa1 	bl	8004d32 <memset>
 8004df0:	4620      	mov	r0, r4
 8004df2:	bd70      	pop	{r4, r5, r6, pc}

08004df4 <__sinit>:
 8004df4:	6983      	ldr	r3, [r0, #24]
 8004df6:	b510      	push	{r4, lr}
 8004df8:	4604      	mov	r4, r0
 8004dfa:	bb33      	cbnz	r3, 8004e4a <__sinit+0x56>
 8004dfc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004e00:	6503      	str	r3, [r0, #80]	; 0x50
 8004e02:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <__sinit+0x58>)
 8004e04:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <__sinit+0x5c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6282      	str	r2, [r0, #40]	; 0x28
 8004e0a:	4298      	cmp	r0, r3
 8004e0c:	bf04      	itt	eq
 8004e0e:	2301      	moveq	r3, #1
 8004e10:	6183      	streq	r3, [r0, #24]
 8004e12:	f000 f81f 	bl	8004e54 <__sfp>
 8004e16:	6060      	str	r0, [r4, #4]
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f000 f81b 	bl	8004e54 <__sfp>
 8004e1e:	60a0      	str	r0, [r4, #8]
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 f817 	bl	8004e54 <__sfp>
 8004e26:	2200      	movs	r2, #0
 8004e28:	60e0      	str	r0, [r4, #12]
 8004e2a:	2104      	movs	r1, #4
 8004e2c:	6860      	ldr	r0, [r4, #4]
 8004e2e:	f7ff ffa1 	bl	8004d74 <std>
 8004e32:	2201      	movs	r2, #1
 8004e34:	2109      	movs	r1, #9
 8004e36:	68a0      	ldr	r0, [r4, #8]
 8004e38:	f7ff ff9c 	bl	8004d74 <std>
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	2112      	movs	r1, #18
 8004e40:	68e0      	ldr	r0, [r4, #12]
 8004e42:	f7ff ff97 	bl	8004d74 <std>
 8004e46:	2301      	movs	r3, #1
 8004e48:	61a3      	str	r3, [r4, #24]
 8004e4a:	bd10      	pop	{r4, pc}
 8004e4c:	08005ca4 	.word	0x08005ca4
 8004e50:	08004dbd 	.word	0x08004dbd

08004e54 <__sfp>:
 8004e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e56:	4b1b      	ldr	r3, [pc, #108]	; (8004ec4 <__sfp+0x70>)
 8004e58:	681e      	ldr	r6, [r3, #0]
 8004e5a:	69b3      	ldr	r3, [r6, #24]
 8004e5c:	4607      	mov	r7, r0
 8004e5e:	b913      	cbnz	r3, 8004e66 <__sfp+0x12>
 8004e60:	4630      	mov	r0, r6
 8004e62:	f7ff ffc7 	bl	8004df4 <__sinit>
 8004e66:	3648      	adds	r6, #72	; 0x48
 8004e68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	d503      	bpl.n	8004e78 <__sfp+0x24>
 8004e70:	6833      	ldr	r3, [r6, #0]
 8004e72:	b133      	cbz	r3, 8004e82 <__sfp+0x2e>
 8004e74:	6836      	ldr	r6, [r6, #0]
 8004e76:	e7f7      	b.n	8004e68 <__sfp+0x14>
 8004e78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e7c:	b16d      	cbz	r5, 8004e9a <__sfp+0x46>
 8004e7e:	3468      	adds	r4, #104	; 0x68
 8004e80:	e7f4      	b.n	8004e6c <__sfp+0x18>
 8004e82:	2104      	movs	r1, #4
 8004e84:	4638      	mov	r0, r7
 8004e86:	f7ff ff9f 	bl	8004dc8 <__sfmoreglue>
 8004e8a:	6030      	str	r0, [r6, #0]
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	d1f1      	bne.n	8004e74 <__sfp+0x20>
 8004e90:	230c      	movs	r3, #12
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4604      	mov	r4, r0
 8004e96:	4620      	mov	r0, r4
 8004e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <__sfp+0x74>)
 8004e9c:	6665      	str	r5, [r4, #100]	; 0x64
 8004e9e:	e9c4 5500 	strd	r5, r5, [r4]
 8004ea2:	60a5      	str	r5, [r4, #8]
 8004ea4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004ea8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004eac:	2208      	movs	r2, #8
 8004eae:	4629      	mov	r1, r5
 8004eb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004eb4:	f7ff ff3d 	bl	8004d32 <memset>
 8004eb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ebc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ec0:	e7e9      	b.n	8004e96 <__sfp+0x42>
 8004ec2:	bf00      	nop
 8004ec4:	08005ca4 	.word	0x08005ca4
 8004ec8:	ffff0001 	.word	0xffff0001

08004ecc <_fwalk_reent>:
 8004ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ed0:	4680      	mov	r8, r0
 8004ed2:	4689      	mov	r9, r1
 8004ed4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ed8:	2600      	movs	r6, #0
 8004eda:	b914      	cbnz	r4, 8004ee2 <_fwalk_reent+0x16>
 8004edc:	4630      	mov	r0, r6
 8004ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ee2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004ee6:	3f01      	subs	r7, #1
 8004ee8:	d501      	bpl.n	8004eee <_fwalk_reent+0x22>
 8004eea:	6824      	ldr	r4, [r4, #0]
 8004eec:	e7f5      	b.n	8004eda <_fwalk_reent+0xe>
 8004eee:	89ab      	ldrh	r3, [r5, #12]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d907      	bls.n	8004f04 <_fwalk_reent+0x38>
 8004ef4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	d003      	beq.n	8004f04 <_fwalk_reent+0x38>
 8004efc:	4629      	mov	r1, r5
 8004efe:	4640      	mov	r0, r8
 8004f00:	47c8      	blx	r9
 8004f02:	4306      	orrs	r6, r0
 8004f04:	3568      	adds	r5, #104	; 0x68
 8004f06:	e7ee      	b.n	8004ee6 <_fwalk_reent+0x1a>

08004f08 <_malloc_r>:
 8004f08:	b570      	push	{r4, r5, r6, lr}
 8004f0a:	1ccd      	adds	r5, r1, #3
 8004f0c:	f025 0503 	bic.w	r5, r5, #3
 8004f10:	3508      	adds	r5, #8
 8004f12:	2d0c      	cmp	r5, #12
 8004f14:	bf38      	it	cc
 8004f16:	250c      	movcc	r5, #12
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	4606      	mov	r6, r0
 8004f1c:	db01      	blt.n	8004f22 <_malloc_r+0x1a>
 8004f1e:	42a9      	cmp	r1, r5
 8004f20:	d903      	bls.n	8004f2a <_malloc_r+0x22>
 8004f22:	230c      	movs	r3, #12
 8004f24:	6033      	str	r3, [r6, #0]
 8004f26:	2000      	movs	r0, #0
 8004f28:	bd70      	pop	{r4, r5, r6, pc}
 8004f2a:	f000 fd6b 	bl	8005a04 <__malloc_lock>
 8004f2e:	4a21      	ldr	r2, [pc, #132]	; (8004fb4 <_malloc_r+0xac>)
 8004f30:	6814      	ldr	r4, [r2, #0]
 8004f32:	4621      	mov	r1, r4
 8004f34:	b991      	cbnz	r1, 8004f5c <_malloc_r+0x54>
 8004f36:	4c20      	ldr	r4, [pc, #128]	; (8004fb8 <_malloc_r+0xb0>)
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	b91b      	cbnz	r3, 8004f44 <_malloc_r+0x3c>
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f000 fb05 	bl	800554c <_sbrk_r>
 8004f42:	6020      	str	r0, [r4, #0]
 8004f44:	4629      	mov	r1, r5
 8004f46:	4630      	mov	r0, r6
 8004f48:	f000 fb00 	bl	800554c <_sbrk_r>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d124      	bne.n	8004f9a <_malloc_r+0x92>
 8004f50:	230c      	movs	r3, #12
 8004f52:	6033      	str	r3, [r6, #0]
 8004f54:	4630      	mov	r0, r6
 8004f56:	f000 fd56 	bl	8005a06 <__malloc_unlock>
 8004f5a:	e7e4      	b.n	8004f26 <_malloc_r+0x1e>
 8004f5c:	680b      	ldr	r3, [r1, #0]
 8004f5e:	1b5b      	subs	r3, r3, r5
 8004f60:	d418      	bmi.n	8004f94 <_malloc_r+0x8c>
 8004f62:	2b0b      	cmp	r3, #11
 8004f64:	d90f      	bls.n	8004f86 <_malloc_r+0x7e>
 8004f66:	600b      	str	r3, [r1, #0]
 8004f68:	50cd      	str	r5, [r1, r3]
 8004f6a:	18cc      	adds	r4, r1, r3
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f000 fd4a 	bl	8005a06 <__malloc_unlock>
 8004f72:	f104 000b 	add.w	r0, r4, #11
 8004f76:	1d23      	adds	r3, r4, #4
 8004f78:	f020 0007 	bic.w	r0, r0, #7
 8004f7c:	1ac3      	subs	r3, r0, r3
 8004f7e:	d0d3      	beq.n	8004f28 <_malloc_r+0x20>
 8004f80:	425a      	negs	r2, r3
 8004f82:	50e2      	str	r2, [r4, r3]
 8004f84:	e7d0      	b.n	8004f28 <_malloc_r+0x20>
 8004f86:	428c      	cmp	r4, r1
 8004f88:	684b      	ldr	r3, [r1, #4]
 8004f8a:	bf16      	itet	ne
 8004f8c:	6063      	strne	r3, [r4, #4]
 8004f8e:	6013      	streq	r3, [r2, #0]
 8004f90:	460c      	movne	r4, r1
 8004f92:	e7eb      	b.n	8004f6c <_malloc_r+0x64>
 8004f94:	460c      	mov	r4, r1
 8004f96:	6849      	ldr	r1, [r1, #4]
 8004f98:	e7cc      	b.n	8004f34 <_malloc_r+0x2c>
 8004f9a:	1cc4      	adds	r4, r0, #3
 8004f9c:	f024 0403 	bic.w	r4, r4, #3
 8004fa0:	42a0      	cmp	r0, r4
 8004fa2:	d005      	beq.n	8004fb0 <_malloc_r+0xa8>
 8004fa4:	1a21      	subs	r1, r4, r0
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	f000 fad0 	bl	800554c <_sbrk_r>
 8004fac:	3001      	adds	r0, #1
 8004fae:	d0cf      	beq.n	8004f50 <_malloc_r+0x48>
 8004fb0:	6025      	str	r5, [r4, #0]
 8004fb2:	e7db      	b.n	8004f6c <_malloc_r+0x64>
 8004fb4:	20012e04 	.word	0x20012e04
 8004fb8:	20012e08 	.word	0x20012e08

08004fbc <__sfputc_r>:
 8004fbc:	6893      	ldr	r3, [r2, #8]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	b410      	push	{r4}
 8004fc4:	6093      	str	r3, [r2, #8]
 8004fc6:	da08      	bge.n	8004fda <__sfputc_r+0x1e>
 8004fc8:	6994      	ldr	r4, [r2, #24]
 8004fca:	42a3      	cmp	r3, r4
 8004fcc:	db01      	blt.n	8004fd2 <__sfputc_r+0x16>
 8004fce:	290a      	cmp	r1, #10
 8004fd0:	d103      	bne.n	8004fda <__sfputc_r+0x1e>
 8004fd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fd6:	f000 bb0d 	b.w	80055f4 <__swbuf_r>
 8004fda:	6813      	ldr	r3, [r2, #0]
 8004fdc:	1c58      	adds	r0, r3, #1
 8004fde:	6010      	str	r0, [r2, #0]
 8004fe0:	7019      	strb	r1, [r3, #0]
 8004fe2:	4608      	mov	r0, r1
 8004fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <__sfputs_r>:
 8004fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fec:	4606      	mov	r6, r0
 8004fee:	460f      	mov	r7, r1
 8004ff0:	4614      	mov	r4, r2
 8004ff2:	18d5      	adds	r5, r2, r3
 8004ff4:	42ac      	cmp	r4, r5
 8004ff6:	d101      	bne.n	8004ffc <__sfputs_r+0x12>
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	e007      	b.n	800500c <__sfputs_r+0x22>
 8004ffc:	463a      	mov	r2, r7
 8004ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005002:	4630      	mov	r0, r6
 8005004:	f7ff ffda 	bl	8004fbc <__sfputc_r>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d1f3      	bne.n	8004ff4 <__sfputs_r+0xa>
 800500c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005010 <_vfiprintf_r>:
 8005010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	460c      	mov	r4, r1
 8005016:	b09d      	sub	sp, #116	; 0x74
 8005018:	4617      	mov	r7, r2
 800501a:	461d      	mov	r5, r3
 800501c:	4606      	mov	r6, r0
 800501e:	b118      	cbz	r0, 8005028 <_vfiprintf_r+0x18>
 8005020:	6983      	ldr	r3, [r0, #24]
 8005022:	b90b      	cbnz	r3, 8005028 <_vfiprintf_r+0x18>
 8005024:	f7ff fee6 	bl	8004df4 <__sinit>
 8005028:	4b7c      	ldr	r3, [pc, #496]	; (800521c <_vfiprintf_r+0x20c>)
 800502a:	429c      	cmp	r4, r3
 800502c:	d158      	bne.n	80050e0 <_vfiprintf_r+0xd0>
 800502e:	6874      	ldr	r4, [r6, #4]
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	0718      	lsls	r0, r3, #28
 8005034:	d55e      	bpl.n	80050f4 <_vfiprintf_r+0xe4>
 8005036:	6923      	ldr	r3, [r4, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d05b      	beq.n	80050f4 <_vfiprintf_r+0xe4>
 800503c:	2300      	movs	r3, #0
 800503e:	9309      	str	r3, [sp, #36]	; 0x24
 8005040:	2320      	movs	r3, #32
 8005042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005046:	2330      	movs	r3, #48	; 0x30
 8005048:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800504c:	9503      	str	r5, [sp, #12]
 800504e:	f04f 0b01 	mov.w	fp, #1
 8005052:	46b8      	mov	r8, r7
 8005054:	4645      	mov	r5, r8
 8005056:	f815 3b01 	ldrb.w	r3, [r5], #1
 800505a:	b10b      	cbz	r3, 8005060 <_vfiprintf_r+0x50>
 800505c:	2b25      	cmp	r3, #37	; 0x25
 800505e:	d154      	bne.n	800510a <_vfiprintf_r+0xfa>
 8005060:	ebb8 0a07 	subs.w	sl, r8, r7
 8005064:	d00b      	beq.n	800507e <_vfiprintf_r+0x6e>
 8005066:	4653      	mov	r3, sl
 8005068:	463a      	mov	r2, r7
 800506a:	4621      	mov	r1, r4
 800506c:	4630      	mov	r0, r6
 800506e:	f7ff ffbc 	bl	8004fea <__sfputs_r>
 8005072:	3001      	adds	r0, #1
 8005074:	f000 80c2 	beq.w	80051fc <_vfiprintf_r+0x1ec>
 8005078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800507a:	4453      	add	r3, sl
 800507c:	9309      	str	r3, [sp, #36]	; 0x24
 800507e:	f898 3000 	ldrb.w	r3, [r8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 80ba 	beq.w	80051fc <_vfiprintf_r+0x1ec>
 8005088:	2300      	movs	r3, #0
 800508a:	f04f 32ff 	mov.w	r2, #4294967295
 800508e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005092:	9304      	str	r3, [sp, #16]
 8005094:	9307      	str	r3, [sp, #28]
 8005096:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800509a:	931a      	str	r3, [sp, #104]	; 0x68
 800509c:	46a8      	mov	r8, r5
 800509e:	2205      	movs	r2, #5
 80050a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80050a4:	485e      	ldr	r0, [pc, #376]	; (8005220 <_vfiprintf_r+0x210>)
 80050a6:	f7fb f893 	bl	80001d0 <memchr>
 80050aa:	9b04      	ldr	r3, [sp, #16]
 80050ac:	bb78      	cbnz	r0, 800510e <_vfiprintf_r+0xfe>
 80050ae:	06d9      	lsls	r1, r3, #27
 80050b0:	bf44      	itt	mi
 80050b2:	2220      	movmi	r2, #32
 80050b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050b8:	071a      	lsls	r2, r3, #28
 80050ba:	bf44      	itt	mi
 80050bc:	222b      	movmi	r2, #43	; 0x2b
 80050be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050c2:	782a      	ldrb	r2, [r5, #0]
 80050c4:	2a2a      	cmp	r2, #42	; 0x2a
 80050c6:	d02a      	beq.n	800511e <_vfiprintf_r+0x10e>
 80050c8:	9a07      	ldr	r2, [sp, #28]
 80050ca:	46a8      	mov	r8, r5
 80050cc:	2000      	movs	r0, #0
 80050ce:	250a      	movs	r5, #10
 80050d0:	4641      	mov	r1, r8
 80050d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050d6:	3b30      	subs	r3, #48	; 0x30
 80050d8:	2b09      	cmp	r3, #9
 80050da:	d969      	bls.n	80051b0 <_vfiprintf_r+0x1a0>
 80050dc:	b360      	cbz	r0, 8005138 <_vfiprintf_r+0x128>
 80050de:	e024      	b.n	800512a <_vfiprintf_r+0x11a>
 80050e0:	4b50      	ldr	r3, [pc, #320]	; (8005224 <_vfiprintf_r+0x214>)
 80050e2:	429c      	cmp	r4, r3
 80050e4:	d101      	bne.n	80050ea <_vfiprintf_r+0xda>
 80050e6:	68b4      	ldr	r4, [r6, #8]
 80050e8:	e7a2      	b.n	8005030 <_vfiprintf_r+0x20>
 80050ea:	4b4f      	ldr	r3, [pc, #316]	; (8005228 <_vfiprintf_r+0x218>)
 80050ec:	429c      	cmp	r4, r3
 80050ee:	bf08      	it	eq
 80050f0:	68f4      	ldreq	r4, [r6, #12]
 80050f2:	e79d      	b.n	8005030 <_vfiprintf_r+0x20>
 80050f4:	4621      	mov	r1, r4
 80050f6:	4630      	mov	r0, r6
 80050f8:	f000 fae0 	bl	80056bc <__swsetup_r>
 80050fc:	2800      	cmp	r0, #0
 80050fe:	d09d      	beq.n	800503c <_vfiprintf_r+0x2c>
 8005100:	f04f 30ff 	mov.w	r0, #4294967295
 8005104:	b01d      	add	sp, #116	; 0x74
 8005106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800510a:	46a8      	mov	r8, r5
 800510c:	e7a2      	b.n	8005054 <_vfiprintf_r+0x44>
 800510e:	4a44      	ldr	r2, [pc, #272]	; (8005220 <_vfiprintf_r+0x210>)
 8005110:	1a80      	subs	r0, r0, r2
 8005112:	fa0b f000 	lsl.w	r0, fp, r0
 8005116:	4318      	orrs	r0, r3
 8005118:	9004      	str	r0, [sp, #16]
 800511a:	4645      	mov	r5, r8
 800511c:	e7be      	b.n	800509c <_vfiprintf_r+0x8c>
 800511e:	9a03      	ldr	r2, [sp, #12]
 8005120:	1d11      	adds	r1, r2, #4
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	9103      	str	r1, [sp, #12]
 8005126:	2a00      	cmp	r2, #0
 8005128:	db01      	blt.n	800512e <_vfiprintf_r+0x11e>
 800512a:	9207      	str	r2, [sp, #28]
 800512c:	e004      	b.n	8005138 <_vfiprintf_r+0x128>
 800512e:	4252      	negs	r2, r2
 8005130:	f043 0302 	orr.w	r3, r3, #2
 8005134:	9207      	str	r2, [sp, #28]
 8005136:	9304      	str	r3, [sp, #16]
 8005138:	f898 3000 	ldrb.w	r3, [r8]
 800513c:	2b2e      	cmp	r3, #46	; 0x2e
 800513e:	d10e      	bne.n	800515e <_vfiprintf_r+0x14e>
 8005140:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005144:	2b2a      	cmp	r3, #42	; 0x2a
 8005146:	d138      	bne.n	80051ba <_vfiprintf_r+0x1aa>
 8005148:	9b03      	ldr	r3, [sp, #12]
 800514a:	1d1a      	adds	r2, r3, #4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	9203      	str	r2, [sp, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	bfb8      	it	lt
 8005154:	f04f 33ff 	movlt.w	r3, #4294967295
 8005158:	f108 0802 	add.w	r8, r8, #2
 800515c:	9305      	str	r3, [sp, #20]
 800515e:	4d33      	ldr	r5, [pc, #204]	; (800522c <_vfiprintf_r+0x21c>)
 8005160:	f898 1000 	ldrb.w	r1, [r8]
 8005164:	2203      	movs	r2, #3
 8005166:	4628      	mov	r0, r5
 8005168:	f7fb f832 	bl	80001d0 <memchr>
 800516c:	b140      	cbz	r0, 8005180 <_vfiprintf_r+0x170>
 800516e:	2340      	movs	r3, #64	; 0x40
 8005170:	1b40      	subs	r0, r0, r5
 8005172:	fa03 f000 	lsl.w	r0, r3, r0
 8005176:	9b04      	ldr	r3, [sp, #16]
 8005178:	4303      	orrs	r3, r0
 800517a:	f108 0801 	add.w	r8, r8, #1
 800517e:	9304      	str	r3, [sp, #16]
 8005180:	f898 1000 	ldrb.w	r1, [r8]
 8005184:	482a      	ldr	r0, [pc, #168]	; (8005230 <_vfiprintf_r+0x220>)
 8005186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800518a:	2206      	movs	r2, #6
 800518c:	f108 0701 	add.w	r7, r8, #1
 8005190:	f7fb f81e 	bl	80001d0 <memchr>
 8005194:	2800      	cmp	r0, #0
 8005196:	d037      	beq.n	8005208 <_vfiprintf_r+0x1f8>
 8005198:	4b26      	ldr	r3, [pc, #152]	; (8005234 <_vfiprintf_r+0x224>)
 800519a:	bb1b      	cbnz	r3, 80051e4 <_vfiprintf_r+0x1d4>
 800519c:	9b03      	ldr	r3, [sp, #12]
 800519e:	3307      	adds	r3, #7
 80051a0:	f023 0307 	bic.w	r3, r3, #7
 80051a4:	3308      	adds	r3, #8
 80051a6:	9303      	str	r3, [sp, #12]
 80051a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051aa:	444b      	add	r3, r9
 80051ac:	9309      	str	r3, [sp, #36]	; 0x24
 80051ae:	e750      	b.n	8005052 <_vfiprintf_r+0x42>
 80051b0:	fb05 3202 	mla	r2, r5, r2, r3
 80051b4:	2001      	movs	r0, #1
 80051b6:	4688      	mov	r8, r1
 80051b8:	e78a      	b.n	80050d0 <_vfiprintf_r+0xc0>
 80051ba:	2300      	movs	r3, #0
 80051bc:	f108 0801 	add.w	r8, r8, #1
 80051c0:	9305      	str	r3, [sp, #20]
 80051c2:	4619      	mov	r1, r3
 80051c4:	250a      	movs	r5, #10
 80051c6:	4640      	mov	r0, r8
 80051c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051cc:	3a30      	subs	r2, #48	; 0x30
 80051ce:	2a09      	cmp	r2, #9
 80051d0:	d903      	bls.n	80051da <_vfiprintf_r+0x1ca>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0c3      	beq.n	800515e <_vfiprintf_r+0x14e>
 80051d6:	9105      	str	r1, [sp, #20]
 80051d8:	e7c1      	b.n	800515e <_vfiprintf_r+0x14e>
 80051da:	fb05 2101 	mla	r1, r5, r1, r2
 80051de:	2301      	movs	r3, #1
 80051e0:	4680      	mov	r8, r0
 80051e2:	e7f0      	b.n	80051c6 <_vfiprintf_r+0x1b6>
 80051e4:	ab03      	add	r3, sp, #12
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	4622      	mov	r2, r4
 80051ea:	4b13      	ldr	r3, [pc, #76]	; (8005238 <_vfiprintf_r+0x228>)
 80051ec:	a904      	add	r1, sp, #16
 80051ee:	4630      	mov	r0, r6
 80051f0:	f3af 8000 	nop.w
 80051f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80051f8:	4681      	mov	r9, r0
 80051fa:	d1d5      	bne.n	80051a8 <_vfiprintf_r+0x198>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	065b      	lsls	r3, r3, #25
 8005200:	f53f af7e 	bmi.w	8005100 <_vfiprintf_r+0xf0>
 8005204:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005206:	e77d      	b.n	8005104 <_vfiprintf_r+0xf4>
 8005208:	ab03      	add	r3, sp, #12
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	4622      	mov	r2, r4
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <_vfiprintf_r+0x228>)
 8005210:	a904      	add	r1, sp, #16
 8005212:	4630      	mov	r0, r6
 8005214:	f000 f888 	bl	8005328 <_printf_i>
 8005218:	e7ec      	b.n	80051f4 <_vfiprintf_r+0x1e4>
 800521a:	bf00      	nop
 800521c:	08005cc8 	.word	0x08005cc8
 8005220:	08005d08 	.word	0x08005d08
 8005224:	08005ce8 	.word	0x08005ce8
 8005228:	08005ca8 	.word	0x08005ca8
 800522c:	08005d0e 	.word	0x08005d0e
 8005230:	08005d12 	.word	0x08005d12
 8005234:	00000000 	.word	0x00000000
 8005238:	08004feb 	.word	0x08004feb

0800523c <_printf_common>:
 800523c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005240:	4691      	mov	r9, r2
 8005242:	461f      	mov	r7, r3
 8005244:	688a      	ldr	r2, [r1, #8]
 8005246:	690b      	ldr	r3, [r1, #16]
 8005248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800524c:	4293      	cmp	r3, r2
 800524e:	bfb8      	it	lt
 8005250:	4613      	movlt	r3, r2
 8005252:	f8c9 3000 	str.w	r3, [r9]
 8005256:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800525a:	4606      	mov	r6, r0
 800525c:	460c      	mov	r4, r1
 800525e:	b112      	cbz	r2, 8005266 <_printf_common+0x2a>
 8005260:	3301      	adds	r3, #1
 8005262:	f8c9 3000 	str.w	r3, [r9]
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	0699      	lsls	r1, r3, #26
 800526a:	bf42      	ittt	mi
 800526c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005270:	3302      	addmi	r3, #2
 8005272:	f8c9 3000 	strmi.w	r3, [r9]
 8005276:	6825      	ldr	r5, [r4, #0]
 8005278:	f015 0506 	ands.w	r5, r5, #6
 800527c:	d107      	bne.n	800528e <_printf_common+0x52>
 800527e:	f104 0a19 	add.w	sl, r4, #25
 8005282:	68e3      	ldr	r3, [r4, #12]
 8005284:	f8d9 2000 	ldr.w	r2, [r9]
 8005288:	1a9b      	subs	r3, r3, r2
 800528a:	42ab      	cmp	r3, r5
 800528c:	dc28      	bgt.n	80052e0 <_printf_common+0xa4>
 800528e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	3300      	adds	r3, #0
 8005296:	bf18      	it	ne
 8005298:	2301      	movne	r3, #1
 800529a:	0692      	lsls	r2, r2, #26
 800529c:	d42d      	bmi.n	80052fa <_printf_common+0xbe>
 800529e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052a2:	4639      	mov	r1, r7
 80052a4:	4630      	mov	r0, r6
 80052a6:	47c0      	blx	r8
 80052a8:	3001      	adds	r0, #1
 80052aa:	d020      	beq.n	80052ee <_printf_common+0xb2>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	68e5      	ldr	r5, [r4, #12]
 80052b0:	f8d9 2000 	ldr.w	r2, [r9]
 80052b4:	f003 0306 	and.w	r3, r3, #6
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	bf08      	it	eq
 80052bc:	1aad      	subeq	r5, r5, r2
 80052be:	68a3      	ldr	r3, [r4, #8]
 80052c0:	6922      	ldr	r2, [r4, #16]
 80052c2:	bf0c      	ite	eq
 80052c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052c8:	2500      	movne	r5, #0
 80052ca:	4293      	cmp	r3, r2
 80052cc:	bfc4      	itt	gt
 80052ce:	1a9b      	subgt	r3, r3, r2
 80052d0:	18ed      	addgt	r5, r5, r3
 80052d2:	f04f 0900 	mov.w	r9, #0
 80052d6:	341a      	adds	r4, #26
 80052d8:	454d      	cmp	r5, r9
 80052da:	d11a      	bne.n	8005312 <_printf_common+0xd6>
 80052dc:	2000      	movs	r0, #0
 80052de:	e008      	b.n	80052f2 <_printf_common+0xb6>
 80052e0:	2301      	movs	r3, #1
 80052e2:	4652      	mov	r2, sl
 80052e4:	4639      	mov	r1, r7
 80052e6:	4630      	mov	r0, r6
 80052e8:	47c0      	blx	r8
 80052ea:	3001      	adds	r0, #1
 80052ec:	d103      	bne.n	80052f6 <_printf_common+0xba>
 80052ee:	f04f 30ff 	mov.w	r0, #4294967295
 80052f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f6:	3501      	adds	r5, #1
 80052f8:	e7c3      	b.n	8005282 <_printf_common+0x46>
 80052fa:	18e1      	adds	r1, r4, r3
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	2030      	movs	r0, #48	; 0x30
 8005300:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005304:	4422      	add	r2, r4
 8005306:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800530a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800530e:	3302      	adds	r3, #2
 8005310:	e7c5      	b.n	800529e <_printf_common+0x62>
 8005312:	2301      	movs	r3, #1
 8005314:	4622      	mov	r2, r4
 8005316:	4639      	mov	r1, r7
 8005318:	4630      	mov	r0, r6
 800531a:	47c0      	blx	r8
 800531c:	3001      	adds	r0, #1
 800531e:	d0e6      	beq.n	80052ee <_printf_common+0xb2>
 8005320:	f109 0901 	add.w	r9, r9, #1
 8005324:	e7d8      	b.n	80052d8 <_printf_common+0x9c>
	...

08005328 <_printf_i>:
 8005328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800532c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005330:	460c      	mov	r4, r1
 8005332:	7e09      	ldrb	r1, [r1, #24]
 8005334:	b085      	sub	sp, #20
 8005336:	296e      	cmp	r1, #110	; 0x6e
 8005338:	4617      	mov	r7, r2
 800533a:	4606      	mov	r6, r0
 800533c:	4698      	mov	r8, r3
 800533e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005340:	f000 80b3 	beq.w	80054aa <_printf_i+0x182>
 8005344:	d822      	bhi.n	800538c <_printf_i+0x64>
 8005346:	2963      	cmp	r1, #99	; 0x63
 8005348:	d036      	beq.n	80053b8 <_printf_i+0x90>
 800534a:	d80a      	bhi.n	8005362 <_printf_i+0x3a>
 800534c:	2900      	cmp	r1, #0
 800534e:	f000 80b9 	beq.w	80054c4 <_printf_i+0x19c>
 8005352:	2958      	cmp	r1, #88	; 0x58
 8005354:	f000 8083 	beq.w	800545e <_printf_i+0x136>
 8005358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800535c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005360:	e032      	b.n	80053c8 <_printf_i+0xa0>
 8005362:	2964      	cmp	r1, #100	; 0x64
 8005364:	d001      	beq.n	800536a <_printf_i+0x42>
 8005366:	2969      	cmp	r1, #105	; 0x69
 8005368:	d1f6      	bne.n	8005358 <_printf_i+0x30>
 800536a:	6820      	ldr	r0, [r4, #0]
 800536c:	6813      	ldr	r3, [r2, #0]
 800536e:	0605      	lsls	r5, r0, #24
 8005370:	f103 0104 	add.w	r1, r3, #4
 8005374:	d52a      	bpl.n	80053cc <_printf_i+0xa4>
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6011      	str	r1, [r2, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	da03      	bge.n	8005386 <_printf_i+0x5e>
 800537e:	222d      	movs	r2, #45	; 0x2d
 8005380:	425b      	negs	r3, r3
 8005382:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005386:	486f      	ldr	r0, [pc, #444]	; (8005544 <_printf_i+0x21c>)
 8005388:	220a      	movs	r2, #10
 800538a:	e039      	b.n	8005400 <_printf_i+0xd8>
 800538c:	2973      	cmp	r1, #115	; 0x73
 800538e:	f000 809d 	beq.w	80054cc <_printf_i+0x1a4>
 8005392:	d808      	bhi.n	80053a6 <_printf_i+0x7e>
 8005394:	296f      	cmp	r1, #111	; 0x6f
 8005396:	d020      	beq.n	80053da <_printf_i+0xb2>
 8005398:	2970      	cmp	r1, #112	; 0x70
 800539a:	d1dd      	bne.n	8005358 <_printf_i+0x30>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	f043 0320 	orr.w	r3, r3, #32
 80053a2:	6023      	str	r3, [r4, #0]
 80053a4:	e003      	b.n	80053ae <_printf_i+0x86>
 80053a6:	2975      	cmp	r1, #117	; 0x75
 80053a8:	d017      	beq.n	80053da <_printf_i+0xb2>
 80053aa:	2978      	cmp	r1, #120	; 0x78
 80053ac:	d1d4      	bne.n	8005358 <_printf_i+0x30>
 80053ae:	2378      	movs	r3, #120	; 0x78
 80053b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053b4:	4864      	ldr	r0, [pc, #400]	; (8005548 <_printf_i+0x220>)
 80053b6:	e055      	b.n	8005464 <_printf_i+0x13c>
 80053b8:	6813      	ldr	r3, [r2, #0]
 80053ba:	1d19      	adds	r1, r3, #4
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6011      	str	r1, [r2, #0]
 80053c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053c8:	2301      	movs	r3, #1
 80053ca:	e08c      	b.n	80054e6 <_printf_i+0x1be>
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	6011      	str	r1, [r2, #0]
 80053d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053d4:	bf18      	it	ne
 80053d6:	b21b      	sxthne	r3, r3
 80053d8:	e7cf      	b.n	800537a <_printf_i+0x52>
 80053da:	6813      	ldr	r3, [r2, #0]
 80053dc:	6825      	ldr	r5, [r4, #0]
 80053de:	1d18      	adds	r0, r3, #4
 80053e0:	6010      	str	r0, [r2, #0]
 80053e2:	0628      	lsls	r0, r5, #24
 80053e4:	d501      	bpl.n	80053ea <_printf_i+0xc2>
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	e002      	b.n	80053f0 <_printf_i+0xc8>
 80053ea:	0668      	lsls	r0, r5, #25
 80053ec:	d5fb      	bpl.n	80053e6 <_printf_i+0xbe>
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	4854      	ldr	r0, [pc, #336]	; (8005544 <_printf_i+0x21c>)
 80053f2:	296f      	cmp	r1, #111	; 0x6f
 80053f4:	bf14      	ite	ne
 80053f6:	220a      	movne	r2, #10
 80053f8:	2208      	moveq	r2, #8
 80053fa:	2100      	movs	r1, #0
 80053fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005400:	6865      	ldr	r5, [r4, #4]
 8005402:	60a5      	str	r5, [r4, #8]
 8005404:	2d00      	cmp	r5, #0
 8005406:	f2c0 8095 	blt.w	8005534 <_printf_i+0x20c>
 800540a:	6821      	ldr	r1, [r4, #0]
 800540c:	f021 0104 	bic.w	r1, r1, #4
 8005410:	6021      	str	r1, [r4, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d13d      	bne.n	8005492 <_printf_i+0x16a>
 8005416:	2d00      	cmp	r5, #0
 8005418:	f040 808e 	bne.w	8005538 <_printf_i+0x210>
 800541c:	4665      	mov	r5, ip
 800541e:	2a08      	cmp	r2, #8
 8005420:	d10b      	bne.n	800543a <_printf_i+0x112>
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	07db      	lsls	r3, r3, #31
 8005426:	d508      	bpl.n	800543a <_printf_i+0x112>
 8005428:	6923      	ldr	r3, [r4, #16]
 800542a:	6862      	ldr	r2, [r4, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	bfde      	ittt	le
 8005430:	2330      	movle	r3, #48	; 0x30
 8005432:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005436:	f105 35ff 	addle.w	r5, r5, #4294967295
 800543a:	ebac 0305 	sub.w	r3, ip, r5
 800543e:	6123      	str	r3, [r4, #16]
 8005440:	f8cd 8000 	str.w	r8, [sp]
 8005444:	463b      	mov	r3, r7
 8005446:	aa03      	add	r2, sp, #12
 8005448:	4621      	mov	r1, r4
 800544a:	4630      	mov	r0, r6
 800544c:	f7ff fef6 	bl	800523c <_printf_common>
 8005450:	3001      	adds	r0, #1
 8005452:	d14d      	bne.n	80054f0 <_printf_i+0x1c8>
 8005454:	f04f 30ff 	mov.w	r0, #4294967295
 8005458:	b005      	add	sp, #20
 800545a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800545e:	4839      	ldr	r0, [pc, #228]	; (8005544 <_printf_i+0x21c>)
 8005460:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005464:	6813      	ldr	r3, [r2, #0]
 8005466:	6821      	ldr	r1, [r4, #0]
 8005468:	1d1d      	adds	r5, r3, #4
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6015      	str	r5, [r2, #0]
 800546e:	060a      	lsls	r2, r1, #24
 8005470:	d50b      	bpl.n	800548a <_printf_i+0x162>
 8005472:	07ca      	lsls	r2, r1, #31
 8005474:	bf44      	itt	mi
 8005476:	f041 0120 	orrmi.w	r1, r1, #32
 800547a:	6021      	strmi	r1, [r4, #0]
 800547c:	b91b      	cbnz	r3, 8005486 <_printf_i+0x15e>
 800547e:	6822      	ldr	r2, [r4, #0]
 8005480:	f022 0220 	bic.w	r2, r2, #32
 8005484:	6022      	str	r2, [r4, #0]
 8005486:	2210      	movs	r2, #16
 8005488:	e7b7      	b.n	80053fa <_printf_i+0xd2>
 800548a:	064d      	lsls	r5, r1, #25
 800548c:	bf48      	it	mi
 800548e:	b29b      	uxthmi	r3, r3
 8005490:	e7ef      	b.n	8005472 <_printf_i+0x14a>
 8005492:	4665      	mov	r5, ip
 8005494:	fbb3 f1f2 	udiv	r1, r3, r2
 8005498:	fb02 3311 	mls	r3, r2, r1, r3
 800549c:	5cc3      	ldrb	r3, [r0, r3]
 800549e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80054a2:	460b      	mov	r3, r1
 80054a4:	2900      	cmp	r1, #0
 80054a6:	d1f5      	bne.n	8005494 <_printf_i+0x16c>
 80054a8:	e7b9      	b.n	800541e <_printf_i+0xf6>
 80054aa:	6813      	ldr	r3, [r2, #0]
 80054ac:	6825      	ldr	r5, [r4, #0]
 80054ae:	6961      	ldr	r1, [r4, #20]
 80054b0:	1d18      	adds	r0, r3, #4
 80054b2:	6010      	str	r0, [r2, #0]
 80054b4:	0628      	lsls	r0, r5, #24
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	d501      	bpl.n	80054be <_printf_i+0x196>
 80054ba:	6019      	str	r1, [r3, #0]
 80054bc:	e002      	b.n	80054c4 <_printf_i+0x19c>
 80054be:	066a      	lsls	r2, r5, #25
 80054c0:	d5fb      	bpl.n	80054ba <_printf_i+0x192>
 80054c2:	8019      	strh	r1, [r3, #0]
 80054c4:	2300      	movs	r3, #0
 80054c6:	6123      	str	r3, [r4, #16]
 80054c8:	4665      	mov	r5, ip
 80054ca:	e7b9      	b.n	8005440 <_printf_i+0x118>
 80054cc:	6813      	ldr	r3, [r2, #0]
 80054ce:	1d19      	adds	r1, r3, #4
 80054d0:	6011      	str	r1, [r2, #0]
 80054d2:	681d      	ldr	r5, [r3, #0]
 80054d4:	6862      	ldr	r2, [r4, #4]
 80054d6:	2100      	movs	r1, #0
 80054d8:	4628      	mov	r0, r5
 80054da:	f7fa fe79 	bl	80001d0 <memchr>
 80054de:	b108      	cbz	r0, 80054e4 <_printf_i+0x1bc>
 80054e0:	1b40      	subs	r0, r0, r5
 80054e2:	6060      	str	r0, [r4, #4]
 80054e4:	6863      	ldr	r3, [r4, #4]
 80054e6:	6123      	str	r3, [r4, #16]
 80054e8:	2300      	movs	r3, #0
 80054ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ee:	e7a7      	b.n	8005440 <_printf_i+0x118>
 80054f0:	6923      	ldr	r3, [r4, #16]
 80054f2:	462a      	mov	r2, r5
 80054f4:	4639      	mov	r1, r7
 80054f6:	4630      	mov	r0, r6
 80054f8:	47c0      	blx	r8
 80054fa:	3001      	adds	r0, #1
 80054fc:	d0aa      	beq.n	8005454 <_printf_i+0x12c>
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	079b      	lsls	r3, r3, #30
 8005502:	d413      	bmi.n	800552c <_printf_i+0x204>
 8005504:	68e0      	ldr	r0, [r4, #12]
 8005506:	9b03      	ldr	r3, [sp, #12]
 8005508:	4298      	cmp	r0, r3
 800550a:	bfb8      	it	lt
 800550c:	4618      	movlt	r0, r3
 800550e:	e7a3      	b.n	8005458 <_printf_i+0x130>
 8005510:	2301      	movs	r3, #1
 8005512:	464a      	mov	r2, r9
 8005514:	4639      	mov	r1, r7
 8005516:	4630      	mov	r0, r6
 8005518:	47c0      	blx	r8
 800551a:	3001      	adds	r0, #1
 800551c:	d09a      	beq.n	8005454 <_printf_i+0x12c>
 800551e:	3501      	adds	r5, #1
 8005520:	68e3      	ldr	r3, [r4, #12]
 8005522:	9a03      	ldr	r2, [sp, #12]
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	42ab      	cmp	r3, r5
 8005528:	dcf2      	bgt.n	8005510 <_printf_i+0x1e8>
 800552a:	e7eb      	b.n	8005504 <_printf_i+0x1dc>
 800552c:	2500      	movs	r5, #0
 800552e:	f104 0919 	add.w	r9, r4, #25
 8005532:	e7f5      	b.n	8005520 <_printf_i+0x1f8>
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1ac      	bne.n	8005492 <_printf_i+0x16a>
 8005538:	7803      	ldrb	r3, [r0, #0]
 800553a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800553e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005542:	e76c      	b.n	800541e <_printf_i+0xf6>
 8005544:	08005d19 	.word	0x08005d19
 8005548:	08005d2a 	.word	0x08005d2a

0800554c <_sbrk_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	4c06      	ldr	r4, [pc, #24]	; (8005568 <_sbrk_r+0x1c>)
 8005550:	2300      	movs	r3, #0
 8005552:	4605      	mov	r5, r0
 8005554:	4608      	mov	r0, r1
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	f000 fad8 	bl	8005b0c <_sbrk>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_sbrk_r+0x1a>
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	b103      	cbz	r3, 8005566 <_sbrk_r+0x1a>
 8005564:	602b      	str	r3, [r5, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	20012e94 	.word	0x20012e94

0800556c <__sread>:
 800556c:	b510      	push	{r4, lr}
 800556e:	460c      	mov	r4, r1
 8005570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005574:	f000 fa96 	bl	8005aa4 <_read_r>
 8005578:	2800      	cmp	r0, #0
 800557a:	bfab      	itete	ge
 800557c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800557e:	89a3      	ldrhlt	r3, [r4, #12]
 8005580:	181b      	addge	r3, r3, r0
 8005582:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005586:	bfac      	ite	ge
 8005588:	6563      	strge	r3, [r4, #84]	; 0x54
 800558a:	81a3      	strhlt	r3, [r4, #12]
 800558c:	bd10      	pop	{r4, pc}

0800558e <__swrite>:
 800558e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005592:	461f      	mov	r7, r3
 8005594:	898b      	ldrh	r3, [r1, #12]
 8005596:	05db      	lsls	r3, r3, #23
 8005598:	4605      	mov	r5, r0
 800559a:	460c      	mov	r4, r1
 800559c:	4616      	mov	r6, r2
 800559e:	d505      	bpl.n	80055ac <__swrite+0x1e>
 80055a0:	2302      	movs	r3, #2
 80055a2:	2200      	movs	r2, #0
 80055a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a8:	f000 f9b6 	bl	8005918 <_lseek_r>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	4632      	mov	r2, r6
 80055ba:	463b      	mov	r3, r7
 80055bc:	4628      	mov	r0, r5
 80055be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055c2:	f000 b869 	b.w	8005698 <_write_r>

080055c6 <__sseek>:
 80055c6:	b510      	push	{r4, lr}
 80055c8:	460c      	mov	r4, r1
 80055ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ce:	f000 f9a3 	bl	8005918 <_lseek_r>
 80055d2:	1c43      	adds	r3, r0, #1
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	bf15      	itete	ne
 80055d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80055da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055e2:	81a3      	strheq	r3, [r4, #12]
 80055e4:	bf18      	it	ne
 80055e6:	81a3      	strhne	r3, [r4, #12]
 80055e8:	bd10      	pop	{r4, pc}

080055ea <__sclose>:
 80055ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ee:	f000 b8d3 	b.w	8005798 <_close_r>
	...

080055f4 <__swbuf_r>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	460e      	mov	r6, r1
 80055f8:	4614      	mov	r4, r2
 80055fa:	4605      	mov	r5, r0
 80055fc:	b118      	cbz	r0, 8005606 <__swbuf_r+0x12>
 80055fe:	6983      	ldr	r3, [r0, #24]
 8005600:	b90b      	cbnz	r3, 8005606 <__swbuf_r+0x12>
 8005602:	f7ff fbf7 	bl	8004df4 <__sinit>
 8005606:	4b21      	ldr	r3, [pc, #132]	; (800568c <__swbuf_r+0x98>)
 8005608:	429c      	cmp	r4, r3
 800560a:	d12a      	bne.n	8005662 <__swbuf_r+0x6e>
 800560c:	686c      	ldr	r4, [r5, #4]
 800560e:	69a3      	ldr	r3, [r4, #24]
 8005610:	60a3      	str	r3, [r4, #8]
 8005612:	89a3      	ldrh	r3, [r4, #12]
 8005614:	071a      	lsls	r2, r3, #28
 8005616:	d52e      	bpl.n	8005676 <__swbuf_r+0x82>
 8005618:	6923      	ldr	r3, [r4, #16]
 800561a:	b363      	cbz	r3, 8005676 <__swbuf_r+0x82>
 800561c:	6923      	ldr	r3, [r4, #16]
 800561e:	6820      	ldr	r0, [r4, #0]
 8005620:	1ac0      	subs	r0, r0, r3
 8005622:	6963      	ldr	r3, [r4, #20]
 8005624:	b2f6      	uxtb	r6, r6
 8005626:	4283      	cmp	r3, r0
 8005628:	4637      	mov	r7, r6
 800562a:	dc04      	bgt.n	8005636 <__swbuf_r+0x42>
 800562c:	4621      	mov	r1, r4
 800562e:	4628      	mov	r0, r5
 8005630:	f000 f948 	bl	80058c4 <_fflush_r>
 8005634:	bb28      	cbnz	r0, 8005682 <__swbuf_r+0x8e>
 8005636:	68a3      	ldr	r3, [r4, #8]
 8005638:	3b01      	subs	r3, #1
 800563a:	60a3      	str	r3, [r4, #8]
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	6022      	str	r2, [r4, #0]
 8005642:	701e      	strb	r6, [r3, #0]
 8005644:	6963      	ldr	r3, [r4, #20]
 8005646:	3001      	adds	r0, #1
 8005648:	4283      	cmp	r3, r0
 800564a:	d004      	beq.n	8005656 <__swbuf_r+0x62>
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	07db      	lsls	r3, r3, #31
 8005650:	d519      	bpl.n	8005686 <__swbuf_r+0x92>
 8005652:	2e0a      	cmp	r6, #10
 8005654:	d117      	bne.n	8005686 <__swbuf_r+0x92>
 8005656:	4621      	mov	r1, r4
 8005658:	4628      	mov	r0, r5
 800565a:	f000 f933 	bl	80058c4 <_fflush_r>
 800565e:	b190      	cbz	r0, 8005686 <__swbuf_r+0x92>
 8005660:	e00f      	b.n	8005682 <__swbuf_r+0x8e>
 8005662:	4b0b      	ldr	r3, [pc, #44]	; (8005690 <__swbuf_r+0x9c>)
 8005664:	429c      	cmp	r4, r3
 8005666:	d101      	bne.n	800566c <__swbuf_r+0x78>
 8005668:	68ac      	ldr	r4, [r5, #8]
 800566a:	e7d0      	b.n	800560e <__swbuf_r+0x1a>
 800566c:	4b09      	ldr	r3, [pc, #36]	; (8005694 <__swbuf_r+0xa0>)
 800566e:	429c      	cmp	r4, r3
 8005670:	bf08      	it	eq
 8005672:	68ec      	ldreq	r4, [r5, #12]
 8005674:	e7cb      	b.n	800560e <__swbuf_r+0x1a>
 8005676:	4621      	mov	r1, r4
 8005678:	4628      	mov	r0, r5
 800567a:	f000 f81f 	bl	80056bc <__swsetup_r>
 800567e:	2800      	cmp	r0, #0
 8005680:	d0cc      	beq.n	800561c <__swbuf_r+0x28>
 8005682:	f04f 37ff 	mov.w	r7, #4294967295
 8005686:	4638      	mov	r0, r7
 8005688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800568a:	bf00      	nop
 800568c:	08005cc8 	.word	0x08005cc8
 8005690:	08005ce8 	.word	0x08005ce8
 8005694:	08005ca8 	.word	0x08005ca8

08005698 <_write_r>:
 8005698:	b538      	push	{r3, r4, r5, lr}
 800569a:	4c07      	ldr	r4, [pc, #28]	; (80056b8 <_write_r+0x20>)
 800569c:	4605      	mov	r5, r0
 800569e:	4608      	mov	r0, r1
 80056a0:	4611      	mov	r1, r2
 80056a2:	2200      	movs	r2, #0
 80056a4:	6022      	str	r2, [r4, #0]
 80056a6:	461a      	mov	r2, r3
 80056a8:	f7fc fcd7 	bl	800205a <_write>
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	d102      	bne.n	80056b6 <_write_r+0x1e>
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	b103      	cbz	r3, 80056b6 <_write_r+0x1e>
 80056b4:	602b      	str	r3, [r5, #0]
 80056b6:	bd38      	pop	{r3, r4, r5, pc}
 80056b8:	20012e94 	.word	0x20012e94

080056bc <__swsetup_r>:
 80056bc:	4b32      	ldr	r3, [pc, #200]	; (8005788 <__swsetup_r+0xcc>)
 80056be:	b570      	push	{r4, r5, r6, lr}
 80056c0:	681d      	ldr	r5, [r3, #0]
 80056c2:	4606      	mov	r6, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	b125      	cbz	r5, 80056d2 <__swsetup_r+0x16>
 80056c8:	69ab      	ldr	r3, [r5, #24]
 80056ca:	b913      	cbnz	r3, 80056d2 <__swsetup_r+0x16>
 80056cc:	4628      	mov	r0, r5
 80056ce:	f7ff fb91 	bl	8004df4 <__sinit>
 80056d2:	4b2e      	ldr	r3, [pc, #184]	; (800578c <__swsetup_r+0xd0>)
 80056d4:	429c      	cmp	r4, r3
 80056d6:	d10f      	bne.n	80056f8 <__swsetup_r+0x3c>
 80056d8:	686c      	ldr	r4, [r5, #4]
 80056da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056de:	b29a      	uxth	r2, r3
 80056e0:	0715      	lsls	r5, r2, #28
 80056e2:	d42c      	bmi.n	800573e <__swsetup_r+0x82>
 80056e4:	06d0      	lsls	r0, r2, #27
 80056e6:	d411      	bmi.n	800570c <__swsetup_r+0x50>
 80056e8:	2209      	movs	r2, #9
 80056ea:	6032      	str	r2, [r6, #0]
 80056ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f0:	81a3      	strh	r3, [r4, #12]
 80056f2:	f04f 30ff 	mov.w	r0, #4294967295
 80056f6:	e03e      	b.n	8005776 <__swsetup_r+0xba>
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <__swsetup_r+0xd4>)
 80056fa:	429c      	cmp	r4, r3
 80056fc:	d101      	bne.n	8005702 <__swsetup_r+0x46>
 80056fe:	68ac      	ldr	r4, [r5, #8]
 8005700:	e7eb      	b.n	80056da <__swsetup_r+0x1e>
 8005702:	4b24      	ldr	r3, [pc, #144]	; (8005794 <__swsetup_r+0xd8>)
 8005704:	429c      	cmp	r4, r3
 8005706:	bf08      	it	eq
 8005708:	68ec      	ldreq	r4, [r5, #12]
 800570a:	e7e6      	b.n	80056da <__swsetup_r+0x1e>
 800570c:	0751      	lsls	r1, r2, #29
 800570e:	d512      	bpl.n	8005736 <__swsetup_r+0x7a>
 8005710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005712:	b141      	cbz	r1, 8005726 <__swsetup_r+0x6a>
 8005714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005718:	4299      	cmp	r1, r3
 800571a:	d002      	beq.n	8005722 <__swsetup_r+0x66>
 800571c:	4630      	mov	r0, r6
 800571e:	f000 f973 	bl	8005a08 <_free_r>
 8005722:	2300      	movs	r3, #0
 8005724:	6363      	str	r3, [r4, #52]	; 0x34
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	2300      	movs	r3, #0
 8005730:	6063      	str	r3, [r4, #4]
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	f043 0308 	orr.w	r3, r3, #8
 800573c:	81a3      	strh	r3, [r4, #12]
 800573e:	6923      	ldr	r3, [r4, #16]
 8005740:	b94b      	cbnz	r3, 8005756 <__swsetup_r+0x9a>
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574c:	d003      	beq.n	8005756 <__swsetup_r+0x9a>
 800574e:	4621      	mov	r1, r4
 8005750:	4630      	mov	r0, r6
 8005752:	f000 f917 	bl	8005984 <__smakebuf_r>
 8005756:	89a2      	ldrh	r2, [r4, #12]
 8005758:	f012 0301 	ands.w	r3, r2, #1
 800575c:	d00c      	beq.n	8005778 <__swsetup_r+0xbc>
 800575e:	2300      	movs	r3, #0
 8005760:	60a3      	str	r3, [r4, #8]
 8005762:	6963      	ldr	r3, [r4, #20]
 8005764:	425b      	negs	r3, r3
 8005766:	61a3      	str	r3, [r4, #24]
 8005768:	6923      	ldr	r3, [r4, #16]
 800576a:	b953      	cbnz	r3, 8005782 <__swsetup_r+0xc6>
 800576c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005770:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005774:	d1ba      	bne.n	80056ec <__swsetup_r+0x30>
 8005776:	bd70      	pop	{r4, r5, r6, pc}
 8005778:	0792      	lsls	r2, r2, #30
 800577a:	bf58      	it	pl
 800577c:	6963      	ldrpl	r3, [r4, #20]
 800577e:	60a3      	str	r3, [r4, #8]
 8005780:	e7f2      	b.n	8005768 <__swsetup_r+0xac>
 8005782:	2000      	movs	r0, #0
 8005784:	e7f7      	b.n	8005776 <__swsetup_r+0xba>
 8005786:	bf00      	nop
 8005788:	20000014 	.word	0x20000014
 800578c:	08005cc8 	.word	0x08005cc8
 8005790:	08005ce8 	.word	0x08005ce8
 8005794:	08005ca8 	.word	0x08005ca8

08005798 <_close_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4c06      	ldr	r4, [pc, #24]	; (80057b4 <_close_r+0x1c>)
 800579c:	2300      	movs	r3, #0
 800579e:	4605      	mov	r5, r0
 80057a0:	4608      	mov	r0, r1
 80057a2:	6023      	str	r3, [r4, #0]
 80057a4:	f7fc fc75 	bl	8002092 <_close>
 80057a8:	1c43      	adds	r3, r0, #1
 80057aa:	d102      	bne.n	80057b2 <_close_r+0x1a>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	b103      	cbz	r3, 80057b2 <_close_r+0x1a>
 80057b0:	602b      	str	r3, [r5, #0]
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	20012e94 	.word	0x20012e94

080057b8 <__sflush_r>:
 80057b8:	898a      	ldrh	r2, [r1, #12]
 80057ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057be:	4605      	mov	r5, r0
 80057c0:	0710      	lsls	r0, r2, #28
 80057c2:	460c      	mov	r4, r1
 80057c4:	d458      	bmi.n	8005878 <__sflush_r+0xc0>
 80057c6:	684b      	ldr	r3, [r1, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	dc05      	bgt.n	80057d8 <__sflush_r+0x20>
 80057cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	dc02      	bgt.n	80057d8 <__sflush_r+0x20>
 80057d2:	2000      	movs	r0, #0
 80057d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057da:	2e00      	cmp	r6, #0
 80057dc:	d0f9      	beq.n	80057d2 <__sflush_r+0x1a>
 80057de:	2300      	movs	r3, #0
 80057e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057e4:	682f      	ldr	r7, [r5, #0]
 80057e6:	6a21      	ldr	r1, [r4, #32]
 80057e8:	602b      	str	r3, [r5, #0]
 80057ea:	d032      	beq.n	8005852 <__sflush_r+0x9a>
 80057ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057ee:	89a3      	ldrh	r3, [r4, #12]
 80057f0:	075a      	lsls	r2, r3, #29
 80057f2:	d505      	bpl.n	8005800 <__sflush_r+0x48>
 80057f4:	6863      	ldr	r3, [r4, #4]
 80057f6:	1ac0      	subs	r0, r0, r3
 80057f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057fa:	b10b      	cbz	r3, 8005800 <__sflush_r+0x48>
 80057fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057fe:	1ac0      	subs	r0, r0, r3
 8005800:	2300      	movs	r3, #0
 8005802:	4602      	mov	r2, r0
 8005804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005806:	6a21      	ldr	r1, [r4, #32]
 8005808:	4628      	mov	r0, r5
 800580a:	47b0      	blx	r6
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	89a3      	ldrh	r3, [r4, #12]
 8005810:	d106      	bne.n	8005820 <__sflush_r+0x68>
 8005812:	6829      	ldr	r1, [r5, #0]
 8005814:	291d      	cmp	r1, #29
 8005816:	d848      	bhi.n	80058aa <__sflush_r+0xf2>
 8005818:	4a29      	ldr	r2, [pc, #164]	; (80058c0 <__sflush_r+0x108>)
 800581a:	40ca      	lsrs	r2, r1
 800581c:	07d6      	lsls	r6, r2, #31
 800581e:	d544      	bpl.n	80058aa <__sflush_r+0xf2>
 8005820:	2200      	movs	r2, #0
 8005822:	6062      	str	r2, [r4, #4]
 8005824:	04d9      	lsls	r1, r3, #19
 8005826:	6922      	ldr	r2, [r4, #16]
 8005828:	6022      	str	r2, [r4, #0]
 800582a:	d504      	bpl.n	8005836 <__sflush_r+0x7e>
 800582c:	1c42      	adds	r2, r0, #1
 800582e:	d101      	bne.n	8005834 <__sflush_r+0x7c>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b903      	cbnz	r3, 8005836 <__sflush_r+0x7e>
 8005834:	6560      	str	r0, [r4, #84]	; 0x54
 8005836:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005838:	602f      	str	r7, [r5, #0]
 800583a:	2900      	cmp	r1, #0
 800583c:	d0c9      	beq.n	80057d2 <__sflush_r+0x1a>
 800583e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005842:	4299      	cmp	r1, r3
 8005844:	d002      	beq.n	800584c <__sflush_r+0x94>
 8005846:	4628      	mov	r0, r5
 8005848:	f000 f8de 	bl	8005a08 <_free_r>
 800584c:	2000      	movs	r0, #0
 800584e:	6360      	str	r0, [r4, #52]	; 0x34
 8005850:	e7c0      	b.n	80057d4 <__sflush_r+0x1c>
 8005852:	2301      	movs	r3, #1
 8005854:	4628      	mov	r0, r5
 8005856:	47b0      	blx	r6
 8005858:	1c41      	adds	r1, r0, #1
 800585a:	d1c8      	bne.n	80057ee <__sflush_r+0x36>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0c5      	beq.n	80057ee <__sflush_r+0x36>
 8005862:	2b1d      	cmp	r3, #29
 8005864:	d001      	beq.n	800586a <__sflush_r+0xb2>
 8005866:	2b16      	cmp	r3, #22
 8005868:	d101      	bne.n	800586e <__sflush_r+0xb6>
 800586a:	602f      	str	r7, [r5, #0]
 800586c:	e7b1      	b.n	80057d2 <__sflush_r+0x1a>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005874:	81a3      	strh	r3, [r4, #12]
 8005876:	e7ad      	b.n	80057d4 <__sflush_r+0x1c>
 8005878:	690f      	ldr	r7, [r1, #16]
 800587a:	2f00      	cmp	r7, #0
 800587c:	d0a9      	beq.n	80057d2 <__sflush_r+0x1a>
 800587e:	0793      	lsls	r3, r2, #30
 8005880:	680e      	ldr	r6, [r1, #0]
 8005882:	bf08      	it	eq
 8005884:	694b      	ldreq	r3, [r1, #20]
 8005886:	600f      	str	r7, [r1, #0]
 8005888:	bf18      	it	ne
 800588a:	2300      	movne	r3, #0
 800588c:	eba6 0807 	sub.w	r8, r6, r7
 8005890:	608b      	str	r3, [r1, #8]
 8005892:	f1b8 0f00 	cmp.w	r8, #0
 8005896:	dd9c      	ble.n	80057d2 <__sflush_r+0x1a>
 8005898:	4643      	mov	r3, r8
 800589a:	463a      	mov	r2, r7
 800589c:	6a21      	ldr	r1, [r4, #32]
 800589e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058a0:	4628      	mov	r0, r5
 80058a2:	47b0      	blx	r6
 80058a4:	2800      	cmp	r0, #0
 80058a6:	dc06      	bgt.n	80058b6 <__sflush_r+0xfe>
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ae:	81a3      	strh	r3, [r4, #12]
 80058b0:	f04f 30ff 	mov.w	r0, #4294967295
 80058b4:	e78e      	b.n	80057d4 <__sflush_r+0x1c>
 80058b6:	4407      	add	r7, r0
 80058b8:	eba8 0800 	sub.w	r8, r8, r0
 80058bc:	e7e9      	b.n	8005892 <__sflush_r+0xda>
 80058be:	bf00      	nop
 80058c0:	20400001 	.word	0x20400001

080058c4 <_fflush_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	690b      	ldr	r3, [r1, #16]
 80058c8:	4605      	mov	r5, r0
 80058ca:	460c      	mov	r4, r1
 80058cc:	b1db      	cbz	r3, 8005906 <_fflush_r+0x42>
 80058ce:	b118      	cbz	r0, 80058d8 <_fflush_r+0x14>
 80058d0:	6983      	ldr	r3, [r0, #24]
 80058d2:	b90b      	cbnz	r3, 80058d8 <_fflush_r+0x14>
 80058d4:	f7ff fa8e 	bl	8004df4 <__sinit>
 80058d8:	4b0c      	ldr	r3, [pc, #48]	; (800590c <_fflush_r+0x48>)
 80058da:	429c      	cmp	r4, r3
 80058dc:	d109      	bne.n	80058f2 <_fflush_r+0x2e>
 80058de:	686c      	ldr	r4, [r5, #4]
 80058e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058e4:	b17b      	cbz	r3, 8005906 <_fflush_r+0x42>
 80058e6:	4621      	mov	r1, r4
 80058e8:	4628      	mov	r0, r5
 80058ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058ee:	f7ff bf63 	b.w	80057b8 <__sflush_r>
 80058f2:	4b07      	ldr	r3, [pc, #28]	; (8005910 <_fflush_r+0x4c>)
 80058f4:	429c      	cmp	r4, r3
 80058f6:	d101      	bne.n	80058fc <_fflush_r+0x38>
 80058f8:	68ac      	ldr	r4, [r5, #8]
 80058fa:	e7f1      	b.n	80058e0 <_fflush_r+0x1c>
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <_fflush_r+0x50>)
 80058fe:	429c      	cmp	r4, r3
 8005900:	bf08      	it	eq
 8005902:	68ec      	ldreq	r4, [r5, #12]
 8005904:	e7ec      	b.n	80058e0 <_fflush_r+0x1c>
 8005906:	2000      	movs	r0, #0
 8005908:	bd38      	pop	{r3, r4, r5, pc}
 800590a:	bf00      	nop
 800590c:	08005cc8 	.word	0x08005cc8
 8005910:	08005ce8 	.word	0x08005ce8
 8005914:	08005ca8 	.word	0x08005ca8

08005918 <_lseek_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4c07      	ldr	r4, [pc, #28]	; (8005938 <_lseek_r+0x20>)
 800591c:	4605      	mov	r5, r0
 800591e:	4608      	mov	r0, r1
 8005920:	4611      	mov	r1, r2
 8005922:	2200      	movs	r2, #0
 8005924:	6022      	str	r2, [r4, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	f7fc fbda 	bl	80020e0 <_lseek>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d102      	bne.n	8005936 <_lseek_r+0x1e>
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	b103      	cbz	r3, 8005936 <_lseek_r+0x1e>
 8005934:	602b      	str	r3, [r5, #0]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	20012e94 	.word	0x20012e94

0800593c <__swhatbuf_r>:
 800593c:	b570      	push	{r4, r5, r6, lr}
 800593e:	460e      	mov	r6, r1
 8005940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005944:	2900      	cmp	r1, #0
 8005946:	b096      	sub	sp, #88	; 0x58
 8005948:	4614      	mov	r4, r2
 800594a:	461d      	mov	r5, r3
 800594c:	da07      	bge.n	800595e <__swhatbuf_r+0x22>
 800594e:	2300      	movs	r3, #0
 8005950:	602b      	str	r3, [r5, #0]
 8005952:	89b3      	ldrh	r3, [r6, #12]
 8005954:	061a      	lsls	r2, r3, #24
 8005956:	d410      	bmi.n	800597a <__swhatbuf_r+0x3e>
 8005958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800595c:	e00e      	b.n	800597c <__swhatbuf_r+0x40>
 800595e:	466a      	mov	r2, sp
 8005960:	f000 f8b2 	bl	8005ac8 <_fstat_r>
 8005964:	2800      	cmp	r0, #0
 8005966:	dbf2      	blt.n	800594e <__swhatbuf_r+0x12>
 8005968:	9a01      	ldr	r2, [sp, #4]
 800596a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800596e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005972:	425a      	negs	r2, r3
 8005974:	415a      	adcs	r2, r3
 8005976:	602a      	str	r2, [r5, #0]
 8005978:	e7ee      	b.n	8005958 <__swhatbuf_r+0x1c>
 800597a:	2340      	movs	r3, #64	; 0x40
 800597c:	2000      	movs	r0, #0
 800597e:	6023      	str	r3, [r4, #0]
 8005980:	b016      	add	sp, #88	; 0x58
 8005982:	bd70      	pop	{r4, r5, r6, pc}

08005984 <__smakebuf_r>:
 8005984:	898b      	ldrh	r3, [r1, #12]
 8005986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005988:	079d      	lsls	r5, r3, #30
 800598a:	4606      	mov	r6, r0
 800598c:	460c      	mov	r4, r1
 800598e:	d507      	bpl.n	80059a0 <__smakebuf_r+0x1c>
 8005990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	6123      	str	r3, [r4, #16]
 8005998:	2301      	movs	r3, #1
 800599a:	6163      	str	r3, [r4, #20]
 800599c:	b002      	add	sp, #8
 800599e:	bd70      	pop	{r4, r5, r6, pc}
 80059a0:	ab01      	add	r3, sp, #4
 80059a2:	466a      	mov	r2, sp
 80059a4:	f7ff ffca 	bl	800593c <__swhatbuf_r>
 80059a8:	9900      	ldr	r1, [sp, #0]
 80059aa:	4605      	mov	r5, r0
 80059ac:	4630      	mov	r0, r6
 80059ae:	f7ff faab 	bl	8004f08 <_malloc_r>
 80059b2:	b948      	cbnz	r0, 80059c8 <__smakebuf_r+0x44>
 80059b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059b8:	059a      	lsls	r2, r3, #22
 80059ba:	d4ef      	bmi.n	800599c <__smakebuf_r+0x18>
 80059bc:	f023 0303 	bic.w	r3, r3, #3
 80059c0:	f043 0302 	orr.w	r3, r3, #2
 80059c4:	81a3      	strh	r3, [r4, #12]
 80059c6:	e7e3      	b.n	8005990 <__smakebuf_r+0xc>
 80059c8:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <__smakebuf_r+0x7c>)
 80059ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80059cc:	89a3      	ldrh	r3, [r4, #12]
 80059ce:	6020      	str	r0, [r4, #0]
 80059d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059d4:	81a3      	strh	r3, [r4, #12]
 80059d6:	9b00      	ldr	r3, [sp, #0]
 80059d8:	6163      	str	r3, [r4, #20]
 80059da:	9b01      	ldr	r3, [sp, #4]
 80059dc:	6120      	str	r0, [r4, #16]
 80059de:	b15b      	cbz	r3, 80059f8 <__smakebuf_r+0x74>
 80059e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059e4:	4630      	mov	r0, r6
 80059e6:	f000 f881 	bl	8005aec <_isatty_r>
 80059ea:	b128      	cbz	r0, 80059f8 <__smakebuf_r+0x74>
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	431d      	orrs	r5, r3
 80059fc:	81a5      	strh	r5, [r4, #12]
 80059fe:	e7cd      	b.n	800599c <__smakebuf_r+0x18>
 8005a00:	08004dbd 	.word	0x08004dbd

08005a04 <__malloc_lock>:
 8005a04:	4770      	bx	lr

08005a06 <__malloc_unlock>:
 8005a06:	4770      	bx	lr

08005a08 <_free_r>:
 8005a08:	b538      	push	{r3, r4, r5, lr}
 8005a0a:	4605      	mov	r5, r0
 8005a0c:	2900      	cmp	r1, #0
 8005a0e:	d045      	beq.n	8005a9c <_free_r+0x94>
 8005a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a14:	1f0c      	subs	r4, r1, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	bfb8      	it	lt
 8005a1a:	18e4      	addlt	r4, r4, r3
 8005a1c:	f7ff fff2 	bl	8005a04 <__malloc_lock>
 8005a20:	4a1f      	ldr	r2, [pc, #124]	; (8005aa0 <_free_r+0x98>)
 8005a22:	6813      	ldr	r3, [r2, #0]
 8005a24:	4610      	mov	r0, r2
 8005a26:	b933      	cbnz	r3, 8005a36 <_free_r+0x2e>
 8005a28:	6063      	str	r3, [r4, #4]
 8005a2a:	6014      	str	r4, [r2, #0]
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a32:	f7ff bfe8 	b.w	8005a06 <__malloc_unlock>
 8005a36:	42a3      	cmp	r3, r4
 8005a38:	d90c      	bls.n	8005a54 <_free_r+0x4c>
 8005a3a:	6821      	ldr	r1, [r4, #0]
 8005a3c:	1862      	adds	r2, r4, r1
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	bf04      	itt	eq
 8005a42:	681a      	ldreq	r2, [r3, #0]
 8005a44:	685b      	ldreq	r3, [r3, #4]
 8005a46:	6063      	str	r3, [r4, #4]
 8005a48:	bf04      	itt	eq
 8005a4a:	1852      	addeq	r2, r2, r1
 8005a4c:	6022      	streq	r2, [r4, #0]
 8005a4e:	6004      	str	r4, [r0, #0]
 8005a50:	e7ec      	b.n	8005a2c <_free_r+0x24>
 8005a52:	4613      	mov	r3, r2
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	b10a      	cbz	r2, 8005a5c <_free_r+0x54>
 8005a58:	42a2      	cmp	r2, r4
 8005a5a:	d9fa      	bls.n	8005a52 <_free_r+0x4a>
 8005a5c:	6819      	ldr	r1, [r3, #0]
 8005a5e:	1858      	adds	r0, r3, r1
 8005a60:	42a0      	cmp	r0, r4
 8005a62:	d10b      	bne.n	8005a7c <_free_r+0x74>
 8005a64:	6820      	ldr	r0, [r4, #0]
 8005a66:	4401      	add	r1, r0
 8005a68:	1858      	adds	r0, r3, r1
 8005a6a:	4282      	cmp	r2, r0
 8005a6c:	6019      	str	r1, [r3, #0]
 8005a6e:	d1dd      	bne.n	8005a2c <_free_r+0x24>
 8005a70:	6810      	ldr	r0, [r2, #0]
 8005a72:	6852      	ldr	r2, [r2, #4]
 8005a74:	605a      	str	r2, [r3, #4]
 8005a76:	4401      	add	r1, r0
 8005a78:	6019      	str	r1, [r3, #0]
 8005a7a:	e7d7      	b.n	8005a2c <_free_r+0x24>
 8005a7c:	d902      	bls.n	8005a84 <_free_r+0x7c>
 8005a7e:	230c      	movs	r3, #12
 8005a80:	602b      	str	r3, [r5, #0]
 8005a82:	e7d3      	b.n	8005a2c <_free_r+0x24>
 8005a84:	6820      	ldr	r0, [r4, #0]
 8005a86:	1821      	adds	r1, r4, r0
 8005a88:	428a      	cmp	r2, r1
 8005a8a:	bf04      	itt	eq
 8005a8c:	6811      	ldreq	r1, [r2, #0]
 8005a8e:	6852      	ldreq	r2, [r2, #4]
 8005a90:	6062      	str	r2, [r4, #4]
 8005a92:	bf04      	itt	eq
 8005a94:	1809      	addeq	r1, r1, r0
 8005a96:	6021      	streq	r1, [r4, #0]
 8005a98:	605c      	str	r4, [r3, #4]
 8005a9a:	e7c7      	b.n	8005a2c <_free_r+0x24>
 8005a9c:	bd38      	pop	{r3, r4, r5, pc}
 8005a9e:	bf00      	nop
 8005aa0:	20012e04 	.word	0x20012e04

08005aa4 <_read_r>:
 8005aa4:	b538      	push	{r3, r4, r5, lr}
 8005aa6:	4c07      	ldr	r4, [pc, #28]	; (8005ac4 <_read_r+0x20>)
 8005aa8:	4605      	mov	r5, r0
 8005aaa:	4608      	mov	r0, r1
 8005aac:	4611      	mov	r1, r2
 8005aae:	2200      	movs	r2, #0
 8005ab0:	6022      	str	r2, [r4, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f7fc fab4 	bl	8002020 <_read>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_read_r+0x1e>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_read_r+0x1e>
 8005ac0:	602b      	str	r3, [r5, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	20012e94 	.word	0x20012e94

08005ac8 <_fstat_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4c07      	ldr	r4, [pc, #28]	; (8005ae8 <_fstat_r+0x20>)
 8005acc:	2300      	movs	r3, #0
 8005ace:	4605      	mov	r5, r0
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	f7fc fae8 	bl	80020aa <_fstat>
 8005ada:	1c43      	adds	r3, r0, #1
 8005adc:	d102      	bne.n	8005ae4 <_fstat_r+0x1c>
 8005ade:	6823      	ldr	r3, [r4, #0]
 8005ae0:	b103      	cbz	r3, 8005ae4 <_fstat_r+0x1c>
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	bd38      	pop	{r3, r4, r5, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20012e94 	.word	0x20012e94

08005aec <_isatty_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4c06      	ldr	r4, [pc, #24]	; (8005b08 <_isatty_r+0x1c>)
 8005af0:	2300      	movs	r3, #0
 8005af2:	4605      	mov	r5, r0
 8005af4:	4608      	mov	r0, r1
 8005af6:	6023      	str	r3, [r4, #0]
 8005af8:	f7fc fae7 	bl	80020ca <_isatty>
 8005afc:	1c43      	adds	r3, r0, #1
 8005afe:	d102      	bne.n	8005b06 <_isatty_r+0x1a>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	b103      	cbz	r3, 8005b06 <_isatty_r+0x1a>
 8005b04:	602b      	str	r3, [r5, #0]
 8005b06:	bd38      	pop	{r3, r4, r5, pc}
 8005b08:	20012e94 	.word	0x20012e94

08005b0c <_sbrk>:
 8005b0c:	4b04      	ldr	r3, [pc, #16]	; (8005b20 <_sbrk+0x14>)
 8005b0e:	6819      	ldr	r1, [r3, #0]
 8005b10:	4602      	mov	r2, r0
 8005b12:	b909      	cbnz	r1, 8005b18 <_sbrk+0xc>
 8005b14:	4903      	ldr	r1, [pc, #12]	; (8005b24 <_sbrk+0x18>)
 8005b16:	6019      	str	r1, [r3, #0]
 8005b18:	6818      	ldr	r0, [r3, #0]
 8005b1a:	4402      	add	r2, r0
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	4770      	bx	lr
 8005b20:	20012e0c 	.word	0x20012e0c
 8005b24:	20012e98 	.word	0x20012e98

08005b28 <_init>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr

08005b34 <_fini>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr
